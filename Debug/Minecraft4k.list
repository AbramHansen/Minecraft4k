
Minecraft4k.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008230  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  080083c0  080083c0  000183c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086f8  080086f8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080086f8  080086f8  000186f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008700  08008700  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008700  08008700  00018700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008704  08008704  00018704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008708  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001340  20000078  08008780  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b8  08008780  000213b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d83f  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002007  00000000  00000000  0002d92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  0002f938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000919  00000000  00000000  00030518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002731a  00000000  00000000  00030e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb72  00000000  00000000  0005814b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec524  00000000  00000000  00066cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e1c  00000000  00000000  001531e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00157000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083a8 	.word	0x080083a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080083a8 	.word	0x080083a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b970 	b.w	8000f30 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	460d      	mov	r5, r1
 8000c70:	4604      	mov	r4, r0
 8000c72:	460f      	mov	r7, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d14a      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4694      	mov	ip, r2
 8000c7c:	d965      	bls.n	8000d4a <__udivmoddi4+0xe2>
 8000c7e:	fab2 f382 	clz	r3, r2
 8000c82:	b143      	cbz	r3, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c88:	f1c3 0220 	rsb	r2, r3, #32
 8000c8c:	409f      	lsls	r7, r3
 8000c8e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c92:	4317      	orrs	r7, r2
 8000c94:	409c      	lsls	r4, r3
 8000c96:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c9a:	fa1f f58c 	uxth.w	r5, ip
 8000c9e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ca2:	0c22      	lsrs	r2, r4, #16
 8000ca4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ca8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cac:	fb01 f005 	mul.w	r0, r1, r5
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x62>
 8000cb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cbc:	f080 811c 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	f240 8119 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cc6:	3902      	subs	r1, #2
 8000cc8:	4462      	add	r2, ip
 8000cca:	1a12      	subs	r2, r2, r0
 8000ccc:	b2a4      	uxth	r4, r4
 8000cce:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cd2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cd6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cda:	fb00 f505 	mul.w	r5, r0, r5
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	d90a      	bls.n	8000cf8 <__udivmoddi4+0x90>
 8000ce2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cea:	f080 8107 	bcs.w	8000efc <__udivmoddi4+0x294>
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	f240 8104 	bls.w	8000efc <__udivmoddi4+0x294>
 8000cf4:	4464      	add	r4, ip
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	2100      	movs	r1, #0
 8000d00:	b11e      	cbz	r6, 8000d0a <__udivmoddi4+0xa2>
 8000d02:	40dc      	lsrs	r4, r3
 8000d04:	2300      	movs	r3, #0
 8000d06:	e9c6 4300 	strd	r4, r3, [r6]
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0xbc>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80ed 	beq.w	8000ef2 <__udivmoddi4+0x28a>
 8000d18:	2100      	movs	r1, #0
 8000d1a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	fab3 f183 	clz	r1, r3
 8000d28:	2900      	cmp	r1, #0
 8000d2a:	d149      	bne.n	8000dc0 <__udivmoddi4+0x158>
 8000d2c:	42ab      	cmp	r3, r5
 8000d2e:	d302      	bcc.n	8000d36 <__udivmoddi4+0xce>
 8000d30:	4282      	cmp	r2, r0
 8000d32:	f200 80f8 	bhi.w	8000f26 <__udivmoddi4+0x2be>
 8000d36:	1a84      	subs	r4, r0, r2
 8000d38:	eb65 0203 	sbc.w	r2, r5, r3
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	2e00      	cmp	r6, #0
 8000d42:	d0e2      	beq.n	8000d0a <__udivmoddi4+0xa2>
 8000d44:	e9c6 4700 	strd	r4, r7, [r6]
 8000d48:	e7df      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d4a:	b902      	cbnz	r2, 8000d4e <__udivmoddi4+0xe6>
 8000d4c:	deff      	udf	#255	; 0xff
 8000d4e:	fab2 f382 	clz	r3, r2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f040 8090 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d58:	1a8a      	subs	r2, r1, r2
 8000d5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	2101      	movs	r1, #1
 8000d64:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d68:	fb07 2015 	mls	r0, r7, r5, r2
 8000d6c:	0c22      	lsrs	r2, r4, #16
 8000d6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d72:	fb0e f005 	mul.w	r0, lr, r5
 8000d76:	4290      	cmp	r0, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d7e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4290      	cmp	r0, r2
 8000d86:	f200 80cb 	bhi.w	8000f20 <__udivmoddi4+0x2b8>
 8000d8a:	4645      	mov	r5, r8
 8000d8c:	1a12      	subs	r2, r2, r0
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d94:	fb07 2210 	mls	r2, r7, r0, r2
 8000d98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x14e>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x14c>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f200 80bb 	bhi.w	8000f2a <__udivmoddi4+0x2c2>
 8000db4:	4610      	mov	r0, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dbe:	e79f      	b.n	8000d00 <__udivmoddi4+0x98>
 8000dc0:	f1c1 0720 	rsb	r7, r1, #32
 8000dc4:	408b      	lsls	r3, r1
 8000dc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dce:	fa05 f401 	lsl.w	r4, r5, r1
 8000dd2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dd6:	40fd      	lsrs	r5, r7
 8000dd8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ddc:	4323      	orrs	r3, r4
 8000dde:	fbb5 f8f9 	udiv	r8, r5, r9
 8000de2:	fa1f fe8c 	uxth.w	lr, ip
 8000de6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dea:	0c1c      	lsrs	r4, r3, #16
 8000dec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000df0:	fb08 f50e 	mul.w	r5, r8, lr
 8000df4:	42a5      	cmp	r5, r4
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e08:	f080 8088 	bcs.w	8000f1c <__udivmoddi4+0x2b4>
 8000e0c:	42a5      	cmp	r5, r4
 8000e0e:	f240 8085 	bls.w	8000f1c <__udivmoddi4+0x2b4>
 8000e12:	f1a8 0802 	sub.w	r8, r8, #2
 8000e16:	4464      	add	r4, ip
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	b29d      	uxth	r5, r3
 8000e1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e20:	fb09 4413 	mls	r4, r9, r3, r4
 8000e24:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e28:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e38:	d26c      	bcs.n	8000f14 <__udivmoddi4+0x2ac>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	d96a      	bls.n	8000f14 <__udivmoddi4+0x2ac>
 8000e3e:	3b02      	subs	r3, #2
 8000e40:	4464      	add	r4, ip
 8000e42:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e46:	fba3 9502 	umull	r9, r5, r3, r2
 8000e4a:	eba4 040e 	sub.w	r4, r4, lr
 8000e4e:	42ac      	cmp	r4, r5
 8000e50:	46c8      	mov	r8, r9
 8000e52:	46ae      	mov	lr, r5
 8000e54:	d356      	bcc.n	8000f04 <__udivmoddi4+0x29c>
 8000e56:	d053      	beq.n	8000f00 <__udivmoddi4+0x298>
 8000e58:	b156      	cbz	r6, 8000e70 <__udivmoddi4+0x208>
 8000e5a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e5e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e62:	fa04 f707 	lsl.w	r7, r4, r7
 8000e66:	40ca      	lsrs	r2, r1
 8000e68:	40cc      	lsrs	r4, r1
 8000e6a:	4317      	orrs	r7, r2
 8000e6c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e70:	4618      	mov	r0, r3
 8000e72:	2100      	movs	r1, #0
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	f1c3 0120 	rsb	r1, r3, #32
 8000e7c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e80:	fa20 f201 	lsr.w	r2, r0, r1
 8000e84:	fa25 f101 	lsr.w	r1, r5, r1
 8000e88:	409d      	lsls	r5, r3
 8000e8a:	432a      	orrs	r2, r5
 8000e8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1510 	mls	r5, r7, r0, r1
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ea2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ea6:	428d      	cmp	r5, r1
 8000ea8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x258>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eb6:	d22f      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eb8:	428d      	cmp	r5, r1
 8000eba:	d92d      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1b49      	subs	r1, r1, r5
 8000ec2:	b292      	uxth	r2, r2
 8000ec4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ec8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ecc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ed4:	4291      	cmp	r1, r2
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x282>
 8000ed8:	eb1c 0202 	adds.w	r2, ip, r2
 8000edc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ee0:	d216      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000ee2:	4291      	cmp	r1, r2
 8000ee4:	d914      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000ee6:	3d02      	subs	r5, #2
 8000ee8:	4462      	add	r2, ip
 8000eea:	1a52      	subs	r2, r2, r1
 8000eec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ef0:	e738      	b.n	8000d64 <__udivmoddi4+0xfc>
 8000ef2:	4631      	mov	r1, r6
 8000ef4:	4630      	mov	r0, r6
 8000ef6:	e708      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000ef8:	4639      	mov	r1, r7
 8000efa:	e6e6      	b.n	8000cca <__udivmoddi4+0x62>
 8000efc:	4610      	mov	r0, r2
 8000efe:	e6fb      	b.n	8000cf8 <__udivmoddi4+0x90>
 8000f00:	4548      	cmp	r0, r9
 8000f02:	d2a9      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f04:	ebb9 0802 	subs.w	r8, r9, r2
 8000f08:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	e7a3      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f10:	4645      	mov	r5, r8
 8000f12:	e7ea      	b.n	8000eea <__udivmoddi4+0x282>
 8000f14:	462b      	mov	r3, r5
 8000f16:	e794      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f18:	4640      	mov	r0, r8
 8000f1a:	e7d1      	b.n	8000ec0 <__udivmoddi4+0x258>
 8000f1c:	46d0      	mov	r8, sl
 8000f1e:	e77b      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f20:	3d02      	subs	r5, #2
 8000f22:	4462      	add	r2, ip
 8000f24:	e732      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f26:	4608      	mov	r0, r1
 8000f28:	e70a      	b.n	8000d40 <__udivmoddi4+0xd8>
 8000f2a:	4464      	add	r4, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e742      	b.n	8000db6 <__udivmoddi4+0x14e>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <ILI9341_Select>:
 *      Author: PC-MAGH
 */

#include "ili9341.h"

static void ILI9341_Select() {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port_1, ILI9341_CS_Pin_1, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2110      	movs	r1, #16
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f40:	f002 f92e 	bl	80031a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port_2, ILI9341_CS_Pin_2, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2101      	movs	r1, #1
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <ILI9341_Select+0x20>)
 8000f4a:	f002 f929 	bl	80031a0 <HAL_GPIO_WritePin>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	48000800 	.word	0x48000800

08000f58 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port_1, ILI9341_CS_Pin_1, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2110      	movs	r1, #16
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f64:	f002 f91c 	bl	80031a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port_2, ILI9341_CS_Pin_2, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <ILI9341_Unselect+0x20>)
 8000f6e:	f002 f917 	bl	80031a0 <HAL_GPIO_WritePin>
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	48000800 	.word	0x48000800

08000f7c <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port_1, ILI9341_RES_Pin_1, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2102      	movs	r1, #2
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f002 f90a 	bl	80031a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port_2, ILI9341_RES_Pin_2, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2102      	movs	r1, #2
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <ILI9341_Reset+0x3c>)
 8000f92:	f002 f905 	bl	80031a0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000f96:	2005      	movs	r0, #5
 8000f98:	f001 fe4e 	bl	8002c38 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port_1, ILI9341_RES_Pin_1, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa4:	f002 f8fc 	bl	80031a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port_2, ILI9341_RES_Pin_2, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2102      	movs	r1, #2
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <ILI9341_Reset+0x3c>)
 8000fae:	f002 f8f7 	bl	80031a0 <HAL_GPIO_WritePin>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	48000800 	.word	0x48000800

08000fbc <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port_1, ILI9341_DC_Pin_1, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2140      	movs	r1, #64	; 0x40
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fce:	f002 f8e7 	bl	80031a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port_2, ILI9341_DC_Pin_2, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	480a      	ldr	r0, [pc, #40]	; (8001000 <ILI9341_WriteCommand+0x44>)
 8000fd8:	f002 f8e2 	bl	80031a0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT_1, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000fdc:	1df9      	adds	r1, r7, #7
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4807      	ldr	r0, [pc, #28]	; (8001004 <ILI9341_WriteCommand+0x48>)
 8000fe6:	f003 fcb6 	bl	8004956 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT_2, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000fea:	1df9      	adds	r1, r7, #7
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <ILI9341_WriteCommand+0x4c>)
 8000ff4:	f003 fcaf 	bl	8004956 <HAL_SPI_Transmit>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	48000800 	.word	0x48000800
 8001004:	200010b0 	.word	0x200010b0
 8001008:	20001114 	.word	0x20001114

0800100c <ILI9341_WriteData_1>:

static void ILI9341_WriteData_1(uint8_t* buff, size_t buff_size) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port_1, ILI9341_DC_Pin_1, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	2140      	movs	r1, #64	; 0x40
 800101a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101e:	f002 f8bf 	bl	80031a0 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8001022:	e015      	b.n	8001050 <ILI9341_WriteData_1+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800102a:	bf28      	it	cs
 800102c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8001030:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT_1, buff, chunk_size, HAL_MAX_DELAY);
 8001032:	89fa      	ldrh	r2, [r7, #14]
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4809      	ldr	r0, [pc, #36]	; (8001060 <ILI9341_WriteData_1+0x54>)
 800103c:	f003 fc8b 	bl	8004956 <HAL_SPI_Transmit>

        buff += chunk_size;
 8001040:	89fb      	ldrh	r3, [r7, #14]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8001048:	89fb      	ldrh	r3, [r7, #14]
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1e6      	bne.n	8001024 <ILI9341_WriteData_1+0x18>
    }
}
 8001056:	bf00      	nop
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200010b0 	.word	0x200010b0

08001064 <ILI9341_WriteData_2>:

static void ILI9341_WriteData_2(uint8_t* buff, size_t buff_size) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port_2, ILI9341_DC_Pin_2, GPIO_PIN_SET);
 800106e:	2201      	movs	r2, #1
 8001070:	2104      	movs	r1, #4
 8001072:	4811      	ldr	r0, [pc, #68]	; (80010b8 <ILI9341_WriteData_2+0x54>)
 8001074:	f002 f894 	bl	80031a0 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8001078:	e015      	b.n	80010a6 <ILI9341_WriteData_2+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001080:	bf28      	it	cs
 8001082:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8001086:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT_2, buff, chunk_size, HAL_MAX_DELAY);
 8001088:	89fa      	ldrh	r2, [r7, #14]
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	480a      	ldr	r0, [pc, #40]	; (80010bc <ILI9341_WriteData_2+0x58>)
 8001092:	f003 fc60 	bl	8004956 <HAL_SPI_Transmit>

        buff += chunk_size;
 8001096:	89fb      	ldrh	r3, [r7, #14]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 800109e:	89fb      	ldrh	r3, [r7, #14]
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1e6      	bne.n	800107a <ILI9341_WriteData_2+0x16>
    }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	48000800 	.word	0x48000800
 80010bc:	20001114 	.word	0x20001114

080010c0 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4604      	mov	r4, r0
 80010c8:	4608      	mov	r0, r1
 80010ca:	4611      	mov	r1, r2
 80010cc:	461a      	mov	r2, r3
 80010ce:	4623      	mov	r3, r4
 80010d0:	80fb      	strh	r3, [r7, #6]
 80010d2:	4603      	mov	r3, r0
 80010d4:	80bb      	strh	r3, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	807b      	strh	r3, [r7, #2]
 80010da:	4613      	mov	r3, r2
 80010dc:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 80010de:	202a      	movs	r0, #42	; 0x2a
 80010e0:	f7ff ff6c 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	0a1b      	lsrs	r3, r3, #8
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	733b      	strb	r3, [r7, #12]
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	737b      	strb	r3, [r7, #13]
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	73bb      	strb	r3, [r7, #14]
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData_1(data, sizeof(data));
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2104      	movs	r1, #4
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff7e 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2104      	movs	r1, #4
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ffa4 	bl	8001064 <ILI9341_WriteData_2>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 800111c:	202b      	movs	r0, #43	; 0x2b
 800111e:	f7ff ff4d 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8001122:	88bb      	ldrh	r3, [r7, #4]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	b29b      	uxth	r3, r3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	723b      	strb	r3, [r7, #8]
 800112c:	88bb      	ldrh	r3, [r7, #4]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	727b      	strb	r3, [r7, #9]
 8001132:	883b      	ldrh	r3, [r7, #0]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	b29b      	uxth	r3, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	72bb      	strb	r3, [r7, #10]
 800113c:	883b      	ldrh	r3, [r7, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData_1(data, sizeof(data));
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	2104      	movs	r1, #4
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5f 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	2104      	movs	r1, #4
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff85 	bl	8001064 <ILI9341_WriteData_2>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800115a:	202c      	movs	r0, #44	; 0x2c
 800115c:	f7ff ff2e 	bl	8000fbc <ILI9341_WriteCommand>
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	bd90      	pop	{r4, r7, pc}

08001168 <ILI9341_Init>:

void ILI9341_Init() {
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b09b      	sub	sp, #108	; 0x6c
 800116c:	af00      	add	r7, sp, #0
    ILI9341_Select();
 800116e:	f7ff fee1 	bl	8000f34 <ILI9341_Select>
    ILI9341_Reset();
 8001172:	f7ff ff03 	bl	8000f7c <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8001176:	2001      	movs	r0, #1
 8001178:	f7ff ff20 	bl	8000fbc <ILI9341_WriteCommand>
    HAL_Delay(1000);
 800117c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001180:	f001 fd5a 	bl	8002c38 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8001184:	20cb      	movs	r0, #203	; 0xcb
 8001186:	f7ff ff19 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800118a:	4abf      	ldr	r2, [pc, #764]	; (8001488 <ILI9341_Init+0x320>)
 800118c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001194:	6018      	str	r0, [r3, #0]
 8001196:	3304      	adds	r3, #4
 8001198:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData_1(data, sizeof(data));
 800119a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800119e:	2105      	movs	r1, #5
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff33 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 80011a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011aa:	2105      	movs	r1, #5
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff59 	bl	8001064 <ILI9341_WriteData_2>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80011b2:	20cf      	movs	r0, #207	; 0xcf
 80011b4:	f7ff ff02 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80011b8:	4ab4      	ldr	r2, [pc, #720]	; (800148c <ILI9341_Init+0x324>)
 80011ba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	4611      	mov	r1, r2
 80011c2:	8019      	strh	r1, [r3, #0]
 80011c4:	3302      	adds	r3, #2
 80011c6:	0c12      	lsrs	r2, r2, #16
 80011c8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData_1(data, sizeof(data));
 80011ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011ce:	2103      	movs	r1, #3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff1b 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 80011d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011da:	2103      	movs	r1, #3
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff41 	bl	8001064 <ILI9341_WriteData_2>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80011e2:	20e8      	movs	r0, #232	; 0xe8
 80011e4:	f7ff feea 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80011e8:	4aa9      	ldr	r2, [pc, #676]	; (8001490 <ILI9341_Init+0x328>)
 80011ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	4611      	mov	r1, r2
 80011f2:	8019      	strh	r1, [r3, #0]
 80011f4:	3302      	adds	r3, #2
 80011f6:	0c12      	lsrs	r2, r2, #16
 80011f8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData_1(data, sizeof(data));
 80011fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011fe:	2103      	movs	r1, #3
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff03 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 8001206:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800120a:	2103      	movs	r1, #3
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff29 	bl	8001064 <ILI9341_WriteData_2>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8001212:	20ea      	movs	r0, #234	; 0xea
 8001214:	f7ff fed2 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8001218:	2300      	movs	r3, #0
 800121a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData_1(data, sizeof(data));
 800121e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001222:	2102      	movs	r1, #2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fef1 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 800122a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800122e:	2102      	movs	r1, #2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff17 	bl	8001064 <ILI9341_WriteData_2>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8001236:	20ed      	movs	r0, #237	; 0xed
 8001238:	f7ff fec0 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 800123c:	4b95      	ldr	r3, [pc, #596]	; (8001494 <ILI9341_Init+0x32c>)
 800123e:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData_1(data, sizeof(data));
 8001240:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001244:	2104      	movs	r1, #4
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fee0 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 800124c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001250:	2104      	movs	r1, #4
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff06 	bl	8001064 <ILI9341_WriteData_2>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8001258:	20f7      	movs	r0, #247	; 0xf7
 800125a:	f7ff feaf 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 800125e:	2320      	movs	r3, #32
 8001260:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData_1(data, sizeof(data));
 8001264:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001268:	2101      	movs	r1, #1
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fece 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 8001270:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001274:	2101      	movs	r1, #1
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fef4 	bl	8001064 <ILI9341_WriteData_2>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 800127c:	20c0      	movs	r0, #192	; 0xc0
 800127e:	f7ff fe9d 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8001282:	2323      	movs	r3, #35	; 0x23
 8001284:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData_1(data, sizeof(data));
 8001288:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800128c:	2101      	movs	r1, #1
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff febc 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 8001294:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001298:	2101      	movs	r1, #1
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fee2 	bl	8001064 <ILI9341_WriteData_2>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80012a0:	20c1      	movs	r0, #193	; 0xc1
 80012a2:	f7ff fe8b 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80012a6:	2310      	movs	r3, #16
 80012a8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData_1(data, sizeof(data));
 80012ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012b0:	2101      	movs	r1, #1
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff feaa 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 80012b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012bc:	2101      	movs	r1, #1
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fed0 	bl	8001064 <ILI9341_WriteData_2>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80012c4:	20c5      	movs	r0, #197	; 0xc5
 80012c6:	f7ff fe79 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80012ca:	f642 033e 	movw	r3, #10302	; 0x283e
 80012ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData_1(data, sizeof(data));
 80012d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012d6:	2102      	movs	r1, #2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe97 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 80012de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012e2:	2102      	movs	r1, #2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff febd 	bl	8001064 <ILI9341_WriteData_2>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80012ea:	20c7      	movs	r0, #199	; 0xc7
 80012ec:	f7ff fe66 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80012f0:	2386      	movs	r3, #134	; 0x86
 80012f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData_1(data, sizeof(data));
 80012f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012fa:	2101      	movs	r1, #1
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fe85 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 8001302:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001306:	2101      	movs	r1, #1
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff feab 	bl	8001064 <ILI9341_WriteData_2>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800130e:	2036      	movs	r0, #54	; 0x36
 8001310:	f7ff fe54 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8001314:	2348      	movs	r3, #72	; 0x48
 8001316:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData_1(data, sizeof(data));
 800131a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800131e:	2101      	movs	r1, #1
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe73 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 8001326:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800132a:	2101      	movs	r1, #1
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fe99 	bl	8001064 <ILI9341_WriteData_2>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8001332:	203a      	movs	r0, #58	; 0x3a
 8001334:	f7ff fe42 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8001338:	2355      	movs	r3, #85	; 0x55
 800133a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData_1(data, sizeof(data));
 800133e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001342:	2101      	movs	r1, #1
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fe61 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 800134a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800134e:	2101      	movs	r1, #1
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe87 	bl	8001064 <ILI9341_WriteData_2>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8001356:	20b1      	movs	r0, #177	; 0xb1
 8001358:	f7ff fe30 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 800135c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001360:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData_1(data, sizeof(data));
 8001362:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001366:	2102      	movs	r1, #2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fe4f 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 800136e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001372:	2102      	movs	r1, #2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fe75 	bl	8001064 <ILI9341_WriteData_2>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 800137a:	20b6      	movs	r0, #182	; 0xb6
 800137c:	f7ff fe1e 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8001380:	4a45      	ldr	r2, [pc, #276]	; (8001498 <ILI9341_Init+0x330>)
 8001382:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	4611      	mov	r1, r2
 800138a:	8019      	strh	r1, [r3, #0]
 800138c:	3302      	adds	r3, #2
 800138e:	0c12      	lsrs	r2, r2, #16
 8001390:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData_1(data, sizeof(data));
 8001392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001396:	2103      	movs	r1, #3
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fe37 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 800139e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a2:	2103      	movs	r1, #3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fe5d 	bl	8001064 <ILI9341_WriteData_2>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 80013aa:	20f2      	movs	r0, #242	; 0xf2
 80013ac:	f7ff fe06 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData_1(data, sizeof(data));
 80013b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ba:	2101      	movs	r1, #1
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe25 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 80013c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c6:	2101      	movs	r1, #1
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fe4b 	bl	8001064 <ILI9341_WriteData_2>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80013ce:	2026      	movs	r0, #38	; 0x26
 80013d0:	f7ff fdf4 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80013d4:	2301      	movs	r3, #1
 80013d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData_1(data, sizeof(data));
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	2101      	movs	r1, #1
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fe13 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	2101      	movs	r1, #1
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fe39 	bl	8001064 <ILI9341_WriteData_2>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80013f2:	20e0      	movs	r0, #224	; 0xe0
 80013f4:	f7ff fde2 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <ILI9341_Init+0x334>)
 80013fa:	f107 0414 	add.w	r4, r7, #20
 80013fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001400:	c407      	stmia	r4!, {r0, r1, r2}
 8001402:	8023      	strh	r3, [r4, #0]
 8001404:	3402      	adds	r4, #2
 8001406:	0c1b      	lsrs	r3, r3, #16
 8001408:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData_1(data, sizeof(data));
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	210f      	movs	r1, #15
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fdfb 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	210f      	movs	r1, #15
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fe21 	bl	8001064 <ILI9341_WriteData_2>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8001422:	20e1      	movs	r0, #225	; 0xe1
 8001424:	f7ff fdca 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <ILI9341_Init+0x338>)
 800142a:	1d3c      	adds	r4, r7, #4
 800142c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800142e:	c407      	stmia	r4!, {r0, r1, r2}
 8001430:	8023      	strh	r3, [r4, #0]
 8001432:	3402      	adds	r4, #2
 8001434:	0c1b      	lsrs	r3, r3, #16
 8001436:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData_1(data, sizeof(data));
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	210f      	movs	r1, #15
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fde5 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	210f      	movs	r1, #15
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fe0c 	bl	8001064 <ILI9341_WriteData_2>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800144c:	2011      	movs	r0, #17
 800144e:	f7ff fdb5 	bl	8000fbc <ILI9341_WriteCommand>
    HAL_Delay(120);
 8001452:	2078      	movs	r0, #120	; 0x78
 8001454:	f001 fbf0 	bl	8002c38 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8001458:	2029      	movs	r0, #41	; 0x29
 800145a:	f7ff fdaf 	bl	8000fbc <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 800145e:	2036      	movs	r0, #54	; 0x36
 8001460:	f7ff fdac 	bl	8000fbc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8001464:	2348      	movs	r3, #72	; 0x48
 8001466:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData_1(data, sizeof(data));
 8001468:	463b      	mov	r3, r7
 800146a:	2101      	movs	r1, #1
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fdcd 	bl	800100c <ILI9341_WriteData_1>
        ILI9341_WriteData_2(data, sizeof(data));
 8001472:	463b      	mov	r3, r7
 8001474:	2101      	movs	r1, #1
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fdf4 	bl	8001064 <ILI9341_WriteData_2>
    }

    ILI9341_Unselect();
 800147c:	f7ff fd6c 	bl	8000f58 <ILI9341_Unselect>
}
 8001480:	bf00      	nop
 8001482:	376c      	adds	r7, #108	; 0x6c
 8001484:	46bd      	mov	sp, r7
 8001486:	bd90      	pop	{r4, r7, pc}
 8001488:	080083c0 	.word	0x080083c0
 800148c:	080083c8 	.word	0x080083c8
 8001490:	080083cc 	.word	0x080083cc
 8001494:	81120364 	.word	0x81120364
 8001498:	080083d0 	.word	0x080083d0
 800149c:	080083d4 	.word	0x080083d4
 80014a0:	080083e4 	.word	0x080083e4
 80014a4:	00000000 	.word	0x00000000

080014a8 <ILI9341_MinecraftInit>:

char map[4096]; //16 * 16 * 16

void ILI9341_MinecraftInit() {
 80014a8:	b5b0      	push	{r4, r5, r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
    for ( char x = 0; x < 16; x++) {
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	e0a0      	b.n	80015f6 <ILI9341_MinecraftInit+0x14e>
        for ( char y = 0; y < 16; y++) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	73bb      	strb	r3, [r7, #14]
 80014b8:	e096      	b.n	80015e8 <ILI9341_MinecraftInit+0x140>
            for ( char z = 0; z < 16; z++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	737b      	strb	r3, [r7, #13]
 80014be:	e08c      	b.n	80015da <ILI9341_MinecraftInit+0x132>
                int i = (z * 16 * 16) + (y * 16) + x;
 80014c0:	7b7b      	ldrb	r3, [r7, #13]
 80014c2:	011a      	lsls	r2, r3, #4
 80014c4:	7bbb      	ldrb	r3, [r7, #14]
 80014c6:	4413      	add	r3, r2
 80014c8:	011a      	lsls	r2, r3, #4
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	4413      	add	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
                float yd = (y - 16) * 0.2;
 80014d0:	7bbb      	ldrb	r3, [r7, #14]
 80014d2:	3b10      	subs	r3, #16
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f81d 	bl	8000514 <__aeabi_i2d>
 80014da:	a351      	add	r3, pc, #324	; (adr r3, 8001620 <ILI9341_MinecraftInit+0x178>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f882 	bl	80005e8 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff fb54 	bl	8000b98 <__aeabi_d2f>
 80014f0:	4603      	mov	r3, r0
 80014f2:	607b      	str	r3, [r7, #4]
                float zd = (z - 16) * 0.2;
 80014f4:	7b7b      	ldrb	r3, [r7, #13]
 80014f6:	3b10      	subs	r3, #16
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff f80b 	bl	8000514 <__aeabi_i2d>
 80014fe:	a348      	add	r3, pc, #288	; (adr r3, 8001620 <ILI9341_MinecraftInit+0x178>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7ff f870 	bl	80005e8 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fb42 	bl	8000b98 <__aeabi_d2f>
 8001514:	4603      	mov	r3, r0
 8001516:	603b      	str	r3, [r7, #0]
                if (y < 16) {
 8001518:	7bbb      	ldrb	r3, [r7, #14]
 800151a:	2b0f      	cmp	r3, #15
 800151c:	d813      	bhi.n	8001546 <ILI9341_MinecraftInit+0x9e>
                    map[i] = (rand() % 5) | 0;
 800151e:	f004 fdc1 	bl	80060a4 <rand>
 8001522:	4602      	mov	r2, r0
 8001524:	4b3c      	ldr	r3, [pc, #240]	; (8001618 <ILI9341_MinecraftInit+0x170>)
 8001526:	fb83 1302 	smull	r1, r3, r3, r2
 800152a:	1059      	asrs	r1, r3, #1
 800152c:	17d3      	asrs	r3, r2, #31
 800152e:	1ac9      	subs	r1, r1, r3
 8001530:	460b      	mov	r3, r1
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	1ad1      	subs	r1, r2, r3
 8001538:	b2c9      	uxtb	r1, r1
 800153a:	4a38      	ldr	r2, [pc, #224]	; (800161c <ILI9341_MinecraftInit+0x174>)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4413      	add	r3, r2
 8001540:	460a      	mov	r2, r1
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	e004      	b.n	8001550 <ILI9341_MinecraftInit+0xa8>
                }
                else {
                    map[i] = 4 | 0;
 8001546:	4a35      	ldr	r2, [pc, #212]	; (800161c <ILI9341_MinecraftInit+0x174>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4413      	add	r3, r2
 800154c:	2204      	movs	r2, #4
 800154e:	701a      	strb	r2, [r3, #0]
                }

                if ((double)rand() / RAND_MAX > sqrt(sqrt(yd * yd + zd * zd)) - 0.8)
 8001550:	f004 fda8 	bl	80060a4 <rand>
 8001554:	4603      	mov	r3, r0
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ffdc 	bl	8000514 <__aeabi_i2d>
 800155c:	a32a      	add	r3, pc, #168	; (adr r3, 8001608 <ILI9341_MinecraftInit+0x160>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7ff f96b 	bl	800083c <__aeabi_ddiv>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4614      	mov	r4, r2
 800156c:	461d      	mov	r5, r3
 800156e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001572:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001576:	edd7 7a00 	vldr	s15, [r7]
 800157a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800157e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001582:	ee17 0a90 	vmov	r0, s15
 8001586:	f7fe ffd7 	bl	8000538 <__aeabi_f2d>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	ec43 2b10 	vmov	d0, r2, r3
 8001592:	f005 fd6d 	bl	8007070 <sqrt>
 8001596:	eeb0 7a40 	vmov.f32	s14, s0
 800159a:	eef0 7a60 	vmov.f32	s15, s1
 800159e:	eeb0 0a47 	vmov.f32	s0, s14
 80015a2:	eef0 0a67 	vmov.f32	s1, s15
 80015a6:	f005 fd63 	bl	8007070 <sqrt>
 80015aa:	ec51 0b10 	vmov	r0, r1, d0
 80015ae:	a318      	add	r3, pc, #96	; (adr r3, 8001610 <ILI9341_MinecraftInit+0x168>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7fe fe60 	bl	8000278 <__aeabi_dsub>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4620      	mov	r0, r4
 80015be:	4629      	mov	r1, r5
 80015c0:	f7ff faa2 	bl	8000b08 <__aeabi_dcmpgt>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <ILI9341_MinecraftInit+0x12c>
                    map[i] = 0;
 80015ca:	4a14      	ldr	r2, [pc, #80]	; (800161c <ILI9341_MinecraftInit+0x174>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4413      	add	r3, r2
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
            for ( char z = 0; z < 16; z++) {
 80015d4:	7b7b      	ldrb	r3, [r7, #13]
 80015d6:	3301      	adds	r3, #1
 80015d8:	737b      	strb	r3, [r7, #13]
 80015da:	7b7b      	ldrb	r3, [r7, #13]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	f67f af6f 	bls.w	80014c0 <ILI9341_MinecraftInit+0x18>
        for ( char y = 0; y < 16; y++) {
 80015e2:	7bbb      	ldrb	r3, [r7, #14]
 80015e4:	3301      	adds	r3, #1
 80015e6:	73bb      	strb	r3, [r7, #14]
 80015e8:	7bbb      	ldrb	r3, [r7, #14]
 80015ea:	2b0f      	cmp	r3, #15
 80015ec:	f67f af65 	bls.w	80014ba <ILI9341_MinecraftInit+0x12>
    for ( char x = 0; x < 16; x++) {
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	3301      	adds	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	f67f af5b 	bls.w	80014b4 <ILI9341_MinecraftInit+0xc>
            }
        }
    }
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bdb0      	pop	{r4, r5, r7, pc}
 8001608:	ffc00000 	.word	0xffc00000
 800160c:	41dfffff 	.word	0x41dfffff
 8001610:	9999999a 	.word	0x9999999a
 8001614:	3fe99999 	.word	0x3fe99999
 8001618:	66666667 	.word	0x66666667
 800161c:	20000094 	.word	0x20000094
 8001620:	9999999a 	.word	0x9999999a
 8001624:	3fc99999 	.word	0x3fc99999

08001628 <mpu9250_read_reg>:

      HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);

}

void mpu9250_read_reg(int8_t reg, int8_t *data, int8_t len){
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	4613      	mov	r3, r2
 8001636:	71bb      	strb	r3, [r7, #6]

      uint8_t temp_data = 0x80|reg;
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800163e:	b25b      	sxtb	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	73fb      	strb	r3, [r7, #15]

      HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	2104      	movs	r1, #4
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <mpu9250_read_reg+0x58>)
 800164a:	f001 fda9 	bl	80031a0 <HAL_GPIO_WritePin>

      HAL_SPI_Transmit(&GYRO_SPI_PORT, &temp_data , 1, 100);
 800164e:	f107 010f 	add.w	r1, r7, #15
 8001652:	2364      	movs	r3, #100	; 0x64
 8001654:	2201      	movs	r2, #1
 8001656:	480b      	ldr	r0, [pc, #44]	; (8001684 <mpu9250_read_reg+0x5c>)
 8001658:	f003 f97d 	bl	8004956 <HAL_SPI_Transmit>

      HAL_SPI_Receive(&GYRO_SPI_PORT, data, len, 100);
 800165c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001660:	b29a      	uxth	r2, r3
 8001662:	2364      	movs	r3, #100	; 0x64
 8001664:	6839      	ldr	r1, [r7, #0]
 8001666:	4807      	ldr	r0, [pc, #28]	; (8001684 <mpu9250_read_reg+0x5c>)
 8001668:	f003 faea 	bl	8004c40 <HAL_SPI_Receive>

      HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	2104      	movs	r1, #4
 8001670:	4803      	ldr	r0, [pc, #12]	; (8001680 <mpu9250_read_reg+0x58>)
 8001672:	f001 fd95 	bl	80031a0 <HAL_GPIO_WritePin>

}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	48000c00 	.word	0x48000c00
 8001684:	20001178 	.word	0x20001178

08001688 <readGyro>:

void readGyro(){
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 800168c:	220e      	movs	r2, #14
 800168e:	4943      	ldr	r1, [pc, #268]	; (800179c <readGyro+0x114>)
 8001690:	203b      	movs	r0, #59	; 0x3b
 8001692:	f7ff ffc9 	bl	8001628 <mpu9250_read_reg>

	  // Split the values up

	  gyro_x_change = (((int16_t)imu_data[8]<<8) + imu_data[9])   + 975;
 8001696:	4b41      	ldr	r3, [pc, #260]	; (800179c <readGyro+0x114>)
 8001698:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800169c:	b29b      	uxth	r3, r3
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	4b3e      	ldr	r3, [pc, #248]	; (800179c <readGyro+0x114>)
 80016a4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4413      	add	r3, r2
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	f203 33cf 	addw	r3, r3, #975	; 0x3cf
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <readGyro+0x118>)
 80016b8:	801a      	strh	r2, [r3, #0]

	  gyro_y_change = (((int16_t)imu_data[10]<<8) + imu_data[11]) + 513;
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <readGyro+0x114>)
 80016bc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b35      	ldr	r3, [pc, #212]	; (800179c <readGyro+0x114>)
 80016c8:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	f203 2301 	addw	r3, r3, #513	; 0x201
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b21a      	sxth	r2, r3
 80016da:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <readGyro+0x11c>)
 80016dc:	801a      	strh	r2, [r3, #0]

	  gyro_z_change = (((int16_t)imu_data[12]<<8) + imu_data[13]) + 130;
 80016de:	4b2f      	ldr	r3, [pc, #188]	; (800179c <readGyro+0x114>)
 80016e0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <readGyro+0x114>)
 80016ec:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4413      	add	r3, r2
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	3382      	adds	r3, #130	; 0x82
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <readGyro+0x120>)
 80016fe:	801a      	strh	r2, [r3, #0]


	  if (-300 >= gyro_x_change || gyro_x_change >= 300)
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <readGyro+0x118>)
 8001702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001706:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 800170a:	dd05      	ble.n	8001718 <readGyro+0x90>
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <readGyro+0x118>)
 800170e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001712:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001716:	db0c      	blt.n	8001732 <readGyro+0xaa>
		  gyro_x += gyro_x_change;
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <readGyro+0x124>)
 800171a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171e:	b29a      	uxth	r2, r3
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <readGyro+0x118>)
 8001722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001726:	b29b      	uxth	r3, r3
 8001728:	4413      	add	r3, r2
 800172a:	b29b      	uxth	r3, r3
 800172c:	b21a      	sxth	r2, r3
 800172e:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <readGyro+0x124>)
 8001730:	801a      	strh	r2, [r3, #0]

	  if (-300 >= gyro_y_change || gyro_y_change >= 300)
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <readGyro+0x11c>)
 8001734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001738:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 800173c:	dd05      	ble.n	800174a <readGyro+0xc2>
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <readGyro+0x11c>)
 8001740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001744:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001748:	db0c      	blt.n	8001764 <readGyro+0xdc>
	      gyro_y += gyro_y_change;
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <readGyro+0x128>)
 800174c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001750:	b29a      	uxth	r2, r3
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <readGyro+0x11c>)
 8001754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001758:	b29b      	uxth	r3, r3
 800175a:	4413      	add	r3, r2
 800175c:	b29b      	uxth	r3, r3
 800175e:	b21a      	sxth	r2, r3
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <readGyro+0x128>)
 8001762:	801a      	strh	r2, [r3, #0]

	  if (-300 >= gyro_z_change || gyro_z_change >= 300)
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <readGyro+0x120>)
 8001766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176a:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 800176e:	dd05      	ble.n	800177c <readGyro+0xf4>
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <readGyro+0x120>)
 8001772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001776:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800177a:	db0c      	blt.n	8001796 <readGyro+0x10e>
		  gyro_z += gyro_z_change;
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <readGyro+0x12c>)
 800177e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001782:	b29a      	uxth	r2, r3
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <readGyro+0x120>)
 8001786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178a:	b29b      	uxth	r3, r3
 800178c:	4413      	add	r3, r2
 800178e:	b29b      	uxth	r3, r3
 8001790:	b21a      	sxth	r2, r3
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <readGyro+0x12c>)
 8001794:	801a      	strh	r2, [r3, #0]
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200010a0 	.word	0x200010a0
 80017a0:	20001094 	.word	0x20001094
 80017a4:	20001096 	.word	0x20001096
 80017a8:	20001098 	.word	0x20001098
 80017ac:	2000109a 	.word	0x2000109a
 80017b0:	2000109c 	.word	0x2000109c
 80017b4:	2000109e 	.word	0x2000109e

080017b8 <ILI9341_renderMinecraft>:

void ILI9341_renderMinecraft(float oy) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0bc      	sub	sp, #240	; 0xf0
 80017bc:	af00      	add	r7, sp, #0
 80017be:	ed87 0a01 	vstr	s0, [r7, #4]

    ILI9341_Select();
 80017c2:	f7ff fbb7 	bl	8000f34 <ILI9341_Select>
    ILI9341_SetAddressWindow(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT);
 80017c6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80017ca:	22f0      	movs	r2, #240	; 0xf0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7ff fc76 	bl	80010c0 <ILI9341_SetAddressWindow>
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port_1, ILI9341_DC_Pin_1, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	2140      	movs	r1, #64	; 0x40
 80017d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017dc:	f001 fce0 	bl	80031a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port_2, ILI9341_DC_Pin_2, GPIO_PIN_SET);
 80017e0:	2201      	movs	r2, #1
 80017e2:	2104      	movs	r1, #4
 80017e4:	488a      	ldr	r0, [pc, #552]	; (8001a10 <ILI9341_renderMinecraft+0x258>)
 80017e6:	f001 fcdb 	bl	80031a0 <HAL_GPIO_WritePin>

    float xRot = 1.5;// + ((float)gyro_x / 100000);
 80017ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80017ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float yRot = 0.0;// + ((float)gyro_y / 100000);
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    float ox1 = 14.5;
 80017fa:	4b86      	ldr	r3, [pc, #536]	; (8001a14 <ILI9341_renderMinecraft+0x25c>)
 80017fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    float oy1 = oy;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float oz1 = 14.5;
 8001806:	4b83      	ldr	r3, [pc, #524]	; (8001a14 <ILI9341_renderMinecraft+0x25c>)
 8001808:	67fb      	str	r3, [r7, #124]	; 0x7c

    float ox2 = 14.5;
 800180a:	4b82      	ldr	r3, [pc, #520]	; (8001a14 <ILI9341_renderMinecraft+0x25c>)
 800180c:	67bb      	str	r3, [r7, #120]	; 0x78
    float oy2 = oy;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	677b      	str	r3, [r7, #116]	; 0x74
    float oz2 = 14.0;
 8001812:	4b81      	ldr	r3, [pc, #516]	; (8001a18 <ILI9341_renderMinecraft+0x260>)
 8001814:	673b      	str	r3, [r7, #112]	; 0x70

    float yCos = cos(yRot);
 8001816:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800181a:	f7fe fe8d 	bl	8000538 <__aeabi_f2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	ec43 2b10 	vmov	d0, r2, r3
 8001826:	f005 fc4f 	bl	80070c8 <cos>
 800182a:	ec53 2b10 	vmov	r2, r3, d0
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f7ff f9b1 	bl	8000b98 <__aeabi_d2f>
 8001836:	4603      	mov	r3, r0
 8001838:	66fb      	str	r3, [r7, #108]	; 0x6c
    float ySin = sin(yRot);
 800183a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800183e:	f7fe fe7b 	bl	8000538 <__aeabi_f2d>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	ec43 2b10 	vmov	d0, r2, r3
 800184a:	f005 fc91 	bl	8007170 <sin>
 800184e:	ec53 2b10 	vmov	r2, r3, d0
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f7ff f99f 	bl	8000b98 <__aeabi_d2f>
 800185a:	4603      	mov	r3, r0
 800185c:	66bb      	str	r3, [r7, #104]	; 0x68
    float xCos = cos(xRot);
 800185e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001862:	f7fe fe69 	bl	8000538 <__aeabi_f2d>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	ec43 2b10 	vmov	d0, r2, r3
 800186e:	f005 fc2b 	bl	80070c8 <cos>
 8001872:	ec53 2b10 	vmov	r2, r3, d0
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f98d 	bl	8000b98 <__aeabi_d2f>
 800187e:	4603      	mov	r3, r0
 8001880:	667b      	str	r3, [r7, #100]	; 0x64
    float xSin = sin(xRot);
 8001882:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001886:	f7fe fe57 	bl	8000538 <__aeabi_f2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	ec43 2b10 	vmov	d0, r2, r3
 8001892:	f005 fc6d 	bl	8007170 <sin>
 8001896:	ec53 2b10 	vmov	r2, r3, d0
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	f7ff f97b 	bl	8000b98 <__aeabi_d2f>
 80018a2:	4603      	mov	r3, r0
 80018a4:	663b      	str	r3, [r7, #96]	; 0x60

    for (int y = 0; y < ILI9341_HEIGHT; y++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80018ac:	f000 bccd 	b.w	800224a <ILI9341_renderMinecraft+0xa92>
        float ___yd = (y - ILI9341_HEIGHT / 2) / (float)ILI9341_WIDTH;
 80018b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80018b4:	3ba0      	subs	r3, #160	; 0xa0
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018be:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001a1c <ILI9341_renderMinecraft+0x264>
 80018c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

        if(!(y/10))
 80018ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80018ce:	3309      	adds	r3, #9
 80018d0:	2b12      	cmp	r3, #18
 80018d2:	d801      	bhi.n	80018d8 <ILI9341_renderMinecraft+0x120>
        	readGyro();
 80018d4:	f7ff fed8 	bl	8001688 <readGyro>

        for (int x = 0; x < ILI9341_WIDTH; x++) {
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80018de:	f000 bcaa 	b.w	8002236 <ILI9341_renderMinecraft+0xa7e>
            float __xd = (x - ILI9341_WIDTH / 2) / (float)ILI9341_WIDTH;
 80018e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80018e6:	3b78      	subs	r3, #120	; 0x78
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f0:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001a1c <ILI9341_renderMinecraft+0x264>
 80018f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            float __zd = 1;
 80018fc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001900:	657b      	str	r3, [r7, #84]	; 0x54

            float ___xd = __xd * yCos + ___yd * ySin;
 8001902:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001906:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800190a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001912:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800191a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
            float _xd = ___yd * yCos - __xd * ySin;
 8001922:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001926:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800192a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800192e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001932:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800193a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

            float _yd = ___xd * xCos + __zd * xSin;
 8001942:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001946:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800194a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800194e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001952:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
            float _zd = __zd * xCos - ___xd * xSin;
 8001962:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001966:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800196a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800196e:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001972:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

            int col1 = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            int br1 = 255;
 8001988:	23ff      	movs	r3, #255	; 0xff
 800198a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            int ddist1 = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

            int col2 = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            int br2 = 255;
 800199a:	23ff      	movs	r3, #255	; 0xff
 800199c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            int ddist2 = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

            float closest1 = 32;
 80019a6:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
 80019aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            float closest2 = 32;
 80019ae:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
 80019b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

            for (float d = 0; d < 3; d++) {
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80019be:	e33f      	b.n	8002040 <ILI9341_renderMinecraft+0x888>
                float dimLength = _yd;
 80019c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                if (d == 1)
 80019c6:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80019ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019ce:	eef4 7a47 	vcmp.f32	s15, s14
 80019d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d6:	d102      	bne.n	80019de <ILI9341_renderMinecraft+0x226>
                    dimLength = _xd;
 80019d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                if (d == 2)
 80019de:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80019e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80019e6:	eef4 7a47 	vcmp.f32	s15, s14
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	d102      	bne.n	80019f6 <ILI9341_renderMinecraft+0x23e>
                    dimLength = _zd;
 80019f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

                float ll = 1 / (dimLength < 0 ? -dimLength : dimLength);
 80019f6:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80019fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	d50d      	bpl.n	8001a20 <ILI9341_renderMinecraft+0x268>
 8001a04:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001a08:	eef1 7a67 	vneg.f32	s15, s15
 8001a0c:	e00a      	b.n	8001a24 <ILI9341_renderMinecraft+0x26c>
 8001a0e:	bf00      	nop
 8001a10:	48000800 	.word	0x48000800
 8001a14:	41680000 	.word	0x41680000
 8001a18:	41600000 	.word	0x41600000
 8001a1c:	43700000 	.word	0x43700000
 8001a20:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001a24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a2c:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
                float xd = (_yd) * ll;
 8001a30:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001a34:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                float yd = (_xd) * ll;
 8001a40:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a44:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                float zd = (_zd) * ll;
 8001a50:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001a54:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a5c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

                float initial1 = oy1 - (int)oy1;
 8001a60:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a74:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
                float initial2 = oy2 - (int)oy2;
 8001a78:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001a7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a84:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a8c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
                if (d == 1) {
 8001a90:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001a94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a98:	eef4 7a47 	vcmp.f32	s15, s14
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	d117      	bne.n	8001ad2 <ILI9341_renderMinecraft+0x31a>
                    initial1 = ox1 - (int)ox1;
 8001aa2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aae:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab6:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
                	initial2 = ox2 - (int)ox2;
 8001aba:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ace:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
                }
                if (d == 2) {
 8001ad2:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001ad6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001ada:	eef4 7a47 	vcmp.f32	s15, s14
 8001ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae2:	d117      	bne.n	8001b14 <ILI9341_renderMinecraft+0x35c>
                    initial1 = oz1 - (int)oz1;
 8001ae4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af8:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
                	initial2 = oz2 - (int)oz2;
 8001afc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001b00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b08:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b10:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
                }
                if (dimLength > 0) {
 8001b14:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001b18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b20:	dd0f      	ble.n	8001b42 <ILI9341_renderMinecraft+0x38a>
                    initial1 = 1 - initial1;
 8001b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b26:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2e:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
                    initial2 = 1 - initial2;
 8001b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b36:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
                }

                float dist1 = ll * initial1;
 8001b42:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001b46:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
                float dist2 = ll * initial2;
 8001b52:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001b56:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

                float xp1 = oy1 + xd * initial1;
 8001b62:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001b66:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b76:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
                float xp2 = oy2 + xd * initial2;
 8001b7a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001b7e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b86:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
                float yp1 = ox1 + yd * initial1;
 8001b92:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001b96:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9e:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
                float yp2 = ox2 + yd * initial2;
 8001baa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001bae:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbe:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
                float zp1 = oz1 + zd * initial1;
 8001bc2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001bc6:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bce:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
                float zp2 = oz2 + zd * initial2;
 8001bda:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001bde:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bee:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

                if (dimLength < 0) {
 8001bf2:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001bf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfe:	d549      	bpl.n	8001c94 <ILI9341_renderMinecraft+0x4dc>
                    if (d == 0) {
 8001c00:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001c04:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0c:	d10f      	bne.n	8001c2e <ILI9341_renderMinecraft+0x476>
                        yp1--;
 8001c0e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c1a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
                        yp2--;
 8001c1e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001c22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c2a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
                    }
                    if (d == 1) {
 8001c2e:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c36:	eef4 7a47 	vcmp.f32	s15, s14
 8001c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3e:	d10f      	bne.n	8001c60 <ILI9341_renderMinecraft+0x4a8>
                        xp1--;
 8001c40:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001c44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c4c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
                        xp2--;
 8001c50:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001c54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c5c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
                    }
                    if (d == 2) {
 8001c60:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001c64:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001c68:	eef4 7a47 	vcmp.f32	s15, s14
 8001c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c70:	f040 80e9 	bne.w	8001e46 <ILI9341_renderMinecraft+0x68e>
                        zp1--;
 8001c74:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c80:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
                        zp2--;
 8001c84:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001c88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c90:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
                    }
                }

                while (dist1 < closest1) {
 8001c94:	e0d7      	b.n	8001e46 <ILI9341_renderMinecraft+0x68e>
                    int tex = map[((int)zp1 & 15) * 16 * 16 | ((int)yp1 & 15) * 16 | ((int)xp1 & 15)];
 8001c96:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c9e:	ee17 3a90 	vmov	r3, s15
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	021a      	lsls	r2, r3, #8
 8001ca8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001cac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cb0:	ee17 3a90 	vmov	r3, s15
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001cc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc4:	ee17 3a90 	vmov	r3, s15
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	4aa1      	ldr	r2, [pc, #644]	; (8001f54 <ILI9341_renderMinecraft+0x79c>)
 8001cd0:	5cd3      	ldrb	r3, [r2, r3]
 8001cd2:	61bb      	str	r3, [r7, #24]

                    if (tex > 0) {
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f340 8095 	ble.w	8001e06 <ILI9341_renderMinecraft+0x64e>
                        int u = ((int)(xp1 + zp1) * 16) & 15;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
                        int v = ((int)(yp1 * 16) & 15) + 16;
 8001ce0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ce4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf0:	ee17 3a90 	vmov	r3, s15
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	3310      	adds	r3, #16
 8001cfa:	613b      	str	r3, [r7, #16]
                        if (d == 1) {
 8001cfc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001d00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d04:	eef4 7a47 	vcmp.f32	s15, s14
 8001d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0c:	d123      	bne.n	8001d56 <ILI9341_renderMinecraft+0x59e>
                            u = ((int)(xp1 * 16) & 15);
 8001d0e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001d12:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d1e:	ee17 3a90 	vmov	r3, s15
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	617b      	str	r3, [r7, #20]
                            v = ((int)(zp1 * 16) & 15);
 8001d28:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001d2c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d38:	ee17 3a90 	vmov	r3, s15
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	613b      	str	r3, [r7, #16]
                            if (xd < 0)
 8001d42:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d502      	bpl.n	8001d56 <ILI9341_renderMinecraft+0x59e>
                                u += 32;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3320      	adds	r3, #32
 8001d54:	617b      	str	r3, [r7, #20]
                        }

                        unsigned int cc;

                        switch(tex) {
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d013      	beq.n	8001d84 <ILI9341_renderMinecraft+0x5cc>
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	dc15      	bgt.n	8001d8e <ILI9341_renderMinecraft+0x5d6>
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d003      	beq.n	8001d70 <ILI9341_renderMinecraft+0x5b8>
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d005      	beq.n	8001d7a <ILI9341_renderMinecraft+0x5c2>
 8001d6e:	e00e      	b.n	8001d8e <ILI9341_renderMinecraft+0x5d6>
                        case 2: cc = cc = 0xFFFFFF00; break;
 8001d70:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8001d74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d78:	e00d      	b.n	8001d96 <ILI9341_renderMinecraft+0x5de>
                        case 3: cc = cc = 0xFFFF00FF; break;
 8001d7a:	f46f 437f 	mvn.w	r3, #65280	; 0xff00
 8001d7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d82:	e008      	b.n	8001d96 <ILI9341_renderMinecraft+0x5de>
                        case 4: cc = cc = 0xFF00FFFF; break;
 8001d84:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001d88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d8c:	e003      	b.n	8001d96 <ILI9341_renderMinecraft+0x5de>
                        default: cc = 0xFFFFFFFF;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                        case 3: cc = cc = 0x0000FF00; break;
                        case 4: cc = cc = 0x00FF0000; break;
                        default: cc = 0xFFFFFFFF;
                        }*/

                        if (cc > 0) {
 8001d96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d033      	beq.n	8001e06 <ILI9341_renderMinecraft+0x64e>
                            col1 = cc;
 8001d9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001da2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                            ddist1 = 255 - (int)((dist1 / 32 * 255));
 8001da6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001daa:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001f5c <ILI9341_renderMinecraft+0x7a4>
 8001dae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001f60 <ILI9341_renderMinecraft+0x7a8>
 8001db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dbe:	ee17 3a90 	vmov	r3, s15
 8001dc2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                            br1 = 255 * (255 - ((int)(d + 2) % 3) * 50) / 255;
 8001dca:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001dce:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001dd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dda:	ee17 1a90 	vmov	r1, s15
 8001dde:	4b5e      	ldr	r3, [pc, #376]	; (8001f58 <ILI9341_renderMinecraft+0x7a0>)
 8001de0:	fb83 3201 	smull	r3, r2, r3, r1
 8001de4:	17cb      	asrs	r3, r1, #31
 8001de6:	1ad2      	subs	r2, r2, r3
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	1aca      	subs	r2, r1, r3
 8001df0:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001df4:	fb02 f303 	mul.w	r3, r2, r3
 8001df8:	33ff      	adds	r3, #255	; 0xff
 8001dfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
                            closest1 = dist1;
 8001dfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                        }
                    }
                    xp1 += xd;
 8001e06:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001e0a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e12:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
                    yp1 += yd;
 8001e16:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8001e1a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e22:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
                    zp1 += zd;
 8001e26:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8001e2a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e32:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
                    dist1 += ll;
 8001e36:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001e3a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e42:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
                while (dist1 < closest1) {
 8001e46:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001e4a:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e56:	f53f af1e 	bmi.w	8001c96 <ILI9341_renderMinecraft+0x4de>
                }

                while (dist2 < closest2) {
 8001e5a:	e0df      	b.n	800201c <ILI9341_renderMinecraft+0x864>
                    int tex = map[((int)zp2 & 15) * 16 * 16 | ((int)yp2 & 15) * 16 | ((int)xp2 & 15)];
 8001e5c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e64:	ee17 3a90 	vmov	r3, s15
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	021a      	lsls	r2, r3, #8
 8001e6e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e76:	ee17 3a90 	vmov	r3, s15
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	431a      	orrs	r2, r3
 8001e82:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e8a:	ee17 3a90 	vmov	r3, s15
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	4313      	orrs	r3, r2
 8001e94:	4a2f      	ldr	r2, [pc, #188]	; (8001f54 <ILI9341_renderMinecraft+0x79c>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24

                    if (tex > 0) {
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f340 809d 	ble.w	8001fdc <ILI9341_renderMinecraft+0x824>
                        int u = ((int)(xp2 + zp2) * 16) & 15;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
                        int v = ((int)(yp2 * 16) & 15) + 16;
 8001ea6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001eaa:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eb6:	ee17 3a90 	vmov	r3, s15
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	3310      	adds	r3, #16
 8001ec0:	61fb      	str	r3, [r7, #28]
                        if (d == 1) {
 8001ec2:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001eca:	eef4 7a47 	vcmp.f32	s15, s14
 8001ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed2:	d123      	bne.n	8001f1c <ILI9341_renderMinecraft+0x764>
                            u = ((int)(xp2 * 16) & 15);
 8001ed4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001ed8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001edc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee4:	ee17 3a90 	vmov	r3, s15
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	623b      	str	r3, [r7, #32]
                            v = ((int)(zp2 * 16) & 15);
 8001eee:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001ef2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001efa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001efe:	ee17 3a90 	vmov	r3, s15
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	61fb      	str	r3, [r7, #28]
                            if (xd < 0)
 8001f08:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f14:	d502      	bpl.n	8001f1c <ILI9341_renderMinecraft+0x764>
                                u += 32;
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	3320      	adds	r3, #32
 8001f1a:	623b      	str	r3, [r7, #32]
                        }

                        unsigned int cc;

                        switch(tex) {
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d013      	beq.n	8001f4a <ILI9341_renderMinecraft+0x792>
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	dc1d      	bgt.n	8001f64 <ILI9341_renderMinecraft+0x7ac>
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d003      	beq.n	8001f36 <ILI9341_renderMinecraft+0x77e>
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d005      	beq.n	8001f40 <ILI9341_renderMinecraft+0x788>
 8001f34:	e016      	b.n	8001f64 <ILI9341_renderMinecraft+0x7ac>
                        case 2: cc = cc = 0xFFFFFF00; break;
 8001f36:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8001f3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f3e:	e015      	b.n	8001f6c <ILI9341_renderMinecraft+0x7b4>
                        case 3: cc = cc = 0xFFFF00FF; break;
 8001f40:	f46f 437f 	mvn.w	r3, #65280	; 0xff00
 8001f44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f48:	e010      	b.n	8001f6c <ILI9341_renderMinecraft+0x7b4>
                        case 4: cc = cc = 0xFF00FFFF; break;
 8001f4a:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001f4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f52:	e00b      	b.n	8001f6c <ILI9341_renderMinecraft+0x7b4>
 8001f54:	20000094 	.word	0x20000094
 8001f58:	55555556 	.word	0x55555556
 8001f5c:	42000000 	.word	0x42000000
 8001f60:	437f0000 	.word	0x437f0000
                        default: cc = 0xFFFFFFFF;
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295
 8001f68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        case 3: cc = cc = 0x0000FF00; break;
                        case 4: cc = cc = 0x00FF0000; break;
                        default: cc = 0xFFFFFFFF;
                        }*/

                        if (cc > 0) {
 8001f6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d033      	beq.n	8001fdc <ILI9341_renderMinecraft+0x824>
                            col2 = cc;
 8001f74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                            ddist2 = 255 - (int)((dist2 / 32 * 255));
 8001f7c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001f80:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 8001f5c <ILI9341_renderMinecraft+0x7a4>
 8001f84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f88:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8001f60 <ILI9341_renderMinecraft+0x7a8>
 8001f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f94:	ee17 3a90 	vmov	r3, s15
 8001f98:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                            br2 = 255 * (255 - ((int)(d + 2) % 3) * 50) / 255;
 8001fa0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001fa4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001fa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb0:	ee17 1a90 	vmov	r1, s15
 8001fb4:	4bab      	ldr	r3, [pc, #684]	; (8002264 <ILI9341_renderMinecraft+0xaac>)
 8001fb6:	fb83 3201 	smull	r3, r2, r3, r1
 8001fba:	17cb      	asrs	r3, r1, #31
 8001fbc:	1ad2      	subs	r2, r2, r3
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	1aca      	subs	r2, r1, r3
 8001fc6:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001fca:	fb02 f303 	mul.w	r3, r2, r3
 8001fce:	33ff      	adds	r3, #255	; 0xff
 8001fd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                            closest2 = dist2;
 8001fd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                        }
                    }
                    xp2 += xd;
 8001fdc:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001fe0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
                    yp2 += yd;
 8001fec:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8001ff0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff8:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
                    zp2 += zd;
 8001ffc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002000:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002008:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
                    dist2 += ll;
 800200c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002010:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002018:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
                while (dist2 < closest2) {
 800201c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002020:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8002024:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202c:	f53f af16 	bmi.w	8001e5c <ILI9341_renderMinecraft+0x6a4>
            for (float d = 0; d < 3; d++) {
 8002030:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002034:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002038:	ee77 7a87 	vadd.f32	s15, s15, s14
 800203c:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
 8002040:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002044:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800204c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002050:	f53f acb6 	bmi.w	80019c0 <ILI9341_renderMinecraft+0x208>
                }
            }

            char r1 = ((col1 >> 16) & 0xff) * br1 * ddist1 / (255 * 255);
 8002054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002058:	141b      	asrs	r3, r3, #16
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002060:	fb02 f303 	mul.w	r3, r2, r3
 8002064:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002068:	fb02 f303 	mul.w	r3, r2, r3
 800206c:	4a7e      	ldr	r2, [pc, #504]	; (8002268 <ILI9341_renderMinecraft+0xab0>)
 800206e:	fb82 1203 	smull	r1, r2, r2, r3
 8002072:	441a      	add	r2, r3
 8002074:	13d2      	asrs	r2, r2, #15
 8002076:	17db      	asrs	r3, r3, #31
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
            char g1 = ((col1 >> 8) & 0xff) * br1 * ddist1 / (255 * 255);
 800207e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002082:	121b      	asrs	r3, r3, #8
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	4a74      	ldr	r2, [pc, #464]	; (8002268 <ILI9341_renderMinecraft+0xab0>)
 8002098:	fb82 1203 	smull	r1, r2, r2, r3
 800209c:	441a      	add	r2, r3
 800209e:	13d2      	asrs	r2, r2, #15
 80020a0:	17db      	asrs	r3, r3, #31
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
            char b1 = ((col1) & 0xff) * br1 * ddist1 / (255 * 255);
 80020a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
 80020b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	4a6a      	ldr	r2, [pc, #424]	; (8002268 <ILI9341_renderMinecraft+0xab0>)
 80020c0:	fb82 1203 	smull	r1, r2, r2, r3
 80020c4:	441a      	add	r2, r3
 80020c6:	13d2      	asrs	r2, r2, #15
 80020c8:	17db      	asrs	r3, r3, #31
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

            char r2 = ((col2 >> 16) & 0xff) * br2 * ddist2 / (255 * 255);
 80020d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020d4:	141b      	asrs	r3, r3, #16
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	4a5f      	ldr	r2, [pc, #380]	; (8002268 <ILI9341_renderMinecraft+0xab0>)
 80020ea:	fb82 1203 	smull	r1, r2, r2, r3
 80020ee:	441a      	add	r2, r3
 80020f0:	13d2      	asrs	r2, r2, #15
 80020f2:	17db      	asrs	r3, r3, #31
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            char g2 = ((col2 >> 8) & 0xff) * br2 * ddist2 / (255 * 255);
 80020fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020fe:	121b      	asrs	r3, r3, #8
 8002100:	b2db      	uxtb	r3, r3
 8002102:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	4a55      	ldr	r2, [pc, #340]	; (8002268 <ILI9341_renderMinecraft+0xab0>)
 8002114:	fb82 1203 	smull	r1, r2, r2, r3
 8002118:	441a      	add	r2, r3
 800211a:	13d2      	asrs	r2, r2, #15
 800211c:	17db      	asrs	r3, r3, #31
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            char b2 = ((col2) & 0xff) * br2 * ddist2 / (255 * 255);
 8002124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800212e:	fb02 f303 	mul.w	r3, r2, r3
 8002132:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002136:	fb02 f303 	mul.w	r3, r2, r3
 800213a:	4a4b      	ldr	r2, [pc, #300]	; (8002268 <ILI9341_renderMinecraft+0xab0>)
 800213c:	fb82 1203 	smull	r1, r2, r2, r3
 8002140:	441a      	add	r2, r3
 8002142:	13d2      	asrs	r2, r2, #15
 8002144:	17db      	asrs	r3, r3, #31
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

            unsigned short result1 = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            // Extract and map red component (5 bits)
            result1 |= ((r1 >> 3) & 0x1F) << 11;
 8002150:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002154:	08db      	lsrs	r3, r3, #3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	02db      	lsls	r3, r3, #11
 800215a:	b21a      	sxth	r2, r3
 800215c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8002160:	4313      	orrs	r3, r2
 8002162:	b21b      	sxth	r3, r3
 8002164:	87bb      	strh	r3, [r7, #60]	; 0x3c

            // Extract and map green component (6 bits)
            result1 |= ((g1 >> 2) & 0x3F) << 5;
 8002166:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	b2db      	uxtb	r3, r3
 800216e:	015b      	lsls	r3, r3, #5
 8002170:	b21b      	sxth	r3, r3
 8002172:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002176:	b21a      	sxth	r2, r3
 8002178:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800217c:	4313      	orrs	r3, r2
 800217e:	b21b      	sxth	r3, r3
 8002180:	87bb      	strh	r3, [r7, #60]	; 0x3c

            // Extract and map blue component (5 bits)
            result1 |= (b1 >> 3) & 0x1F;
 8002182:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002186:	08db      	lsrs	r3, r3, #3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	b21b      	sxth	r3, r3
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	b21a      	sxth	r2, r3
 8002192:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8002196:	4313      	orrs	r3, r2
 8002198:	b21b      	sxth	r3, r3
 800219a:	87bb      	strh	r3, [r7, #60]	; 0x3c

            unsigned short result2 = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	877b      	strh	r3, [r7, #58]	; 0x3a
            // Extract and map red component (5 bits)
            result2 |= ((r2 >> 3) & 0x1F) << 11;
 80021a0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80021a4:	08db      	lsrs	r3, r3, #3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	02db      	lsls	r3, r3, #11
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80021b0:	4313      	orrs	r3, r2
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	877b      	strh	r3, [r7, #58]	; 0x3a

            // Extract and map green component (6 bits)
            result2 |= ((g2 >> 2) & 0x3F) << 5;
 80021b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	015b      	lsls	r3, r3, #5
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80021c6:	b21a      	sxth	r2, r3
 80021c8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	877b      	strh	r3, [r7, #58]	; 0x3a

            // Extract and map blue component (5 bits)
            result2 |= (b2 >> 3) & 0x1F;
 80021d2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80021d6:	08db      	lsrs	r3, r3, #3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	b21b      	sxth	r3, r3
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	877b      	strh	r3, [r7, #58]	; 0x3a

            uint8_t data1[] = {(char)((result1 >> 8) & 0xFF), (char)(result1 & 0xFF)};
 80021ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	733b      	strb	r3, [r7, #12]
 80021f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	737b      	strb	r3, [r7, #13]
            uint8_t data2[] = {(char)((result2 >> 8) & 0xFF), (char)(result2 & 0xFF)};
 80021fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	b29b      	uxth	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	723b      	strb	r3, [r7, #8]
 8002206:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002208:	b2db      	uxtb	r3, r3
 800220a:	727b      	strb	r3, [r7, #9]

            HAL_SPI_Transmit(&ILI9341_SPI_PORT_1, data1, sizeof(data1), HAL_MAX_DELAY);
 800220c:	f107 010c 	add.w	r1, r7, #12
 8002210:	f04f 33ff 	mov.w	r3, #4294967295
 8002214:	2202      	movs	r2, #2
 8002216:	4815      	ldr	r0, [pc, #84]	; (800226c <ILI9341_renderMinecraft+0xab4>)
 8002218:	f002 fb9d 	bl	8004956 <HAL_SPI_Transmit>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT_2, data2, sizeof(data2), HAL_MAX_DELAY);
 800221c:	f107 0108 	add.w	r1, r7, #8
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
 8002224:	2202      	movs	r2, #2
 8002226:	4812      	ldr	r0, [pc, #72]	; (8002270 <ILI9341_renderMinecraft+0xab8>)
 8002228:	f002 fb95 	bl	8004956 <HAL_SPI_Transmit>
        for (int x = 0; x < ILI9341_WIDTH; x++) {
 800222c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002230:	3301      	adds	r3, #1
 8002232:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002236:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800223a:	2bef      	cmp	r3, #239	; 0xef
 800223c:	f77f ab51 	ble.w	80018e2 <ILI9341_renderMinecraft+0x12a>
    for (int y = 0; y < ILI9341_HEIGHT; y++) {
 8002240:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002244:	3301      	adds	r3, #1
 8002246:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800224a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800224e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002252:	f6ff ab2d 	blt.w	80018b0 <ILI9341_renderMinecraft+0xf8>
        }
    }

    ILI9341_Unselect();
 8002256:	f7fe fe7f 	bl	8000f58 <ILI9341_Unselect>
}
 800225a:	bf00      	nop
 800225c:	37f0      	adds	r7, #240	; 0xf0
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	55555556 	.word	0x55555556
 8002268:	81018203 	.word	0x81018203
 800226c:	200010b0 	.word	0x200010b0
 8002270:	20001114 	.word	0x20001114

08002274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800227a:	f000 fc61 	bl	8002b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800227e:	f000 f821 	bl	80022c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002282:	f000 f95b 	bl	800253c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002286:	f000 f929 	bl	80024dc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800228a:	f000 f86d 	bl	8002368 <MX_SPI1_Init>
  MX_SPI3_Init();
 800228e:	f000 f8e7 	bl	8002460 <MX_SPI3_Init>
  MX_SPI2_Init();
 8002292:	f000 f8a7 	bl	80023e4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Unselect();
 8002296:	f7fe fe5f 	bl	8000f58 <ILI9341_Unselect>
  ILI9341_Init();
 800229a:	f7fe ff65 	bl	8001168 <ILI9341_Init>

  //ILI9341_FillScreen(ILI9341_BLACK);
  ILI9341_MinecraftInit();
 800229e:	f7ff f903 	bl	80014a8 <ILI9341_MinecraftInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float ox = 16.5;
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <main+0x4c>)
 80022a4:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ILI9341_renderMinecraft(ox);
 80022a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80022aa:	f7ff fa85 	bl	80017b8 <ILI9341_renderMinecraft>
	  ox += 0.5;
 80022ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80022b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022ba:	edc7 7a01 	vstr	s15, [r7, #4]
	  ILI9341_renderMinecraft(ox);
 80022be:	e7f2      	b.n	80022a6 <main+0x32>
 80022c0:	41840000 	.word	0x41840000

080022c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b096      	sub	sp, #88	; 0x58
 80022c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	2244      	movs	r2, #68	; 0x44
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f004 f829 	bl	800632a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d8:	463b      	mov	r3, r7
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]
 80022e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022ea:	f000 ff7f 	bl	80031ec <HAL_PWREx_ControlVoltageScaling>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80022f4:	f000 f9ae 	bl	8002654 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022f8:	2302      	movs	r3, #2
 80022fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002300:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002302:	2310      	movs	r3, #16
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002306:	2302      	movs	r3, #2
 8002308:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800230a:	2302      	movs	r3, #2
 800230c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800230e:	2301      	movs	r3, #1
 8002310:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002312:	230a      	movs	r3, #10
 8002314:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002316:	2307      	movs	r3, #7
 8002318:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800231a:	2302      	movs	r3, #2
 800231c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800231e:	2302      	movs	r3, #2
 8002320:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	4618      	mov	r0, r3
 8002328:	f000 ffb6 	bl	8003298 <HAL_RCC_OscConfig>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002332:	f000 f98f 	bl	8002654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002336:	230f      	movs	r3, #15
 8002338:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800233a:	2303      	movs	r3, #3
 800233c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800234a:	463b      	mov	r3, r7
 800234c:	2104      	movs	r1, #4
 800234e:	4618      	mov	r0, r3
 8002350:	f001 fb7e 	bl	8003a50 <HAL_RCC_ClockConfig>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800235a:	f000 f97b 	bl	8002654 <Error_Handler>
  }
}
 800235e:	bf00      	nop
 8002360:	3758      	adds	r7, #88	; 0x58
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800236c:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <MX_SPI1_Init+0x74>)
 800236e:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <MX_SPI1_Init+0x78>)
 8002370:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002372:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <MX_SPI1_Init+0x74>)
 8002374:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002378:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <MX_SPI1_Init+0x74>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002380:	4b16      	ldr	r3, [pc, #88]	; (80023dc <MX_SPI1_Init+0x74>)
 8002382:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002386:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <MX_SPI1_Init+0x74>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <MX_SPI1_Init+0x74>)
 8002390:	2200      	movs	r2, #0
 8002392:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <MX_SPI1_Init+0x74>)
 8002396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800239a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <MX_SPI1_Init+0x74>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <MX_SPI1_Init+0x74>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <MX_SPI1_Init+0x74>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <MX_SPI1_Init+0x74>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <MX_SPI1_Init+0x74>)
 80023b6:	2207      	movs	r2, #7
 80023b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <MX_SPI1_Init+0x74>)
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <MX_SPI1_Init+0x74>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_SPI1_Init+0x74>)
 80023c8:	f002 fa22 	bl	8004810 <HAL_SPI_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80023d2:	f000 f93f 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200010b0 	.word	0x200010b0
 80023e0:	40013000 	.word	0x40013000

080023e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80023e8:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <MX_SPI2_Init+0x74>)
 80023ea:	4a1c      	ldr	r2, [pc, #112]	; (800245c <MX_SPI2_Init+0x78>)
 80023ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <MX_SPI2_Init+0x74>)
 80023f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023f6:	4b18      	ldr	r3, [pc, #96]	; (8002458 <MX_SPI2_Init+0x74>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023fc:	4b16      	ldr	r3, [pc, #88]	; (8002458 <MX_SPI2_Init+0x74>)
 80023fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002402:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <MX_SPI2_Init+0x74>)
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <MX_SPI2_Init+0x74>)
 800240c:	2200      	movs	r2, #0
 800240e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <MX_SPI2_Init+0x74>)
 8002412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002416:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <MX_SPI2_Init+0x74>)
 800241a:	2200      	movs	r2, #0
 800241c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <MX_SPI2_Init+0x74>)
 8002420:	2200      	movs	r2, #0
 8002422:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <MX_SPI2_Init+0x74>)
 8002426:	2200      	movs	r2, #0
 8002428:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <MX_SPI2_Init+0x74>)
 800242c:	2200      	movs	r2, #0
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <MX_SPI2_Init+0x74>)
 8002432:	2207      	movs	r2, #7
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <MX_SPI2_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <MX_SPI2_Init+0x74>)
 800243e:	2200      	movs	r2, #0
 8002440:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <MX_SPI2_Init+0x74>)
 8002444:	f002 f9e4 	bl	8004810 <HAL_SPI_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800244e:	f000 f901 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20001114 	.word	0x20001114
 800245c:	40003800 	.word	0x40003800

08002460 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <MX_SPI3_Init+0x74>)
 8002466:	4a1c      	ldr	r2, [pc, #112]	; (80024d8 <MX_SPI3_Init+0x78>)
 8002468:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800246a:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <MX_SPI3_Init+0x74>)
 800246c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002470:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002472:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <MX_SPI3_Init+0x74>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002478:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <MX_SPI3_Init+0x74>)
 800247a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800247e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002480:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <MX_SPI3_Init+0x74>)
 8002482:	2202      	movs	r2, #2
 8002484:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002486:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <MX_SPI3_Init+0x74>)
 8002488:	2201      	movs	r2, #1
 800248a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <MX_SPI3_Init+0x74>)
 800248e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002492:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <MX_SPI3_Init+0x74>)
 8002496:	2220      	movs	r2, #32
 8002498:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <MX_SPI3_Init+0x74>)
 800249c:	2200      	movs	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <MX_SPI3_Init+0x74>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <MX_SPI3_Init+0x74>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <MX_SPI3_Init+0x74>)
 80024ae:	2207      	movs	r2, #7
 80024b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <MX_SPI3_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <MX_SPI3_Init+0x74>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <MX_SPI3_Init+0x74>)
 80024c0:	f002 f9a6 	bl	8004810 <HAL_SPI_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80024ca:	f000 f8c3 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20001178 	.word	0x20001178
 80024d8:	40003c00 	.word	0x40003c00

080024dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <MX_USART2_UART_Init+0x58>)
 80024e2:	4a15      	ldr	r2, [pc, #84]	; (8002538 <MX_USART2_UART_Init+0x5c>)
 80024e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <MX_USART2_UART_Init+0x58>)
 80024e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <MX_USART2_UART_Init+0x58>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <MX_USART2_UART_Init+0x58>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <MX_USART2_UART_Init+0x58>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <MX_USART2_UART_Init+0x58>)
 8002502:	220c      	movs	r2, #12
 8002504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <MX_USART2_UART_Init+0x58>)
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <MX_USART2_UART_Init+0x58>)
 800250e:	2200      	movs	r2, #0
 8002510:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002512:	4b08      	ldr	r3, [pc, #32]	; (8002534 <MX_USART2_UART_Init+0x58>)
 8002514:	2200      	movs	r2, #0
 8002516:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <MX_USART2_UART_Init+0x58>)
 800251a:	2200      	movs	r2, #0
 800251c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800251e:	4805      	ldr	r0, [pc, #20]	; (8002534 <MX_USART2_UART_Init+0x58>)
 8002520:	f003 f8a4 	bl	800566c <HAL_UART_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800252a:	f000 f893 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200011dc 	.word	0x200011dc
 8002538:	40004400 	.word	0x40004400

0800253c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	60da      	str	r2, [r3, #12]
 8002550:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002552:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <MX_GPIO_Init+0x10c>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	4a3c      	ldr	r2, [pc, #240]	; (8002648 <MX_GPIO_Init+0x10c>)
 8002558:	f043 0304 	orr.w	r3, r3, #4
 800255c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255e:	4b3a      	ldr	r3, [pc, #232]	; (8002648 <MX_GPIO_Init+0x10c>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800256a:	4b37      	ldr	r3, [pc, #220]	; (8002648 <MX_GPIO_Init+0x10c>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	4a36      	ldr	r2, [pc, #216]	; (8002648 <MX_GPIO_Init+0x10c>)
 8002570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002576:	4b34      	ldr	r3, [pc, #208]	; (8002648 <MX_GPIO_Init+0x10c>)
 8002578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <MX_GPIO_Init+0x10c>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	4a30      	ldr	r2, [pc, #192]	; (8002648 <MX_GPIO_Init+0x10c>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800258e:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <MX_GPIO_Init+0x10c>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259a:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <MX_GPIO_Init+0x10c>)
 800259c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259e:	4a2a      	ldr	r2, [pc, #168]	; (8002648 <MX_GPIO_Init+0x10c>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025a6:	4b28      	ldr	r3, [pc, #160]	; (8002648 <MX_GPIO_Init+0x10c>)
 80025a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025b2:	4b25      	ldr	r3, [pc, #148]	; (8002648 <MX_GPIO_Init+0x10c>)
 80025b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b6:	4a24      	ldr	r2, [pc, #144]	; (8002648 <MX_GPIO_Init+0x10c>)
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <MX_GPIO_Init+0x10c>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_ChipSelect_Pin|SPI2_Reset_Pin|SPI2_DC_Pin, GPIO_PIN_RESET);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2107      	movs	r1, #7
 80025ce:	481f      	ldr	r0, [pc, #124]	; (800264c <MX_GPIO_Init+0x110>)
 80025d0:	f000 fde6 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Reset_Pin|Chip_Select_Pin|DC_Pin, GPIO_PIN_RESET);
 80025d4:	2200      	movs	r2, #0
 80025d6:	2152      	movs	r1, #82	; 0x52
 80025d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025dc:	f000 fde0 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2104      	movs	r1, #4
 80025e4:	481a      	ldr	r0, [pc, #104]	; (8002650 <MX_GPIO_Init+0x114>)
 80025e6:	f000 fddb 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI2_ChipSelect_Pin SPI2_Reset_Pin SPI2_DC_Pin */
  GPIO_InitStruct.Pin = SPI2_ChipSelect_Pin|SPI2_Reset_Pin|SPI2_DC_Pin;
 80025ea:	2307      	movs	r3, #7
 80025ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ee:	2301      	movs	r3, #1
 80025f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f6:	2300      	movs	r3, #0
 80025f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fa:	f107 0314 	add.w	r3, r7, #20
 80025fe:	4619      	mov	r1, r3
 8002600:	4812      	ldr	r0, [pc, #72]	; (800264c <MX_GPIO_Init+0x110>)
 8002602:	f000 fc23 	bl	8002e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Reset_Pin Chip_Select_Pin DC_Pin */
  GPIO_InitStruct.Pin = Reset_Pin|Chip_Select_Pin|DC_Pin;
 8002606:	2352      	movs	r3, #82	; 0x52
 8002608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260a:	2301      	movs	r3, #1
 800260c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4619      	mov	r1, r3
 800261c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002620:	f000 fc14 	bl	8002e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8002624:	2304      	movs	r3, #4
 8002626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002628:	2301      	movs	r3, #1
 800262a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2300      	movs	r3, #0
 8002632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4619      	mov	r1, r3
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_GPIO_Init+0x114>)
 800263c:	f000 fc06 	bl	8002e4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002640:	bf00      	nop
 8002642:	3728      	adds	r7, #40	; 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	48000800 	.word	0x48000800
 8002650:	48000c00 	.word	0x48000c00

08002654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002658:	b672      	cpsid	i
}
 800265a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800265c:	e7fe      	b.n	800265c <Error_Handler+0x8>
	...

08002660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <HAL_MspInit+0x44>)
 8002668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266a:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <HAL_MspInit+0x44>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6613      	str	r3, [r2, #96]	; 0x60
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <HAL_MspInit+0x44>)
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_MspInit+0x44>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002682:	4a08      	ldr	r2, [pc, #32]	; (80026a4 <HAL_MspInit+0x44>)
 8002684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002688:	6593      	str	r3, [r2, #88]	; 0x58
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_MspInit+0x44>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08e      	sub	sp, #56	; 0x38
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a54      	ldr	r2, [pc, #336]	; (8002818 <HAL_SPI_MspInit+0x170>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d129      	bne.n	800271e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026ca:	4b54      	ldr	r3, [pc, #336]	; (800281c <HAL_SPI_MspInit+0x174>)
 80026cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ce:	4a53      	ldr	r2, [pc, #332]	; (800281c <HAL_SPI_MspInit+0x174>)
 80026d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026d4:	6613      	str	r3, [r2, #96]	; 0x60
 80026d6:	4b51      	ldr	r3, [pc, #324]	; (800281c <HAL_SPI_MspInit+0x174>)
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026de:	623b      	str	r3, [r7, #32]
 80026e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	4b4e      	ldr	r3, [pc, #312]	; (800281c <HAL_SPI_MspInit+0x174>)
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e6:	4a4d      	ldr	r2, [pc, #308]	; (800281c <HAL_SPI_MspInit+0x174>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ee:	4b4b      	ldr	r3, [pc, #300]	; (800281c <HAL_SPI_MspInit+0x174>)
 80026f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80026fa:	23a0      	movs	r3, #160	; 0xa0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002706:	2303      	movs	r3, #3
 8002708:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800270a:	2305      	movs	r3, #5
 800270c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002712:	4619      	mov	r1, r3
 8002714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002718:	f000 fb98 	bl	8002e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800271c:	e078      	b.n	8002810 <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI2)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a3f      	ldr	r2, [pc, #252]	; (8002820 <HAL_SPI_MspInit+0x178>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d145      	bne.n	80027b4 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002728:	4b3c      	ldr	r3, [pc, #240]	; (800281c <HAL_SPI_MspInit+0x174>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	4a3b      	ldr	r2, [pc, #236]	; (800281c <HAL_SPI_MspInit+0x174>)
 800272e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002732:	6593      	str	r3, [r2, #88]	; 0x58
 8002734:	4b39      	ldr	r3, [pc, #228]	; (800281c <HAL_SPI_MspInit+0x174>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002740:	4b36      	ldr	r3, [pc, #216]	; (800281c <HAL_SPI_MspInit+0x174>)
 8002742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002744:	4a35      	ldr	r2, [pc, #212]	; (800281c <HAL_SPI_MspInit+0x174>)
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274c:	4b33      	ldr	r3, [pc, #204]	; (800281c <HAL_SPI_MspInit+0x174>)
 800274e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002758:	4b30      	ldr	r3, [pc, #192]	; (800281c <HAL_SPI_MspInit+0x174>)
 800275a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275c:	4a2f      	ldr	r2, [pc, #188]	; (800281c <HAL_SPI_MspInit+0x174>)
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002764:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_SPI_MspInit+0x174>)
 8002766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002770:	2308      	movs	r3, #8
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277c:	2303      	movs	r3, #3
 800277e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002780:	2305      	movs	r3, #5
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002788:	4619      	mov	r1, r3
 800278a:	4826      	ldr	r0, [pc, #152]	; (8002824 <HAL_SPI_MspInit+0x17c>)
 800278c:	f000 fb5e 	bl	8002e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027a2:	2305      	movs	r3, #5
 80027a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027aa:	4619      	mov	r1, r3
 80027ac:	481e      	ldr	r0, [pc, #120]	; (8002828 <HAL_SPI_MspInit+0x180>)
 80027ae:	f000 fb4d 	bl	8002e4c <HAL_GPIO_Init>
}
 80027b2:	e02d      	b.n	8002810 <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI3)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1c      	ldr	r2, [pc, #112]	; (800282c <HAL_SPI_MspInit+0x184>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d128      	bne.n	8002810 <HAL_SPI_MspInit+0x168>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027be:	4b17      	ldr	r3, [pc, #92]	; (800281c <HAL_SPI_MspInit+0x174>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	4a16      	ldr	r2, [pc, #88]	; (800281c <HAL_SPI_MspInit+0x174>)
 80027c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c8:	6593      	str	r3, [r2, #88]	; 0x58
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <HAL_SPI_MspInit+0x174>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <HAL_SPI_MspInit+0x174>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	4a10      	ldr	r2, [pc, #64]	; (800281c <HAL_SPI_MspInit+0x174>)
 80027dc:	f043 0304 	orr.w	r3, r3, #4
 80027e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_SPI_MspInit+0x174>)
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80027ee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fc:	2303      	movs	r3, #3
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002800:	2306      	movs	r3, #6
 8002802:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002808:	4619      	mov	r1, r3
 800280a:	4806      	ldr	r0, [pc, #24]	; (8002824 <HAL_SPI_MspInit+0x17c>)
 800280c:	f000 fb1e 	bl	8002e4c <HAL_GPIO_Init>
}
 8002810:	bf00      	nop
 8002812:	3738      	adds	r7, #56	; 0x38
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40013000 	.word	0x40013000
 800281c:	40021000 	.word	0x40021000
 8002820:	40003800 	.word	0x40003800
 8002824:	48000800 	.word	0x48000800
 8002828:	48000400 	.word	0x48000400
 800282c:	40003c00 	.word	0x40003c00

08002830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b0ac      	sub	sp, #176	; 0xb0
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	2288      	movs	r2, #136	; 0x88
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f003 fd6a 	bl	800632a <memset>
  if(huart->Instance==USART2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a21      	ldr	r2, [pc, #132]	; (80028e0 <HAL_UART_MspInit+0xb0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d13b      	bne.n	80028d8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002860:	2302      	movs	r3, #2
 8002862:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002864:	2300      	movs	r3, #0
 8002866:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4618      	mov	r0, r3
 800286e:	f001 fb13 	bl	8003e98 <HAL_RCCEx_PeriphCLKConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002878:	f7ff feec 	bl	8002654 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_UART_MspInit+0xb4>)
 800287e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002880:	4a18      	ldr	r2, [pc, #96]	; (80028e4 <HAL_UART_MspInit+0xb4>)
 8002882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002886:	6593      	str	r3, [r2, #88]	; 0x58
 8002888:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <HAL_UART_MspInit+0xb4>)
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_UART_MspInit+0xb4>)
 8002896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002898:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <HAL_UART_MspInit+0xb4>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <HAL_UART_MspInit+0xb4>)
 80028a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028ac:	230c      	movs	r3, #12
 80028ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028be:	2303      	movs	r3, #3
 80028c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028c4:	2307      	movs	r3, #7
 80028c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028ce:	4619      	mov	r1, r3
 80028d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d4:	f000 faba 	bl	8002e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028d8:	bf00      	nop
 80028da:	37b0      	adds	r7, #176	; 0xb0
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40004400 	.word	0x40004400
 80028e4:	40021000 	.word	0x40021000

080028e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028ec:	e7fe      	b.n	80028ec <NMI_Handler+0x4>

080028ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f2:	e7fe      	b.n	80028f2 <HardFault_Handler+0x4>

080028f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f8:	e7fe      	b.n	80028f8 <MemManage_Handler+0x4>

080028fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028fe:	e7fe      	b.n	80028fe <BusFault_Handler+0x4>

08002900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002904:	e7fe      	b.n	8002904 <UsageFault_Handler+0x4>

08002906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002934:	f000 f960 	bl	8002bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}

0800293c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return 1;
 8002940:	2301      	movs	r3, #1
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <_kill>:

int _kill(int pid, int sig)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002956:	f003 fd37 	bl	80063c8 <__errno>
 800295a:	4603      	mov	r3, r0
 800295c:	2216      	movs	r2, #22
 800295e:	601a      	str	r2, [r3, #0]
  return -1;
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <_exit>:

void _exit (int status)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002974:	f04f 31ff 	mov.w	r1, #4294967295
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ffe7 	bl	800294c <_kill>
  while (1) {}    /* Make sure we hang here */
 800297e:	e7fe      	b.n	800297e <_exit+0x12>

08002980 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	e00a      	b.n	80029a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002992:	f3af 8000 	nop.w
 8002996:	4601      	mov	r1, r0
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	60ba      	str	r2, [r7, #8]
 800299e:	b2ca      	uxtb	r2, r1
 80029a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3301      	adds	r3, #1
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	dbf0      	blt.n	8002992 <_read+0x12>
  }

  return len;
 80029b0:	687b      	ldr	r3, [r7, #4]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b086      	sub	sp, #24
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	e009      	b.n	80029e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	60ba      	str	r2, [r7, #8]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	3301      	adds	r3, #1
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	dbf1      	blt.n	80029cc <_write+0x12>
  }
  return len;
 80029e8:	687b      	ldr	r3, [r7, #4]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <_close>:

int _close(int file)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a1a:	605a      	str	r2, [r3, #4]
  return 0;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <_isatty>:

int _isatty(int file)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a32:	2301      	movs	r3, #1
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a64:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <_sbrk+0x5c>)
 8002a66:	4b15      	ldr	r3, [pc, #84]	; (8002abc <_sbrk+0x60>)
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <_sbrk+0x64>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d102      	bne.n	8002a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <_sbrk+0x64>)
 8002a7a:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <_sbrk+0x68>)
 8002a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <_sbrk+0x64>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d207      	bcs.n	8002a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a8c:	f003 fc9c 	bl	80063c8 <__errno>
 8002a90:	4603      	mov	r3, r0
 8002a92:	220c      	movs	r2, #12
 8002a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	e009      	b.n	8002ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <_sbrk+0x64>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <_sbrk+0x64>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <_sbrk+0x64>)
 8002aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aae:	68fb      	ldr	r3, [r7, #12]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20018000 	.word	0x20018000
 8002abc:	00000400 	.word	0x00000400
 8002ac0:	20001264 	.word	0x20001264
 8002ac4:	200013b8 	.word	0x200013b8

08002ac8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <SystemInit+0x20>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <SystemInit+0x20>)
 8002ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002af0:	f7ff ffea 	bl	8002ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002af4:	480c      	ldr	r0, [pc, #48]	; (8002b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8002af6:	490d      	ldr	r1, [pc, #52]	; (8002b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002af8:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <LoopForever+0xe>)
  movs r3, #0
 8002afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002afc:	e002      	b.n	8002b04 <LoopCopyDataInit>

08002afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b02:	3304      	adds	r3, #4

08002b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b08:	d3f9      	bcc.n	8002afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b0c:	4c0a      	ldr	r4, [pc, #40]	; (8002b38 <LoopForever+0x16>)
  movs r3, #0
 8002b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b10:	e001      	b.n	8002b16 <LoopFillZerobss>

08002b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b14:	3204      	adds	r2, #4

08002b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b18:	d3fb      	bcc.n	8002b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b1a:	f003 fc5b 	bl	80063d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b1e:	f7ff fba9 	bl	8002274 <main>

08002b22 <LoopForever>:

LoopForever:
    b LoopForever
 8002b22:	e7fe      	b.n	8002b22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b2c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002b30:	08008708 	.word	0x08008708
  ldr r2, =_sbss
 8002b34:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002b38:	200013b8 	.word	0x200013b8

08002b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b3c:	e7fe      	b.n	8002b3c <ADC1_2_IRQHandler>
	...

08002b40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <HAL_Init+0x3c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <HAL_Init+0x3c>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b56:	2003      	movs	r0, #3
 8002b58:	f000 f944 	bl	8002de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f000 f80f 	bl	8002b80 <HAL_InitTick>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	71fb      	strb	r3, [r7, #7]
 8002b6c:	e001      	b.n	8002b72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b6e:	f7ff fd77 	bl	8002660 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b72:	79fb      	ldrb	r3, [r7, #7]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40022000 	.word	0x40022000

08002b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002b8c:	4b17      	ldr	r3, [pc, #92]	; (8002bec <HAL_InitTick+0x6c>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d023      	beq.n	8002bdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b94:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <HAL_InitTick+0x70>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b14      	ldr	r3, [pc, #80]	; (8002bec <HAL_InitTick+0x6c>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 f941 	bl	8002e32 <HAL_SYSTICK_Config>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b0f      	cmp	r3, #15
 8002bba:	d809      	bhi.n	8002bd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	f000 f919 	bl	8002dfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bc8:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <HAL_InitTick+0x74>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e007      	b.n	8002be0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	e004      	b.n	8002be0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
 8002bda:	e001      	b.n	8002be0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000008 	.word	0x20000008
 8002bf0:	20000000 	.word	0x20000000
 8002bf4:	20000004 	.word	0x20000004

08002bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_IncTick+0x20>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_IncTick+0x24>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <HAL_IncTick+0x24>)
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000008 	.word	0x20000008
 8002c1c:	20001268 	.word	0x20001268

08002c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return uwTick;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_GetTick+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20001268 	.word	0x20001268

08002c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7ff ffee 	bl	8002c20 <HAL_GetTick>
 8002c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d005      	beq.n	8002c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_Delay+0x44>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c5e:	bf00      	nop
 8002c60:	f7ff ffde 	bl	8002c20 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d8f7      	bhi.n	8002c60 <HAL_Delay+0x28>
  {
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000008 	.word	0x20000008

08002c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cb2:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	60d3      	str	r3, [r2, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	f003 0307 	and.w	r3, r3, #7
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	6039      	str	r1, [r7, #0]
 8002cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	db0a      	blt.n	8002d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	490c      	ldr	r1, [pc, #48]	; (8002d30 <__NVIC_SetPriority+0x4c>)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	0112      	lsls	r2, r2, #4
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	440b      	add	r3, r1
 8002d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d0c:	e00a      	b.n	8002d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	4908      	ldr	r1, [pc, #32]	; (8002d34 <__NVIC_SetPriority+0x50>)
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	3b04      	subs	r3, #4
 8002d1c:	0112      	lsls	r2, r2, #4
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	440b      	add	r3, r1
 8002d22:	761a      	strb	r2, [r3, #24]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000e100 	.word	0xe000e100
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	; 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f1c3 0307 	rsb	r3, r3, #7
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	bf28      	it	cs
 8002d56:	2304      	movcs	r3, #4
 8002d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	2b06      	cmp	r3, #6
 8002d60:	d902      	bls.n	8002d68 <NVIC_EncodePriority+0x30>
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3b03      	subs	r3, #3
 8002d66:	e000      	b.n	8002d6a <NVIC_EncodePriority+0x32>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43da      	mvns	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d80:	f04f 31ff 	mov.w	r1, #4294967295
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8a:	43d9      	mvns	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	4313      	orrs	r3, r2
         );
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3724      	adds	r7, #36	; 0x24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002db0:	d301      	bcc.n	8002db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002db2:	2301      	movs	r3, #1
 8002db4:	e00f      	b.n	8002dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <SysTick_Config+0x40>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dbe:	210f      	movs	r1, #15
 8002dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc4:	f7ff ff8e 	bl	8002ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <SysTick_Config+0x40>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dce:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <SysTick_Config+0x40>)
 8002dd0:	2207      	movs	r2, #7
 8002dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	e000e010 	.word	0xe000e010

08002de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff ff47 	bl	8002c80 <__NVIC_SetPriorityGrouping>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b086      	sub	sp, #24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4603      	mov	r3, r0
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e0c:	f7ff ff5c 	bl	8002cc8 <__NVIC_GetPriorityGrouping>
 8002e10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	6978      	ldr	r0, [r7, #20]
 8002e18:	f7ff ff8e 	bl	8002d38 <NVIC_EncodePriority>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff5d 	bl	8002ce4 <__NVIC_SetPriority>
}
 8002e2a:	bf00      	nop
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff ffb0 	bl	8002da0 <SysTick_Config>
 8002e40:	4603      	mov	r3, r0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e5a:	e17f      	b.n	800315c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	2101      	movs	r1, #1
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	fa01 f303 	lsl.w	r3, r1, r3
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8171 	beq.w	8003156 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d005      	beq.n	8002e8c <HAL_GPIO_Init+0x40>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d130      	bne.n	8002eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	2203      	movs	r2, #3
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	f003 0201 	and.w	r2, r3, #1
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d118      	bne.n	8002f2c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f00:	2201      	movs	r2, #1
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	08db      	lsrs	r3, r3, #3
 8002f16:	f003 0201 	and.w	r2, r3, #1
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d017      	beq.n	8002f68 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	2203      	movs	r2, #3
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d123      	bne.n	8002fbc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	08da      	lsrs	r2, r3, #3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3208      	adds	r2, #8
 8002f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	220f      	movs	r2, #15
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	08da      	lsrs	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3208      	adds	r2, #8
 8002fb6:	6939      	ldr	r1, [r7, #16]
 8002fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0203 	and.w	r2, r3, #3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80ac 	beq.w	8003156 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffe:	4b5f      	ldr	r3, [pc, #380]	; (800317c <HAL_GPIO_Init+0x330>)
 8003000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003002:	4a5e      	ldr	r2, [pc, #376]	; (800317c <HAL_GPIO_Init+0x330>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	6613      	str	r3, [r2, #96]	; 0x60
 800300a:	4b5c      	ldr	r3, [pc, #368]	; (800317c <HAL_GPIO_Init+0x330>)
 800300c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003016:	4a5a      	ldr	r2, [pc, #360]	; (8003180 <HAL_GPIO_Init+0x334>)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	089b      	lsrs	r3, r3, #2
 800301c:	3302      	adds	r3, #2
 800301e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003022:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	220f      	movs	r2, #15
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003040:	d025      	beq.n	800308e <HAL_GPIO_Init+0x242>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a4f      	ldr	r2, [pc, #316]	; (8003184 <HAL_GPIO_Init+0x338>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01f      	beq.n	800308a <HAL_GPIO_Init+0x23e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a4e      	ldr	r2, [pc, #312]	; (8003188 <HAL_GPIO_Init+0x33c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d019      	beq.n	8003086 <HAL_GPIO_Init+0x23a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a4d      	ldr	r2, [pc, #308]	; (800318c <HAL_GPIO_Init+0x340>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d013      	beq.n	8003082 <HAL_GPIO_Init+0x236>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a4c      	ldr	r2, [pc, #304]	; (8003190 <HAL_GPIO_Init+0x344>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00d      	beq.n	800307e <HAL_GPIO_Init+0x232>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a4b      	ldr	r2, [pc, #300]	; (8003194 <HAL_GPIO_Init+0x348>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <HAL_GPIO_Init+0x22e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a4a      	ldr	r2, [pc, #296]	; (8003198 <HAL_GPIO_Init+0x34c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_GPIO_Init+0x22a>
 8003072:	2306      	movs	r3, #6
 8003074:	e00c      	b.n	8003090 <HAL_GPIO_Init+0x244>
 8003076:	2307      	movs	r3, #7
 8003078:	e00a      	b.n	8003090 <HAL_GPIO_Init+0x244>
 800307a:	2305      	movs	r3, #5
 800307c:	e008      	b.n	8003090 <HAL_GPIO_Init+0x244>
 800307e:	2304      	movs	r3, #4
 8003080:	e006      	b.n	8003090 <HAL_GPIO_Init+0x244>
 8003082:	2303      	movs	r3, #3
 8003084:	e004      	b.n	8003090 <HAL_GPIO_Init+0x244>
 8003086:	2302      	movs	r3, #2
 8003088:	e002      	b.n	8003090 <HAL_GPIO_Init+0x244>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_GPIO_Init+0x244>
 800308e:	2300      	movs	r3, #0
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	f002 0203 	and.w	r2, r2, #3
 8003096:	0092      	lsls	r2, r2, #2
 8003098:	4093      	lsls	r3, r2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030a0:	4937      	ldr	r1, [pc, #220]	; (8003180 <HAL_GPIO_Init+0x334>)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	3302      	adds	r3, #2
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030ae:	4b3b      	ldr	r3, [pc, #236]	; (800319c <HAL_GPIO_Init+0x350>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4013      	ands	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030d2:	4a32      	ldr	r2, [pc, #200]	; (800319c <HAL_GPIO_Init+0x350>)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030d8:	4b30      	ldr	r3, [pc, #192]	; (800319c <HAL_GPIO_Init+0x350>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030fc:	4a27      	ldr	r2, [pc, #156]	; (800319c <HAL_GPIO_Init+0x350>)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <HAL_GPIO_Init+0x350>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	43db      	mvns	r3, r3
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4013      	ands	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003126:	4a1d      	ldr	r2, [pc, #116]	; (800319c <HAL_GPIO_Init+0x350>)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800312c:	4b1b      	ldr	r3, [pc, #108]	; (800319c <HAL_GPIO_Init+0x350>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	43db      	mvns	r3, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003150:	4a12      	ldr	r2, [pc, #72]	; (800319c <HAL_GPIO_Init+0x350>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	3301      	adds	r3, #1
 800315a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa22 f303 	lsr.w	r3, r2, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	f47f ae78 	bne.w	8002e5c <HAL_GPIO_Init+0x10>
  }
}
 800316c:	bf00      	nop
 800316e:	bf00      	nop
 8003170:	371c      	adds	r7, #28
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	40010000 	.word	0x40010000
 8003184:	48000400 	.word	0x48000400
 8003188:	48000800 	.word	0x48000800
 800318c:	48000c00 	.word	0x48000c00
 8003190:	48001000 	.word	0x48001000
 8003194:	48001400 	.word	0x48001400
 8003198:	48001800 	.word	0x48001800
 800319c:	40010400 	.word	0x40010400

080031a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	807b      	strh	r3, [r7, #2]
 80031ac:	4613      	mov	r3, r2
 80031ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031b0:	787b      	ldrb	r3, [r7, #1]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031b6:	887a      	ldrh	r2, [r7, #2]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031bc:	e002      	b.n	80031c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031be:	887a      	ldrh	r2, [r7, #2]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80031dc:	4618      	mov	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40007000 	.word	0x40007000

080031ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fa:	d130      	bne.n	800325e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80031fc:	4b23      	ldr	r3, [pc, #140]	; (800328c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003208:	d038      	beq.n	800327c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003212:	4a1e      	ldr	r2, [pc, #120]	; (800328c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003214:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003218:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800321a:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2232      	movs	r2, #50	; 0x32
 8003220:	fb02 f303 	mul.w	r3, r2, r3
 8003224:	4a1b      	ldr	r2, [pc, #108]	; (8003294 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	0c9b      	lsrs	r3, r3, #18
 800322c:	3301      	adds	r3, #1
 800322e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003230:	e002      	b.n	8003238 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3b01      	subs	r3, #1
 8003236:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003244:	d102      	bne.n	800324c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f2      	bne.n	8003232 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003258:	d110      	bne.n	800327c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e00f      	b.n	800327e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326a:	d007      	beq.n	800327c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800326c:	4b07      	ldr	r3, [pc, #28]	; (800328c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003274:	4a05      	ldr	r2, [pc, #20]	; (800328c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800327a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40007000 	.word	0x40007000
 8003290:	20000000 	.word	0x20000000
 8003294:	431bde83 	.word	0x431bde83

08003298 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e3ca      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032aa:	4b97      	ldr	r3, [pc, #604]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b4:	4b94      	ldr	r3, [pc, #592]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 80e4 	beq.w	8003494 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <HAL_RCC_OscConfig+0x4a>
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	2b0c      	cmp	r3, #12
 80032d6:	f040 808b 	bne.w	80033f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	f040 8087 	bne.w	80033f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032e2:	4b89      	ldr	r3, [pc, #548]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_RCC_OscConfig+0x62>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e3a2      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1a      	ldr	r2, [r3, #32]
 80032fe:	4b82      	ldr	r3, [pc, #520]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d004      	beq.n	8003314 <HAL_RCC_OscConfig+0x7c>
 800330a:	4b7f      	ldr	r3, [pc, #508]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003312:	e005      	b.n	8003320 <HAL_RCC_OscConfig+0x88>
 8003314:	4b7c      	ldr	r3, [pc, #496]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 8003316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003320:	4293      	cmp	r3, r2
 8003322:	d223      	bcs.n	800336c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fd55 	bl	8003dd8 <RCC_SetFlashLatencyFromMSIRange>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e383      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003338:	4b73      	ldr	r3, [pc, #460]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a72      	ldr	r2, [pc, #456]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 800333e:	f043 0308 	orr.w	r3, r3, #8
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b70      	ldr	r3, [pc, #448]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	496d      	ldr	r1, [pc, #436]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003356:	4b6c      	ldr	r3, [pc, #432]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	4968      	ldr	r1, [pc, #416]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 8003366:	4313      	orrs	r3, r2
 8003368:	604b      	str	r3, [r1, #4]
 800336a:	e025      	b.n	80033b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800336c:	4b66      	ldr	r3, [pc, #408]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a65      	ldr	r2, [pc, #404]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 8003372:	f043 0308 	orr.w	r3, r3, #8
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	4b63      	ldr	r3, [pc, #396]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	4960      	ldr	r1, [pc, #384]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800338a:	4b5f      	ldr	r3, [pc, #380]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	495b      	ldr	r1, [pc, #364]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 800339a:	4313      	orrs	r3, r2
 800339c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d109      	bne.n	80033b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fd15 	bl	8003dd8 <RCC_SetFlashLatencyFromMSIRange>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e343      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033b8:	f000 fc4a 	bl	8003c50 <HAL_RCC_GetSysClockFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b52      	ldr	r3, [pc, #328]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	4950      	ldr	r1, [pc, #320]	; (800350c <HAL_RCC_OscConfig+0x274>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
 80033d4:	4a4e      	ldr	r2, [pc, #312]	; (8003510 <HAL_RCC_OscConfig+0x278>)
 80033d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033d8:	4b4e      	ldr	r3, [pc, #312]	; (8003514 <HAL_RCC_OscConfig+0x27c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fbcf 	bl	8002b80 <HAL_InitTick>
 80033e2:	4603      	mov	r3, r0
 80033e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d052      	beq.n	8003492 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	e327      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d032      	beq.n	800345e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033f8:	4b43      	ldr	r3, [pc, #268]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a42      	ldr	r2, [pc, #264]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003404:	f7ff fc0c 	bl	8002c20 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800340c:	f7ff fc08 	bl	8002c20 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e310      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800341e:	4b3a      	ldr	r3, [pc, #232]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800342a:	4b37      	ldr	r3, [pc, #220]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a36      	ldr	r2, [pc, #216]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 8003430:	f043 0308 	orr.w	r3, r3, #8
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b34      	ldr	r3, [pc, #208]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	4931      	ldr	r1, [pc, #196]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 8003444:	4313      	orrs	r3, r2
 8003446:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003448:	4b2f      	ldr	r3, [pc, #188]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	492c      	ldr	r1, [pc, #176]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
 800345c:	e01a      	b.n	8003494 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800345e:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a29      	ldr	r2, [pc, #164]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800346a:	f7ff fbd9 	bl	8002c20 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003472:	f7ff fbd5 	bl	8002c20 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e2dd      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003484:	4b20      	ldr	r3, [pc, #128]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1f0      	bne.n	8003472 <HAL_RCC_OscConfig+0x1da>
 8003490:	e000      	b.n	8003494 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003492:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d074      	beq.n	800358a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d005      	beq.n	80034b2 <HAL_RCC_OscConfig+0x21a>
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b0c      	cmp	r3, #12
 80034aa:	d10e      	bne.n	80034ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d10b      	bne.n	80034ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d064      	beq.n	8003588 <HAL_RCC_OscConfig+0x2f0>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d160      	bne.n	8003588 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e2ba      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d2:	d106      	bne.n	80034e2 <HAL_RCC_OscConfig+0x24a>
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a0b      	ldr	r2, [pc, #44]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 80034da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	e026      	b.n	8003530 <HAL_RCC_OscConfig+0x298>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ea:	d115      	bne.n	8003518 <HAL_RCC_OscConfig+0x280>
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a05      	ldr	r2, [pc, #20]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 80034f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	4b03      	ldr	r3, [pc, #12]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a02      	ldr	r2, [pc, #8]	; (8003508 <HAL_RCC_OscConfig+0x270>)
 80034fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	e014      	b.n	8003530 <HAL_RCC_OscConfig+0x298>
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	080083f4 	.word	0x080083f4
 8003510:	20000000 	.word	0x20000000
 8003514:	20000004 	.word	0x20000004
 8003518:	4ba0      	ldr	r3, [pc, #640]	; (800379c <HAL_RCC_OscConfig+0x504>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a9f      	ldr	r2, [pc, #636]	; (800379c <HAL_RCC_OscConfig+0x504>)
 800351e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	4b9d      	ldr	r3, [pc, #628]	; (800379c <HAL_RCC_OscConfig+0x504>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a9c      	ldr	r2, [pc, #624]	; (800379c <HAL_RCC_OscConfig+0x504>)
 800352a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800352e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d013      	beq.n	8003560 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7ff fb72 	bl	8002c20 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003540:	f7ff fb6e 	bl	8002c20 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	; 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e276      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003552:	4b92      	ldr	r3, [pc, #584]	; (800379c <HAL_RCC_OscConfig+0x504>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x2a8>
 800355e:	e014      	b.n	800358a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7ff fb5e 	bl	8002c20 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003568:	f7ff fb5a 	bl	8002c20 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	; 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e262      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800357a:	4b88      	ldr	r3, [pc, #544]	; (800379c <HAL_RCC_OscConfig+0x504>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x2d0>
 8003586:	e000      	b.n	800358a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d060      	beq.n	8003658 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b04      	cmp	r3, #4
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_OscConfig+0x310>
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	d119      	bne.n	80035d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d116      	bne.n	80035d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035a8:	4b7c      	ldr	r3, [pc, #496]	; (800379c <HAL_RCC_OscConfig+0x504>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_OscConfig+0x328>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e23f      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c0:	4b76      	ldr	r3, [pc, #472]	; (800379c <HAL_RCC_OscConfig+0x504>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	061b      	lsls	r3, r3, #24
 80035ce:	4973      	ldr	r1, [pc, #460]	; (800379c <HAL_RCC_OscConfig+0x504>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035d4:	e040      	b.n	8003658 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d023      	beq.n	8003626 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035de:	4b6f      	ldr	r3, [pc, #444]	; (800379c <HAL_RCC_OscConfig+0x504>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6e      	ldr	r2, [pc, #440]	; (800379c <HAL_RCC_OscConfig+0x504>)
 80035e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7ff fb19 	bl	8002c20 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f2:	f7ff fb15 	bl	8002c20 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e21d      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003604:	4b65      	ldr	r3, [pc, #404]	; (800379c <HAL_RCC_OscConfig+0x504>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003610:	4b62      	ldr	r3, [pc, #392]	; (800379c <HAL_RCC_OscConfig+0x504>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	061b      	lsls	r3, r3, #24
 800361e:	495f      	ldr	r1, [pc, #380]	; (800379c <HAL_RCC_OscConfig+0x504>)
 8003620:	4313      	orrs	r3, r2
 8003622:	604b      	str	r3, [r1, #4]
 8003624:	e018      	b.n	8003658 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003626:	4b5d      	ldr	r3, [pc, #372]	; (800379c <HAL_RCC_OscConfig+0x504>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a5c      	ldr	r2, [pc, #368]	; (800379c <HAL_RCC_OscConfig+0x504>)
 800362c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7ff faf5 	bl	8002c20 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800363a:	f7ff faf1 	bl	8002c20 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e1f9      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800364c:	4b53      	ldr	r3, [pc, #332]	; (800379c <HAL_RCC_OscConfig+0x504>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f0      	bne.n	800363a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d03c      	beq.n	80036de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01c      	beq.n	80036a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800366c:	4b4b      	ldr	r3, [pc, #300]	; (800379c <HAL_RCC_OscConfig+0x504>)
 800366e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003672:	4a4a      	ldr	r2, [pc, #296]	; (800379c <HAL_RCC_OscConfig+0x504>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367c:	f7ff fad0 	bl	8002c20 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003684:	f7ff facc 	bl	8002c20 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e1d4      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003696:	4b41      	ldr	r3, [pc, #260]	; (800379c <HAL_RCC_OscConfig+0x504>)
 8003698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0ef      	beq.n	8003684 <HAL_RCC_OscConfig+0x3ec>
 80036a4:	e01b      	b.n	80036de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a6:	4b3d      	ldr	r3, [pc, #244]	; (800379c <HAL_RCC_OscConfig+0x504>)
 80036a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ac:	4a3b      	ldr	r2, [pc, #236]	; (800379c <HAL_RCC_OscConfig+0x504>)
 80036ae:	f023 0301 	bic.w	r3, r3, #1
 80036b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b6:	f7ff fab3 	bl	8002c20 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036be:	f7ff faaf 	bl	8002c20 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e1b7      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036d0:	4b32      	ldr	r3, [pc, #200]	; (800379c <HAL_RCC_OscConfig+0x504>)
 80036d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1ef      	bne.n	80036be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80a6 	beq.w	8003838 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ec:	2300      	movs	r3, #0
 80036ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036f0:	4b2a      	ldr	r3, [pc, #168]	; (800379c <HAL_RCC_OscConfig+0x504>)
 80036f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10d      	bne.n	8003718 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fc:	4b27      	ldr	r3, [pc, #156]	; (800379c <HAL_RCC_OscConfig+0x504>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	4a26      	ldr	r2, [pc, #152]	; (800379c <HAL_RCC_OscConfig+0x504>)
 8003702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003706:	6593      	str	r3, [r2, #88]	; 0x58
 8003708:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_RCC_OscConfig+0x504>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003714:	2301      	movs	r3, #1
 8003716:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_RCC_OscConfig+0x508>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d118      	bne.n	8003756 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003724:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <HAL_RCC_OscConfig+0x508>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <HAL_RCC_OscConfig+0x508>)
 800372a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003730:	f7ff fa76 	bl	8002c20 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003738:	f7ff fa72 	bl	8002c20 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e17a      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800374a:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <HAL_RCC_OscConfig+0x508>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d108      	bne.n	8003770 <HAL_RCC_OscConfig+0x4d8>
 800375e:	4b0f      	ldr	r3, [pc, #60]	; (800379c <HAL_RCC_OscConfig+0x504>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	4a0d      	ldr	r2, [pc, #52]	; (800379c <HAL_RCC_OscConfig+0x504>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800376e:	e029      	b.n	80037c4 <HAL_RCC_OscConfig+0x52c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b05      	cmp	r3, #5
 8003776:	d115      	bne.n	80037a4 <HAL_RCC_OscConfig+0x50c>
 8003778:	4b08      	ldr	r3, [pc, #32]	; (800379c <HAL_RCC_OscConfig+0x504>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	4a07      	ldr	r2, [pc, #28]	; (800379c <HAL_RCC_OscConfig+0x504>)
 8003780:	f043 0304 	orr.w	r3, r3, #4
 8003784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003788:	4b04      	ldr	r3, [pc, #16]	; (800379c <HAL_RCC_OscConfig+0x504>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	4a03      	ldr	r2, [pc, #12]	; (800379c <HAL_RCC_OscConfig+0x504>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003798:	e014      	b.n	80037c4 <HAL_RCC_OscConfig+0x52c>
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000
 80037a0:	40007000 	.word	0x40007000
 80037a4:	4b9c      	ldr	r3, [pc, #624]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	4a9b      	ldr	r2, [pc, #620]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037b4:	4b98      	ldr	r3, [pc, #608]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	4a97      	ldr	r2, [pc, #604]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80037bc:	f023 0304 	bic.w	r3, r3, #4
 80037c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d016      	beq.n	80037fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037cc:	f7ff fa28 	bl	8002c20 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7ff fa24 	bl	8002c20 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e12a      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ea:	4b8b      	ldr	r3, [pc, #556]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80037ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0ed      	beq.n	80037d4 <HAL_RCC_OscConfig+0x53c>
 80037f8:	e015      	b.n	8003826 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fa:	f7ff fa11 	bl	8002c20 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003800:	e00a      	b.n	8003818 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7ff fa0d 	bl	8002c20 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003810:	4293      	cmp	r3, r2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e113      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003818:	4b7f      	ldr	r3, [pc, #508]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1ed      	bne.n	8003802 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003826:	7ffb      	ldrb	r3, [r7, #31]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d105      	bne.n	8003838 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800382c:	4b7a      	ldr	r3, [pc, #488]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 800382e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003830:	4a79      	ldr	r2, [pc, #484]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 8003832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003836:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80fe 	beq.w	8003a3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	2b02      	cmp	r3, #2
 8003848:	f040 80d0 	bne.w	80039ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800384c:	4b72      	ldr	r3, [pc, #456]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f003 0203 	and.w	r2, r3, #3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	429a      	cmp	r2, r3
 800385e:	d130      	bne.n	80038c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	3b01      	subs	r3, #1
 800386c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d127      	bne.n	80038c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800387e:	429a      	cmp	r2, r3
 8003880:	d11f      	bne.n	80038c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800388c:	2a07      	cmp	r2, #7
 800388e:	bf14      	ite	ne
 8003890:	2201      	movne	r2, #1
 8003892:	2200      	moveq	r2, #0
 8003894:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003896:	4293      	cmp	r3, r2
 8003898:	d113      	bne.n	80038c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a4:	085b      	lsrs	r3, r3, #1
 80038a6:	3b01      	subs	r3, #1
 80038a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d109      	bne.n	80038c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	085b      	lsrs	r3, r3, #1
 80038ba:	3b01      	subs	r3, #1
 80038bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d06e      	beq.n	80039a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b0c      	cmp	r3, #12
 80038c6:	d069      	beq.n	800399c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038c8:	4b53      	ldr	r3, [pc, #332]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038d4:	4b50      	ldr	r3, [pc, #320]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0ad      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038e4:	4b4c      	ldr	r3, [pc, #304]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a4b      	ldr	r2, [pc, #300]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80038ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038f0:	f7ff f996 	bl	8002c20 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f8:	f7ff f992 	bl	8002c20 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e09a      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800390a:	4b43      	ldr	r3, [pc, #268]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003916:	4b40      	ldr	r3, [pc, #256]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	4b40      	ldr	r3, [pc, #256]	; (8003a1c <HAL_RCC_OscConfig+0x784>)
 800391c:	4013      	ands	r3, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003926:	3a01      	subs	r2, #1
 8003928:	0112      	lsls	r2, r2, #4
 800392a:	4311      	orrs	r1, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003930:	0212      	lsls	r2, r2, #8
 8003932:	4311      	orrs	r1, r2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003938:	0852      	lsrs	r2, r2, #1
 800393a:	3a01      	subs	r2, #1
 800393c:	0552      	lsls	r2, r2, #21
 800393e:	4311      	orrs	r1, r2
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003944:	0852      	lsrs	r2, r2, #1
 8003946:	3a01      	subs	r2, #1
 8003948:	0652      	lsls	r2, r2, #25
 800394a:	4311      	orrs	r1, r2
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003950:	0912      	lsrs	r2, r2, #4
 8003952:	0452      	lsls	r2, r2, #17
 8003954:	430a      	orrs	r2, r1
 8003956:	4930      	ldr	r1, [pc, #192]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 8003958:	4313      	orrs	r3, r2
 800395a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800395c:	4b2e      	ldr	r3, [pc, #184]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a2d      	ldr	r2, [pc, #180]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 8003962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003966:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003968:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4a2a      	ldr	r2, [pc, #168]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 800396e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003972:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003974:	f7ff f954 	bl	8002c20 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397c:	f7ff f950 	bl	8002c20 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e058      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800398e:	4b22      	ldr	r3, [pc, #136]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800399a:	e050      	b.n	8003a3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e04f      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a0:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d148      	bne.n	8003a3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039ac:	4b1a      	ldr	r3, [pc, #104]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a19      	ldr	r2, [pc, #100]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80039b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039b8:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80039be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039c4:	f7ff f92c 	bl	8002c20 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039cc:	f7ff f928 	bl	8002c20 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e030      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039de:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x734>
 80039ea:	e028      	b.n	8003a3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b0c      	cmp	r3, #12
 80039f0:	d023      	beq.n	8003a3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f2:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a08      	ldr	r2, [pc, #32]	; (8003a18 <HAL_RCC_OscConfig+0x780>)
 80039f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7ff f90f 	bl	8002c20 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a04:	e00c      	b.n	8003a20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a06:	f7ff f90b 	bl	8002c20 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d905      	bls.n	8003a20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e013      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a20:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_RCC_OscConfig+0x7b0>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1ec      	bne.n	8003a06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_RCC_OscConfig+0x7b0>)
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	4905      	ldr	r1, [pc, #20]	; (8003a48 <HAL_RCC_OscConfig+0x7b0>)
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_RCC_OscConfig+0x7b4>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	60cb      	str	r3, [r1, #12]
 8003a38:	e001      	b.n	8003a3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3720      	adds	r7, #32
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	feeefffc 	.word	0xfeeefffc

08003a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0e7      	b.n	8003c34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a64:	4b75      	ldr	r3, [pc, #468]	; (8003c3c <HAL_RCC_ClockConfig+0x1ec>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d910      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a72:	4b72      	ldr	r3, [pc, #456]	; (8003c3c <HAL_RCC_ClockConfig+0x1ec>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 0207 	bic.w	r2, r3, #7
 8003a7a:	4970      	ldr	r1, [pc, #448]	; (8003c3c <HAL_RCC_ClockConfig+0x1ec>)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	4b6e      	ldr	r3, [pc, #440]	; (8003c3c <HAL_RCC_ClockConfig+0x1ec>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0cf      	b.n	8003c34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d010      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	4b66      	ldr	r3, [pc, #408]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d908      	bls.n	8003ac2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab0:	4b63      	ldr	r3, [pc, #396]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4960      	ldr	r1, [pc, #384]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d04c      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad6:	4b5a      	ldr	r3, [pc, #360]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d121      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e0a6      	b.n	8003c34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d107      	bne.n	8003afe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aee:	4b54      	ldr	r3, [pc, #336]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d115      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e09a      	b.n	8003c34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d107      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b06:	4b4e      	ldr	r3, [pc, #312]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d109      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e08e      	b.n	8003c34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b16:	4b4a      	ldr	r3, [pc, #296]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e086      	b.n	8003c34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b26:	4b46      	ldr	r3, [pc, #280]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f023 0203 	bic.w	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	4943      	ldr	r1, [pc, #268]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b38:	f7ff f872 	bl	8002c20 <HAL_GetTick>
 8003b3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b40:	f7ff f86e 	bl	8002c20 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e06e      	b.n	8003c34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b56:	4b3a      	ldr	r3, [pc, #232]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 020c 	and.w	r2, r3, #12
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d1eb      	bne.n	8003b40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d010      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	4b31      	ldr	r3, [pc, #196]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d208      	bcs.n	8003b96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b2e      	ldr	r3, [pc, #184]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	492b      	ldr	r1, [pc, #172]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b96:	4b29      	ldr	r3, [pc, #164]	; (8003c3c <HAL_RCC_ClockConfig+0x1ec>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d210      	bcs.n	8003bc6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba4:	4b25      	ldr	r3, [pc, #148]	; (8003c3c <HAL_RCC_ClockConfig+0x1ec>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 0207 	bic.w	r2, r3, #7
 8003bac:	4923      	ldr	r1, [pc, #140]	; (8003c3c <HAL_RCC_ClockConfig+0x1ec>)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb4:	4b21      	ldr	r3, [pc, #132]	; (8003c3c <HAL_RCC_ClockConfig+0x1ec>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e036      	b.n	8003c34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd2:	4b1b      	ldr	r3, [pc, #108]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4918      	ldr	r1, [pc, #96]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bf0:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4910      	ldr	r1, [pc, #64]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c04:	f000 f824 	bl	8003c50 <HAL_RCC_GetSysClockFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <HAL_RCC_ClockConfig+0x1f0>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	490b      	ldr	r1, [pc, #44]	; (8003c44 <HAL_RCC_ClockConfig+0x1f4>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c20:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <HAL_RCC_ClockConfig+0x1f8>)
 8003c22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c24:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <HAL_RCC_ClockConfig+0x1fc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fe ffa9 	bl	8002b80 <HAL_InitTick>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c32:	7afb      	ldrb	r3, [r7, #11]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40022000 	.word	0x40022000
 8003c40:	40021000 	.word	0x40021000
 8003c44:	080083f4 	.word	0x080083f4
 8003c48:	20000000 	.word	0x20000000
 8003c4c:	20000004 	.word	0x20000004

08003c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b089      	sub	sp, #36	; 0x24
 8003c54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c5e:	4b3e      	ldr	r3, [pc, #248]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c68:	4b3b      	ldr	r3, [pc, #236]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0303 	and.w	r3, r3, #3
 8003c70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_RCC_GetSysClockFreq+0x34>
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b0c      	cmp	r3, #12
 8003c7c:	d121      	bne.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d11e      	bne.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c84:	4b34      	ldr	r3, [pc, #208]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d107      	bne.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c90:	4b31      	ldr	r3, [pc, #196]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	e005      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ca0:	4b2d      	ldr	r3, [pc, #180]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003cac:	4a2b      	ldr	r2, [pc, #172]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10d      	bne.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cc0:	e00a      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d102      	bne.n	8003cce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cc8:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	e004      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d101      	bne.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cd4:	4b23      	ldr	r3, [pc, #140]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	2b0c      	cmp	r3, #12
 8003cdc:	d134      	bne.n	8003d48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cde:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d003      	beq.n	8003cf6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d003      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0xac>
 8003cf4:	e005      	b.n	8003d02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cf6:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cf8:	617b      	str	r3, [r7, #20]
      break;
 8003cfa:	e005      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cfc:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cfe:	617b      	str	r3, [r7, #20]
      break;
 8003d00:	e002      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	617b      	str	r3, [r7, #20]
      break;
 8003d06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d08:	4b13      	ldr	r3, [pc, #76]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	3301      	adds	r3, #1
 8003d14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d16:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	fb03 f202 	mul.w	r2, r3, r2
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	0e5b      	lsrs	r3, r3, #25
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	3301      	adds	r3, #1
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d48:	69bb      	ldr	r3, [r7, #24]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3724      	adds	r7, #36	; 0x24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	0800840c 	.word	0x0800840c
 8003d60:	00f42400 	.word	0x00f42400
 8003d64:	007a1200 	.word	0x007a1200

08003d68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d6c:	4b03      	ldr	r3, [pc, #12]	; (8003d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	20000000 	.word	0x20000000

08003d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d84:	f7ff fff0 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	4904      	ldr	r1, [pc, #16]	; (8003da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d96:	5ccb      	ldrb	r3, [r1, r3]
 8003d98:	f003 031f 	and.w	r3, r3, #31
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40021000 	.word	0x40021000
 8003da8:	08008404 	.word	0x08008404

08003dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003db0:	f7ff ffda 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	0adb      	lsrs	r3, r3, #11
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	4904      	ldr	r1, [pc, #16]	; (8003dd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	08008404 	.word	0x08008404

08003dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003de4:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003df0:	f7ff f9ee 	bl	80031d0 <HAL_PWREx_GetVoltageRange>
 8003df4:	6178      	str	r0, [r7, #20]
 8003df6:	e014      	b.n	8003e22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003df8:	4b25      	ldr	r3, [pc, #148]	; (8003e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	4a24      	ldr	r2, [pc, #144]	; (8003e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e02:	6593      	str	r3, [r2, #88]	; 0x58
 8003e04:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e10:	f7ff f9de 	bl	80031d0 <HAL_PWREx_GetVoltageRange>
 8003e14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e16:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	4a1d      	ldr	r2, [pc, #116]	; (8003e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e28:	d10b      	bne.n	8003e42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b80      	cmp	r3, #128	; 0x80
 8003e2e:	d919      	bls.n	8003e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2ba0      	cmp	r3, #160	; 0xa0
 8003e34:	d902      	bls.n	8003e3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e36:	2302      	movs	r3, #2
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	e013      	b.n	8003e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	e010      	b.n	8003e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b80      	cmp	r3, #128	; 0x80
 8003e46:	d902      	bls.n	8003e4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e48:	2303      	movs	r3, #3
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	e00a      	b.n	8003e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b80      	cmp	r3, #128	; 0x80
 8003e52:	d102      	bne.n	8003e5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e54:	2302      	movs	r3, #2
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	e004      	b.n	8003e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b70      	cmp	r3, #112	; 0x70
 8003e5e:	d101      	bne.n	8003e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e60:	2301      	movs	r3, #1
 8003e62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f023 0207 	bic.w	r2, r3, #7
 8003e6c:	4909      	ldr	r1, [pc, #36]	; (8003e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e74:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d001      	beq.n	8003e86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40022000 	.word	0x40022000

08003e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d041      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ebc:	d02a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ebe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ec2:	d824      	bhi.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ec4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ec8:	d008      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003eca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ece:	d81e      	bhi.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed8:	d010      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003eda:	e018      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003edc:	4b86      	ldr	r3, [pc, #536]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4a85      	ldr	r2, [pc, #532]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ee8:	e015      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3304      	adds	r3, #4
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fabb 	bl	800446c <RCCEx_PLLSAI1_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003efa:	e00c      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3320      	adds	r3, #32
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fba6 	bl	8004654 <RCCEx_PLLSAI2_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f0c:	e003      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	74fb      	strb	r3, [r7, #19]
      break;
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f16:	7cfb      	ldrb	r3, [r7, #19]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10b      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f1c:	4b76      	ldr	r3, [pc, #472]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f2a:	4973      	ldr	r1, [pc, #460]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f32:	e001      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d041      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f4c:	d02a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f52:	d824      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f58:	d008      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f5e:	d81e      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f68:	d010      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f6a:	e018      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f6c:	4b62      	ldr	r3, [pc, #392]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a61      	ldr	r2, [pc, #388]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f78:	e015      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fa73 	bl	800446c <RCCEx_PLLSAI1_Config>
 8003f86:	4603      	mov	r3, r0
 8003f88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f8a:	e00c      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3320      	adds	r3, #32
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fb5e 	bl	8004654 <RCCEx_PLLSAI2_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f9c:	e003      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	74fb      	strb	r3, [r7, #19]
      break;
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fa6:	7cfb      	ldrb	r3, [r7, #19]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10b      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fac:	4b52      	ldr	r3, [pc, #328]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fba:	494f      	ldr	r1, [pc, #316]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fc2:	e001      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80a0 	beq.w	8004116 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fda:	4b47      	ldr	r3, [pc, #284]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003fea:	2300      	movs	r3, #0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00d      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff0:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff4:	4a40      	ldr	r2, [pc, #256]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8003ffc:	4b3e      	ldr	r3, [pc, #248]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004008:	2301      	movs	r3, #1
 800400a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800400c:	4b3b      	ldr	r3, [pc, #236]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a3a      	ldr	r2, [pc, #232]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004016:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004018:	f7fe fe02 	bl	8002c20 <HAL_GetTick>
 800401c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800401e:	e009      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004020:	f7fe fdfe 	bl	8002c20 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d902      	bls.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	74fb      	strb	r3, [r7, #19]
        break;
 8004032:	e005      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004034:	4b31      	ldr	r3, [pc, #196]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0ef      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d15c      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004046:	4b2c      	ldr	r3, [pc, #176]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004050:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01f      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	429a      	cmp	r2, r3
 8004062:	d019      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004064:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004070:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004076:	4a20      	ldr	r2, [pc, #128]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004080:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	4a1c      	ldr	r2, [pc, #112]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004090:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d016      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a2:	f7fe fdbd 	bl	8002c20 <HAL_GetTick>
 80040a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a8:	e00b      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040aa:	f7fe fdb9 	bl	8002c20 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d902      	bls.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	74fb      	strb	r3, [r7, #19]
            break;
 80040c0:	e006      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c2:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ec      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040d0:	7cfb      	ldrb	r3, [r7, #19]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d6:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e6:	4904      	ldr	r1, [pc, #16]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040ee:	e009      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040f0:	7cfb      	ldrb	r3, [r7, #19]
 80040f2:	74bb      	strb	r3, [r7, #18]
 80040f4:	e006      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004104:	7c7b      	ldrb	r3, [r7, #17]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d105      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410a:	4b9e      	ldr	r3, [pc, #632]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410e:	4a9d      	ldr	r2, [pc, #628]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004114:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004122:	4b98      	ldr	r3, [pc, #608]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	f023 0203 	bic.w	r2, r3, #3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	4994      	ldr	r1, [pc, #592]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004144:	4b8f      	ldr	r3, [pc, #572]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414a:	f023 020c 	bic.w	r2, r3, #12
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004152:	498c      	ldr	r1, [pc, #560]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004166:	4b87      	ldr	r3, [pc, #540]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	4983      	ldr	r1, [pc, #524]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004188:	4b7e      	ldr	r3, [pc, #504]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	497b      	ldr	r1, [pc, #492]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041aa:	4b76      	ldr	r3, [pc, #472]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b8:	4972      	ldr	r1, [pc, #456]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041cc:	4b6d      	ldr	r3, [pc, #436]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041da:	496a      	ldr	r1, [pc, #424]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ee:	4b65      	ldr	r3, [pc, #404]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fc:	4961      	ldr	r1, [pc, #388]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004210:	4b5c      	ldr	r3, [pc, #368]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800421e:	4959      	ldr	r1, [pc, #356]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004232:	4b54      	ldr	r3, [pc, #336]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004238:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004240:	4950      	ldr	r1, [pc, #320]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004254:	4b4b      	ldr	r3, [pc, #300]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	4948      	ldr	r1, [pc, #288]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004276:	4b43      	ldr	r3, [pc, #268]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004284:	493f      	ldr	r1, [pc, #252]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d028      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004298:	4b3a      	ldr	r3, [pc, #232]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a6:	4937      	ldr	r1, [pc, #220]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b6:	d106      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b8:	4b32      	ldr	r3, [pc, #200]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4a31      	ldr	r2, [pc, #196]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042c2:	60d3      	str	r3, [r2, #12]
 80042c4:	e011      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ce:	d10c      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3304      	adds	r3, #4
 80042d4:	2101      	movs	r1, #1
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f8c8 	bl	800446c <RCCEx_PLLSAI1_Config>
 80042dc:	4603      	mov	r3, r0
 80042de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80042e6:	7cfb      	ldrb	r3, [r7, #19]
 80042e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d028      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042f6:	4b23      	ldr	r3, [pc, #140]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004304:	491f      	ldr	r1, [pc, #124]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004314:	d106      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004316:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	4a1a      	ldr	r2, [pc, #104]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004320:	60d3      	str	r3, [r2, #12]
 8004322:	e011      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800432c:	d10c      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3304      	adds	r3, #4
 8004332:	2101      	movs	r1, #1
 8004334:	4618      	mov	r0, r3
 8004336:	f000 f899 	bl	800446c <RCCEx_PLLSAI1_Config>
 800433a:	4603      	mov	r3, r0
 800433c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d02b      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004362:	4908      	ldr	r1, [pc, #32]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800436e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004372:	d109      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004374:	4b03      	ldr	r3, [pc, #12]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4a02      	ldr	r2, [pc, #8]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800437e:	60d3      	str	r3, [r2, #12]
 8004380:	e014      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004390:	d10c      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3304      	adds	r3, #4
 8004396:	2101      	movs	r1, #1
 8004398:	4618      	mov	r0, r3
 800439a:	f000 f867 	bl	800446c <RCCEx_PLLSAI1_Config>
 800439e:	4603      	mov	r3, r0
 80043a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043a2:	7cfb      	ldrb	r3, [r7, #19]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d02f      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043b8:	4b2b      	ldr	r3, [pc, #172]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c6:	4928      	ldr	r1, [pc, #160]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043d6:	d10d      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	2102      	movs	r1, #2
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 f844 	bl	800446c <RCCEx_PLLSAI1_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d014      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043ee:	7cfb      	ldrb	r3, [r7, #19]
 80043f0:	74bb      	strb	r3, [r7, #18]
 80043f2:	e011      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043fc:	d10c      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3320      	adds	r3, #32
 8004402:	2102      	movs	r1, #2
 8004404:	4618      	mov	r0, r3
 8004406:	f000 f925 	bl	8004654 <RCCEx_PLLSAI2_Config>
 800440a:	4603      	mov	r3, r0
 800440c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800440e:	7cfb      	ldrb	r3, [r7, #19]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004414:	7cfb      	ldrb	r3, [r7, #19]
 8004416:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004424:	4b10      	ldr	r3, [pc, #64]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004432:	490d      	ldr	r1, [pc, #52]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00b      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004446:	4b08      	ldr	r3, [pc, #32]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004456:	4904      	ldr	r1, [pc, #16]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800445e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000

0800446c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800447a:	4b75      	ldr	r3, [pc, #468]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d018      	beq.n	80044b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004486:	4b72      	ldr	r3, [pc, #456]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 0203 	and.w	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d10d      	bne.n	80044b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
       ||
 800449a:	2b00      	cmp	r3, #0
 800449c:	d009      	beq.n	80044b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800449e:	4b6c      	ldr	r3, [pc, #432]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	091b      	lsrs	r3, r3, #4
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
       ||
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d047      	beq.n	8004542 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	73fb      	strb	r3, [r7, #15]
 80044b6:	e044      	b.n	8004542 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d018      	beq.n	80044f2 <RCCEx_PLLSAI1_Config+0x86>
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d825      	bhi.n	8004510 <RCCEx_PLLSAI1_Config+0xa4>
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d002      	beq.n	80044ce <RCCEx_PLLSAI1_Config+0x62>
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d009      	beq.n	80044e0 <RCCEx_PLLSAI1_Config+0x74>
 80044cc:	e020      	b.n	8004510 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044ce:	4b60      	ldr	r3, [pc, #384]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d11d      	bne.n	8004516 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044de:	e01a      	b.n	8004516 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044e0:	4b5b      	ldr	r3, [pc, #364]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d116      	bne.n	800451a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f0:	e013      	b.n	800451a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044f2:	4b57      	ldr	r3, [pc, #348]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10f      	bne.n	800451e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044fe:	4b54      	ldr	r3, [pc, #336]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d109      	bne.n	800451e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800450e:	e006      	b.n	800451e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	73fb      	strb	r3, [r7, #15]
      break;
 8004514:	e004      	b.n	8004520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004516:	bf00      	nop
 8004518:	e002      	b.n	8004520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800451a:	bf00      	nop
 800451c:	e000      	b.n	8004520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800451e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10d      	bne.n	8004542 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004526:	4b4a      	ldr	r3, [pc, #296]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6819      	ldr	r1, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	3b01      	subs	r3, #1
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	430b      	orrs	r3, r1
 800453c:	4944      	ldr	r1, [pc, #272]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800453e:	4313      	orrs	r3, r2
 8004540:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d17d      	bne.n	8004644 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004548:	4b41      	ldr	r3, [pc, #260]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a40      	ldr	r2, [pc, #256]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800454e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004554:	f7fe fb64 	bl	8002c20 <HAL_GetTick>
 8004558:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800455a:	e009      	b.n	8004570 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800455c:	f7fe fb60 	bl	8002c20 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d902      	bls.n	8004570 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	73fb      	strb	r3, [r7, #15]
        break;
 800456e:	e005      	b.n	800457c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004570:	4b37      	ldr	r3, [pc, #220]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1ef      	bne.n	800455c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d160      	bne.n	8004644 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d111      	bne.n	80045ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004588:	4b31      	ldr	r3, [pc, #196]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6892      	ldr	r2, [r2, #8]
 8004598:	0211      	lsls	r1, r2, #8
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68d2      	ldr	r2, [r2, #12]
 800459e:	0912      	lsrs	r2, r2, #4
 80045a0:	0452      	lsls	r2, r2, #17
 80045a2:	430a      	orrs	r2, r1
 80045a4:	492a      	ldr	r1, [pc, #168]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	610b      	str	r3, [r1, #16]
 80045aa:	e027      	b.n	80045fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d112      	bne.n	80045d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045b2:	4b27      	ldr	r3, [pc, #156]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6892      	ldr	r2, [r2, #8]
 80045c2:	0211      	lsls	r1, r2, #8
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6912      	ldr	r2, [r2, #16]
 80045c8:	0852      	lsrs	r2, r2, #1
 80045ca:	3a01      	subs	r2, #1
 80045cc:	0552      	lsls	r2, r2, #21
 80045ce:	430a      	orrs	r2, r1
 80045d0:	491f      	ldr	r1, [pc, #124]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	610b      	str	r3, [r1, #16]
 80045d6:	e011      	b.n	80045fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045d8:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6892      	ldr	r2, [r2, #8]
 80045e8:	0211      	lsls	r1, r2, #8
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6952      	ldr	r2, [r2, #20]
 80045ee:	0852      	lsrs	r2, r2, #1
 80045f0:	3a01      	subs	r2, #1
 80045f2:	0652      	lsls	r2, r2, #25
 80045f4:	430a      	orrs	r2, r1
 80045f6:	4916      	ldr	r1, [pc, #88]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045fc:	4b14      	ldr	r3, [pc, #80]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a13      	ldr	r2, [pc, #76]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004602:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004606:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004608:	f7fe fb0a 	bl	8002c20 <HAL_GetTick>
 800460c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800460e:	e009      	b.n	8004624 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004610:	f7fe fb06 	bl	8002c20 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d902      	bls.n	8004624 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	73fb      	strb	r3, [r7, #15]
          break;
 8004622:	e005      	b.n	8004630 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004624:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0ef      	beq.n	8004610 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004636:	4b06      	ldr	r3, [pc, #24]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	4904      	ldr	r1, [pc, #16]	; (8004650 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004640:	4313      	orrs	r3, r2
 8004642:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004644:	7bfb      	ldrb	r3, [r7, #15]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40021000 	.word	0x40021000

08004654 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004662:	4b6a      	ldr	r3, [pc, #424]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d018      	beq.n	80046a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800466e:	4b67      	ldr	r3, [pc, #412]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f003 0203 	and.w	r2, r3, #3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d10d      	bne.n	800469a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
       ||
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004686:	4b61      	ldr	r3, [pc, #388]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
       ||
 8004696:	429a      	cmp	r2, r3
 8004698:	d047      	beq.n	800472a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	73fb      	strb	r3, [r7, #15]
 800469e:	e044      	b.n	800472a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d018      	beq.n	80046da <RCCEx_PLLSAI2_Config+0x86>
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d825      	bhi.n	80046f8 <RCCEx_PLLSAI2_Config+0xa4>
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d002      	beq.n	80046b6 <RCCEx_PLLSAI2_Config+0x62>
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d009      	beq.n	80046c8 <RCCEx_PLLSAI2_Config+0x74>
 80046b4:	e020      	b.n	80046f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046b6:	4b55      	ldr	r3, [pc, #340]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d11d      	bne.n	80046fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c6:	e01a      	b.n	80046fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046c8:	4b50      	ldr	r3, [pc, #320]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d116      	bne.n	8004702 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d8:	e013      	b.n	8004702 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046da:	4b4c      	ldr	r3, [pc, #304]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10f      	bne.n	8004706 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046e6:	4b49      	ldr	r3, [pc, #292]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046f6:	e006      	b.n	8004706 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
      break;
 80046fc:	e004      	b.n	8004708 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046fe:	bf00      	nop
 8004700:	e002      	b.n	8004708 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004702:	bf00      	nop
 8004704:	e000      	b.n	8004708 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004706:	bf00      	nop
    }

    if(status == HAL_OK)
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10d      	bne.n	800472a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800470e:	4b3f      	ldr	r3, [pc, #252]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6819      	ldr	r1, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	3b01      	subs	r3, #1
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	430b      	orrs	r3, r1
 8004724:	4939      	ldr	r1, [pc, #228]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004726:	4313      	orrs	r3, r2
 8004728:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d167      	bne.n	8004800 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004730:	4b36      	ldr	r3, [pc, #216]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a35      	ldr	r2, [pc, #212]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473c:	f7fe fa70 	bl	8002c20 <HAL_GetTick>
 8004740:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004742:	e009      	b.n	8004758 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004744:	f7fe fa6c 	bl	8002c20 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d902      	bls.n	8004758 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	73fb      	strb	r3, [r7, #15]
        break;
 8004756:	e005      	b.n	8004764 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004758:	4b2c      	ldr	r3, [pc, #176]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1ef      	bne.n	8004744 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d14a      	bne.n	8004800 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d111      	bne.n	8004794 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004770:	4b26      	ldr	r3, [pc, #152]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6892      	ldr	r2, [r2, #8]
 8004780:	0211      	lsls	r1, r2, #8
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	68d2      	ldr	r2, [r2, #12]
 8004786:	0912      	lsrs	r2, r2, #4
 8004788:	0452      	lsls	r2, r2, #17
 800478a:	430a      	orrs	r2, r1
 800478c:	491f      	ldr	r1, [pc, #124]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 800478e:	4313      	orrs	r3, r2
 8004790:	614b      	str	r3, [r1, #20]
 8004792:	e011      	b.n	80047b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004794:	4b1d      	ldr	r3, [pc, #116]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800479c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6892      	ldr	r2, [r2, #8]
 80047a4:	0211      	lsls	r1, r2, #8
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6912      	ldr	r2, [r2, #16]
 80047aa:	0852      	lsrs	r2, r2, #1
 80047ac:	3a01      	subs	r2, #1
 80047ae:	0652      	lsls	r2, r2, #25
 80047b0:	430a      	orrs	r2, r1
 80047b2:	4916      	ldr	r1, [pc, #88]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047b8:	4b14      	ldr	r3, [pc, #80]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a13      	ldr	r2, [pc, #76]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c4:	f7fe fa2c 	bl	8002c20 <HAL_GetTick>
 80047c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047ca:	e009      	b.n	80047e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047cc:	f7fe fa28 	bl	8002c20 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d902      	bls.n	80047e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	73fb      	strb	r3, [r7, #15]
          break;
 80047de:	e005      	b.n	80047ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047e0:	4b0a      	ldr	r3, [pc, #40]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0ef      	beq.n	80047cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047f2:	4b06      	ldr	r3, [pc, #24]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f4:	695a      	ldr	r2, [r3, #20]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	4904      	ldr	r1, [pc, #16]	; (800480c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004800:	7bfb      	ldrb	r3, [r7, #15]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40021000 	.word	0x40021000

08004810 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e095      	b.n	800494e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	d108      	bne.n	800483c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004832:	d009      	beq.n	8004848 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	61da      	str	r2, [r3, #28]
 800483a:	e005      	b.n	8004848 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fd ff20 	bl	80026a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800487e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004888:	d902      	bls.n	8004890 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	e002      	b.n	8004896 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004894:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800489e:	d007      	beq.n	80048b0 <HAL_SPI_Init+0xa0>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048a8:	d002      	beq.n	80048b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048c0:	431a      	orrs	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f2:	ea42 0103 	orr.w	r1, r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	0c1b      	lsrs	r3, r3, #16
 800490c:	f003 0204 	and.w	r2, r3, #4
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800492c:	ea42 0103 	orr.w	r1, r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b088      	sub	sp, #32
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	4613      	mov	r3, r2
 8004964:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_SPI_Transmit+0x22>
 8004974:	2302      	movs	r3, #2
 8004976:	e15f      	b.n	8004c38 <HAL_SPI_Transmit+0x2e2>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004980:	f7fe f94e 	bl	8002c20 <HAL_GetTick>
 8004984:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b01      	cmp	r3, #1
 8004994:	d002      	beq.n	800499c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004996:	2302      	movs	r3, #2
 8004998:	77fb      	strb	r3, [r7, #31]
    goto error;
 800499a:	e148      	b.n	8004c2e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <HAL_SPI_Transmit+0x52>
 80049a2:	88fb      	ldrh	r3, [r7, #6]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d102      	bne.n	80049ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049ac:	e13f      	b.n	8004c2e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2203      	movs	r2, #3
 80049b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	88fa      	ldrh	r2, [r7, #6]
 80049c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	88fa      	ldrh	r2, [r7, #6]
 80049cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f8:	d10f      	bne.n	8004a1a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a24:	2b40      	cmp	r3, #64	; 0x40
 8004a26:	d007      	beq.n	8004a38 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a40:	d94f      	bls.n	8004ae2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_SPI_Transmit+0xfa>
 8004a4a:	8afb      	ldrh	r3, [r7, #22]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d142      	bne.n	8004ad6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	881a      	ldrh	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a60:	1c9a      	adds	r2, r3, #2
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a74:	e02f      	b.n	8004ad6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d112      	bne.n	8004aaa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a88:	881a      	ldrh	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	1c9a      	adds	r2, r3, #2
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aa8:	e015      	b.n	8004ad6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aaa:	f7fe f8b9 	bl	8002c20 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d803      	bhi.n	8004ac2 <HAL_SPI_Transmit+0x16c>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac0:	d102      	bne.n	8004ac8 <HAL_SPI_Transmit+0x172>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d106      	bne.n	8004ad6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004ad4:	e0ab      	b.n	8004c2e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1ca      	bne.n	8004a76 <HAL_SPI_Transmit+0x120>
 8004ae0:	e080      	b.n	8004be4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <HAL_SPI_Transmit+0x19a>
 8004aea:	8afb      	ldrh	r3, [r7, #22]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d174      	bne.n	8004bda <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d912      	bls.n	8004b20 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	881a      	ldrh	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	1c9a      	adds	r2, r3, #2
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b02      	subs	r3, #2
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b1e:	e05c      	b.n	8004bda <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	330c      	adds	r3, #12
 8004b2a:	7812      	ldrb	r2, [r2, #0]
 8004b2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b46:	e048      	b.n	8004bda <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d12b      	bne.n	8004bae <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d912      	bls.n	8004b86 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	881a      	ldrh	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	1c9a      	adds	r2, r3, #2
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b02      	subs	r3, #2
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b84:	e029      	b.n	8004bda <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	330c      	adds	r3, #12
 8004b90:	7812      	ldrb	r2, [r2, #0]
 8004b92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bac:	e015      	b.n	8004bda <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bae:	f7fe f837 	bl	8002c20 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d803      	bhi.n	8004bc6 <HAL_SPI_Transmit+0x270>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc4:	d102      	bne.n	8004bcc <HAL_SPI_Transmit+0x276>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d106      	bne.n	8004bda <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004bd8:	e029      	b.n	8004c2e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1b1      	bne.n	8004b48 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	6839      	ldr	r1, [r7, #0]
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fcf9 	bl	80055e0 <SPI_EndRxTxTransaction>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c02:	2300      	movs	r3, #0
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e003      	b.n	8004c2e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c36:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	603b      	str	r3, [r7, #0]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d002      	beq.n	8004c66 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004c60:	2302      	movs	r3, #2
 8004c62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c64:	e11a      	b.n	8004e9c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c6e:	d112      	bne.n	8004c96 <HAL_SPI_Receive+0x56>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10e      	bne.n	8004c96 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c80:	88fa      	ldrh	r2, [r7, #6]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f90e 	bl	8004eae <HAL_SPI_TransmitReceive>
 8004c92:	4603      	mov	r3, r0
 8004c94:	e107      	b.n	8004ea6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_SPI_Receive+0x64>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e100      	b.n	8004ea6 <HAL_SPI_Receive+0x266>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cac:	f7fd ffb8 	bl	8002c20 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_SPI_Receive+0x7e>
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d102      	bne.n	8004cc4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cc2:	e0eb      	b.n	8004e9c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	88fa      	ldrh	r2, [r7, #6]
 8004cdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	88fa      	ldrh	r2, [r7, #6]
 8004ce4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d0e:	d908      	bls.n	8004d22 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d1e:	605a      	str	r2, [r3, #4]
 8004d20:	e007      	b.n	8004d32 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d30:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d3a:	d10f      	bne.n	8004d5c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d5a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	2b40      	cmp	r3, #64	; 0x40
 8004d68:	d007      	beq.n	8004d7a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d78:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d82:	d86f      	bhi.n	8004e64 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d84:	e034      	b.n	8004df0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d117      	bne.n	8004dc4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f103 020c 	add.w	r2, r3, #12
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	7812      	ldrb	r2, [r2, #0]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004dc2:	e015      	b.n	8004df0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dc4:	f7fd ff2c 	bl	8002c20 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d803      	bhi.n	8004ddc <HAL_SPI_Receive+0x19c>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dda:	d102      	bne.n	8004de2 <HAL_SPI_Receive+0x1a2>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004dee:	e055      	b.n	8004e9c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1c4      	bne.n	8004d86 <HAL_SPI_Receive+0x146>
 8004dfc:	e038      	b.n	8004e70 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d115      	bne.n	8004e38 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	b292      	uxth	r2, r2
 8004e18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	1c9a      	adds	r2, r3, #2
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004e36:	e015      	b.n	8004e64 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e38:	f7fd fef2 	bl	8002c20 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d803      	bhi.n	8004e50 <HAL_SPI_Receive+0x210>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4e:	d102      	bne.n	8004e56 <HAL_SPI_Receive+0x216>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004e62:	e01b      	b.n	8004e9c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1c6      	bne.n	8004dfe <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	6839      	ldr	r1, [r7, #0]
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 fb5b 	bl	8005530 <SPI_EndRxTransaction>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	75fb      	strb	r3, [r7, #23]
 8004e92:	e003      	b.n	8004e9c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b08a      	sub	sp, #40	; 0x28
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
 8004eba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_SPI_TransmitReceive+0x26>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e20a      	b.n	80052ea <HAL_SPI_TransmitReceive+0x43c>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004edc:	f7fd fea0 	bl	8002c20 <HAL_GetTick>
 8004ee0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ee8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004ef0:	887b      	ldrh	r3, [r7, #2]
 8004ef2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004ef4:	887b      	ldrh	r3, [r7, #2]
 8004ef6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ef8:	7efb      	ldrb	r3, [r7, #27]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d00e      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x6e>
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f04:	d106      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x66>
 8004f0e:	7efb      	ldrb	r3, [r7, #27]
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d003      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004f14:	2302      	movs	r3, #2
 8004f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f1a:	e1e0      	b.n	80052de <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <HAL_SPI_TransmitReceive+0x80>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <HAL_SPI_TransmitReceive+0x80>
 8004f28:	887b      	ldrh	r3, [r7, #2]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d103      	bne.n	8004f36 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f34:	e1d3      	b.n	80052de <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d003      	beq.n	8004f4a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2205      	movs	r2, #5
 8004f46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	887a      	ldrh	r2, [r7, #2]
 8004f5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	887a      	ldrh	r2, [r7, #2]
 8004f62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	887a      	ldrh	r2, [r7, #2]
 8004f70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	887a      	ldrh	r2, [r7, #2]
 8004f76:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f8c:	d802      	bhi.n	8004f94 <HAL_SPI_TransmitReceive+0xe6>
 8004f8e:	8a3b      	ldrh	r3, [r7, #16]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d908      	bls.n	8004fa6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fa2:	605a      	str	r2, [r3, #4]
 8004fa4:	e007      	b.n	8004fb6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fb4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	d007      	beq.n	8004fd4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fdc:	f240 8081 	bls.w	80050e2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <HAL_SPI_TransmitReceive+0x140>
 8004fe8:	8a7b      	ldrh	r3, [r7, #18]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d16d      	bne.n	80050ca <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	881a      	ldrh	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	1c9a      	adds	r2, r3, #2
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005012:	e05a      	b.n	80050ca <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b02      	cmp	r3, #2
 8005020:	d11b      	bne.n	800505a <HAL_SPI_TransmitReceive+0x1ac>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d016      	beq.n	800505a <HAL_SPI_TransmitReceive+0x1ac>
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	2b01      	cmp	r3, #1
 8005030:	d113      	bne.n	800505a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	881a      	ldrh	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	1c9a      	adds	r2, r3, #2
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005056:	2300      	movs	r3, #0
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b01      	cmp	r3, #1
 8005066:	d11c      	bne.n	80050a2 <HAL_SPI_TransmitReceive+0x1f4>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d016      	beq.n	80050a2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	b292      	uxth	r2, r2
 8005080:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	1c9a      	adds	r2, r3, #2
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800509e:	2301      	movs	r3, #1
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050a2:	f7fd fdbd 	bl	8002c20 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d80b      	bhi.n	80050ca <HAL_SPI_TransmitReceive+0x21c>
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d007      	beq.n	80050ca <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80050c8:	e109      	b.n	80052de <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d19f      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x166>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d199      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x166>
 80050e0:	e0e3      	b.n	80052aa <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_SPI_TransmitReceive+0x244>
 80050ea:	8a7b      	ldrh	r3, [r7, #18]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	f040 80cf 	bne.w	8005290 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d912      	bls.n	8005122 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	881a      	ldrh	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	1c9a      	adds	r2, r3, #2
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b02      	subs	r3, #2
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005120:	e0b6      	b.n	8005290 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	330c      	adds	r3, #12
 800512c:	7812      	ldrb	r2, [r2, #0]
 800512e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513e:	b29b      	uxth	r3, r3
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005148:	e0a2      	b.n	8005290 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b02      	cmp	r3, #2
 8005156:	d134      	bne.n	80051c2 <HAL_SPI_TransmitReceive+0x314>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d02f      	beq.n	80051c2 <HAL_SPI_TransmitReceive+0x314>
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	2b01      	cmp	r3, #1
 8005166:	d12c      	bne.n	80051c2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b01      	cmp	r3, #1
 8005170:	d912      	bls.n	8005198 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	881a      	ldrh	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	1c9a      	adds	r2, r3, #2
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b02      	subs	r3, #2
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005196:	e012      	b.n	80051be <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	7812      	ldrb	r2, [r2, #0]
 80051a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d148      	bne.n	8005262 <HAL_SPI_TransmitReceive+0x3b4>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d042      	beq.n	8005262 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d923      	bls.n	8005230 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	b292      	uxth	r2, r2
 80051f4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	1c9a      	adds	r2, r3, #2
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b02      	subs	r3, #2
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005218:	b29b      	uxth	r3, r3
 800521a:	2b01      	cmp	r3, #1
 800521c:	d81f      	bhi.n	800525e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800522c:	605a      	str	r2, [r3, #4]
 800522e:	e016      	b.n	800525e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f103 020c 	add.w	r2, r3, #12
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	7812      	ldrb	r2, [r2, #0]
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800525e:	2301      	movs	r3, #1
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005262:	f7fd fcdd 	bl	8002c20 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800526e:	429a      	cmp	r2, r3
 8005270:	d803      	bhi.n	800527a <HAL_SPI_TransmitReceive+0x3cc>
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d102      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x3d2>
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	2b00      	cmp	r3, #0
 800527e:	d107      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800528e:	e026      	b.n	80052de <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	f47f af57 	bne.w	800514a <HAL_SPI_TransmitReceive+0x29c>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f47f af50 	bne.w	800514a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f996 	bl	80055e0 <SPI_EndRxTxTransaction>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d4:	e003      	b.n	80052de <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3728      	adds	r7, #40	; 0x28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	4613      	mov	r3, r2
 8005302:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005304:	f7fd fc8c 	bl	8002c20 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	4413      	add	r3, r2
 8005312:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005314:	f7fd fc84 	bl	8002c20 <HAL_GetTick>
 8005318:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800531a:	4b39      	ldr	r3, [pc, #228]	; (8005400 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	015b      	lsls	r3, r3, #5
 8005320:	0d1b      	lsrs	r3, r3, #20
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	fb02 f303 	mul.w	r3, r2, r3
 8005328:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800532a:	e054      	b.n	80053d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005332:	d050      	beq.n	80053d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005334:	f7fd fc74 	bl	8002c20 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	429a      	cmp	r2, r3
 8005342:	d902      	bls.n	800534a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d13d      	bne.n	80053c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005358:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005362:	d111      	bne.n	8005388 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800536c:	d004      	beq.n	8005378 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005376:	d107      	bne.n	8005388 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005386:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005390:	d10f      	bne.n	80053b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e017      	b.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4013      	ands	r3, r2
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	bf0c      	ite	eq
 80053e6:	2301      	moveq	r3, #1
 80053e8:	2300      	movne	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d19b      	bne.n	800532c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3720      	adds	r7, #32
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000000 	.word	0x20000000

08005404 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08a      	sub	sp, #40	; 0x28
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005416:	f7fd fc03 	bl	8002c20 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	4413      	add	r3, r2
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005426:	f7fd fbfb 	bl	8002c20 <HAL_GetTick>
 800542a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	330c      	adds	r3, #12
 8005432:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005434:	4b3d      	ldr	r3, [pc, #244]	; (800552c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	00da      	lsls	r2, r3, #3
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	0d1b      	lsrs	r3, r3, #20
 8005444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005446:	fb02 f303 	mul.w	r3, r2, r3
 800544a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800544c:	e060      	b.n	8005510 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005454:	d107      	bne.n	8005466 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d104      	bne.n	8005466 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005464:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d050      	beq.n	8005510 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800546e:	f7fd fbd7 	bl	8002c20 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547a:	429a      	cmp	r2, r3
 800547c:	d902      	bls.n	8005484 <SPI_WaitFifoStateUntilTimeout+0x80>
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	2b00      	cmp	r3, #0
 8005482:	d13d      	bne.n	8005500 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005492:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800549c:	d111      	bne.n	80054c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a6:	d004      	beq.n	80054b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b0:	d107      	bne.n	80054c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ca:	d10f      	bne.n	80054ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e010      	b.n	8005522 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	3b01      	subs	r3, #1
 800550e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	4013      	ands	r3, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d196      	bne.n	800544e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3728      	adds	r7, #40	; 0x28
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000000 	.word	0x20000000

08005530 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005544:	d111      	bne.n	800556a <SPI_EndRxTransaction+0x3a>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554e:	d004      	beq.n	800555a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005558:	d107      	bne.n	800556a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005568:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2200      	movs	r2, #0
 8005572:	2180      	movs	r1, #128	; 0x80
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f7ff febd 	bl	80052f4 <SPI_WaitFlagStateUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e023      	b.n	80055d8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005598:	d11d      	bne.n	80055d6 <SPI_EndRxTransaction+0xa6>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a2:	d004      	beq.n	80055ae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ac:	d113      	bne.n	80055d6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f7ff ff22 	bl	8005404 <SPI_WaitFifoStateUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ca:	f043 0220 	orr.w	r2, r3, #32
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e000      	b.n	80055d8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f7ff ff03 	bl	8005404 <SPI_WaitFifoStateUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d007      	beq.n	8005614 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005608:	f043 0220 	orr.w	r2, r3, #32
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e027      	b.n	8005664 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2200      	movs	r2, #0
 800561c:	2180      	movs	r1, #128	; 0x80
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f7ff fe68 	bl	80052f4 <SPI_WaitFlagStateUntilTimeout>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d007      	beq.n	800563a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800562e:	f043 0220 	orr.w	r2, r3, #32
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e014      	b.n	8005664 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2200      	movs	r2, #0
 8005642:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f7ff fedc 	bl	8005404 <SPI_WaitFifoStateUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005656:	f043 0220 	orr.w	r2, r3, #32
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e000      	b.n	8005664 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e040      	b.n	8005700 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fd f8ce 	bl	8002830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2224      	movs	r2, #36	; 0x24
 8005698:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0201 	bic.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fae0 	bl	8005c78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f825 	bl	8005708 <UART_SetConfig>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e01b      	b.n	8005700 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0201 	orr.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fb5f 	bl	8005dbc <UART_CheckIdleState>
 80056fe:	4603      	mov	r3, r0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800570c:	b08a      	sub	sp, #40	; 0x28
 800570e:	af00      	add	r7, sp, #0
 8005710:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	431a      	orrs	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	431a      	orrs	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	4313      	orrs	r3, r2
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	4ba4      	ldr	r3, [pc, #656]	; (80059c8 <UART_SetConfig+0x2c0>)
 8005738:	4013      	ands	r3, r2
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	6812      	ldr	r2, [r2, #0]
 800573e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005740:	430b      	orrs	r3, r1
 8005742:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a99      	ldr	r2, [pc, #612]	; (80059cc <UART_SetConfig+0x2c4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d004      	beq.n	8005774 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005770:	4313      	orrs	r3, r2
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005784:	430a      	orrs	r2, r1
 8005786:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a90      	ldr	r2, [pc, #576]	; (80059d0 <UART_SetConfig+0x2c8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d126      	bne.n	80057e0 <UART_SetConfig+0xd8>
 8005792:	4b90      	ldr	r3, [pc, #576]	; (80059d4 <UART_SetConfig+0x2cc>)
 8005794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005798:	f003 0303 	and.w	r3, r3, #3
 800579c:	2b03      	cmp	r3, #3
 800579e:	d81b      	bhi.n	80057d8 <UART_SetConfig+0xd0>
 80057a0:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <UART_SetConfig+0xa0>)
 80057a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a6:	bf00      	nop
 80057a8:	080057b9 	.word	0x080057b9
 80057ac:	080057c9 	.word	0x080057c9
 80057b0:	080057c1 	.word	0x080057c1
 80057b4:	080057d1 	.word	0x080057d1
 80057b8:	2301      	movs	r3, #1
 80057ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057be:	e116      	b.n	80059ee <UART_SetConfig+0x2e6>
 80057c0:	2302      	movs	r3, #2
 80057c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057c6:	e112      	b.n	80059ee <UART_SetConfig+0x2e6>
 80057c8:	2304      	movs	r3, #4
 80057ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ce:	e10e      	b.n	80059ee <UART_SetConfig+0x2e6>
 80057d0:	2308      	movs	r3, #8
 80057d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057d6:	e10a      	b.n	80059ee <UART_SetConfig+0x2e6>
 80057d8:	2310      	movs	r3, #16
 80057da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057de:	e106      	b.n	80059ee <UART_SetConfig+0x2e6>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a7c      	ldr	r2, [pc, #496]	; (80059d8 <UART_SetConfig+0x2d0>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d138      	bne.n	800585c <UART_SetConfig+0x154>
 80057ea:	4b7a      	ldr	r3, [pc, #488]	; (80059d4 <UART_SetConfig+0x2cc>)
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f0:	f003 030c 	and.w	r3, r3, #12
 80057f4:	2b0c      	cmp	r3, #12
 80057f6:	d82d      	bhi.n	8005854 <UART_SetConfig+0x14c>
 80057f8:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <UART_SetConfig+0xf8>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005835 	.word	0x08005835
 8005804:	08005855 	.word	0x08005855
 8005808:	08005855 	.word	0x08005855
 800580c:	08005855 	.word	0x08005855
 8005810:	08005845 	.word	0x08005845
 8005814:	08005855 	.word	0x08005855
 8005818:	08005855 	.word	0x08005855
 800581c:	08005855 	.word	0x08005855
 8005820:	0800583d 	.word	0x0800583d
 8005824:	08005855 	.word	0x08005855
 8005828:	08005855 	.word	0x08005855
 800582c:	08005855 	.word	0x08005855
 8005830:	0800584d 	.word	0x0800584d
 8005834:	2300      	movs	r3, #0
 8005836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800583a:	e0d8      	b.n	80059ee <UART_SetConfig+0x2e6>
 800583c:	2302      	movs	r3, #2
 800583e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005842:	e0d4      	b.n	80059ee <UART_SetConfig+0x2e6>
 8005844:	2304      	movs	r3, #4
 8005846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800584a:	e0d0      	b.n	80059ee <UART_SetConfig+0x2e6>
 800584c:	2308      	movs	r3, #8
 800584e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005852:	e0cc      	b.n	80059ee <UART_SetConfig+0x2e6>
 8005854:	2310      	movs	r3, #16
 8005856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585a:	e0c8      	b.n	80059ee <UART_SetConfig+0x2e6>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a5e      	ldr	r2, [pc, #376]	; (80059dc <UART_SetConfig+0x2d4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d125      	bne.n	80058b2 <UART_SetConfig+0x1aa>
 8005866:	4b5b      	ldr	r3, [pc, #364]	; (80059d4 <UART_SetConfig+0x2cc>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005870:	2b30      	cmp	r3, #48	; 0x30
 8005872:	d016      	beq.n	80058a2 <UART_SetConfig+0x19a>
 8005874:	2b30      	cmp	r3, #48	; 0x30
 8005876:	d818      	bhi.n	80058aa <UART_SetConfig+0x1a2>
 8005878:	2b20      	cmp	r3, #32
 800587a:	d00a      	beq.n	8005892 <UART_SetConfig+0x18a>
 800587c:	2b20      	cmp	r3, #32
 800587e:	d814      	bhi.n	80058aa <UART_SetConfig+0x1a2>
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <UART_SetConfig+0x182>
 8005884:	2b10      	cmp	r3, #16
 8005886:	d008      	beq.n	800589a <UART_SetConfig+0x192>
 8005888:	e00f      	b.n	80058aa <UART_SetConfig+0x1a2>
 800588a:	2300      	movs	r3, #0
 800588c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005890:	e0ad      	b.n	80059ee <UART_SetConfig+0x2e6>
 8005892:	2302      	movs	r3, #2
 8005894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005898:	e0a9      	b.n	80059ee <UART_SetConfig+0x2e6>
 800589a:	2304      	movs	r3, #4
 800589c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a0:	e0a5      	b.n	80059ee <UART_SetConfig+0x2e6>
 80058a2:	2308      	movs	r3, #8
 80058a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a8:	e0a1      	b.n	80059ee <UART_SetConfig+0x2e6>
 80058aa:	2310      	movs	r3, #16
 80058ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b0:	e09d      	b.n	80059ee <UART_SetConfig+0x2e6>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a4a      	ldr	r2, [pc, #296]	; (80059e0 <UART_SetConfig+0x2d8>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d125      	bne.n	8005908 <UART_SetConfig+0x200>
 80058bc:	4b45      	ldr	r3, [pc, #276]	; (80059d4 <UART_SetConfig+0x2cc>)
 80058be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058c6:	2bc0      	cmp	r3, #192	; 0xc0
 80058c8:	d016      	beq.n	80058f8 <UART_SetConfig+0x1f0>
 80058ca:	2bc0      	cmp	r3, #192	; 0xc0
 80058cc:	d818      	bhi.n	8005900 <UART_SetConfig+0x1f8>
 80058ce:	2b80      	cmp	r3, #128	; 0x80
 80058d0:	d00a      	beq.n	80058e8 <UART_SetConfig+0x1e0>
 80058d2:	2b80      	cmp	r3, #128	; 0x80
 80058d4:	d814      	bhi.n	8005900 <UART_SetConfig+0x1f8>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <UART_SetConfig+0x1d8>
 80058da:	2b40      	cmp	r3, #64	; 0x40
 80058dc:	d008      	beq.n	80058f0 <UART_SetConfig+0x1e8>
 80058de:	e00f      	b.n	8005900 <UART_SetConfig+0x1f8>
 80058e0:	2300      	movs	r3, #0
 80058e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058e6:	e082      	b.n	80059ee <UART_SetConfig+0x2e6>
 80058e8:	2302      	movs	r3, #2
 80058ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ee:	e07e      	b.n	80059ee <UART_SetConfig+0x2e6>
 80058f0:	2304      	movs	r3, #4
 80058f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058f6:	e07a      	b.n	80059ee <UART_SetConfig+0x2e6>
 80058f8:	2308      	movs	r3, #8
 80058fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058fe:	e076      	b.n	80059ee <UART_SetConfig+0x2e6>
 8005900:	2310      	movs	r3, #16
 8005902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005906:	e072      	b.n	80059ee <UART_SetConfig+0x2e6>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a35      	ldr	r2, [pc, #212]	; (80059e4 <UART_SetConfig+0x2dc>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d12a      	bne.n	8005968 <UART_SetConfig+0x260>
 8005912:	4b30      	ldr	r3, [pc, #192]	; (80059d4 <UART_SetConfig+0x2cc>)
 8005914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005920:	d01a      	beq.n	8005958 <UART_SetConfig+0x250>
 8005922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005926:	d81b      	bhi.n	8005960 <UART_SetConfig+0x258>
 8005928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800592c:	d00c      	beq.n	8005948 <UART_SetConfig+0x240>
 800592e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005932:	d815      	bhi.n	8005960 <UART_SetConfig+0x258>
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <UART_SetConfig+0x238>
 8005938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593c:	d008      	beq.n	8005950 <UART_SetConfig+0x248>
 800593e:	e00f      	b.n	8005960 <UART_SetConfig+0x258>
 8005940:	2300      	movs	r3, #0
 8005942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005946:	e052      	b.n	80059ee <UART_SetConfig+0x2e6>
 8005948:	2302      	movs	r3, #2
 800594a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800594e:	e04e      	b.n	80059ee <UART_SetConfig+0x2e6>
 8005950:	2304      	movs	r3, #4
 8005952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005956:	e04a      	b.n	80059ee <UART_SetConfig+0x2e6>
 8005958:	2308      	movs	r3, #8
 800595a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800595e:	e046      	b.n	80059ee <UART_SetConfig+0x2e6>
 8005960:	2310      	movs	r3, #16
 8005962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005966:	e042      	b.n	80059ee <UART_SetConfig+0x2e6>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a17      	ldr	r2, [pc, #92]	; (80059cc <UART_SetConfig+0x2c4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d13a      	bne.n	80059e8 <UART_SetConfig+0x2e0>
 8005972:	4b18      	ldr	r3, [pc, #96]	; (80059d4 <UART_SetConfig+0x2cc>)
 8005974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005978:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800597c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005980:	d01a      	beq.n	80059b8 <UART_SetConfig+0x2b0>
 8005982:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005986:	d81b      	bhi.n	80059c0 <UART_SetConfig+0x2b8>
 8005988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800598c:	d00c      	beq.n	80059a8 <UART_SetConfig+0x2a0>
 800598e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005992:	d815      	bhi.n	80059c0 <UART_SetConfig+0x2b8>
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <UART_SetConfig+0x298>
 8005998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599c:	d008      	beq.n	80059b0 <UART_SetConfig+0x2a8>
 800599e:	e00f      	b.n	80059c0 <UART_SetConfig+0x2b8>
 80059a0:	2300      	movs	r3, #0
 80059a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059a6:	e022      	b.n	80059ee <UART_SetConfig+0x2e6>
 80059a8:	2302      	movs	r3, #2
 80059aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ae:	e01e      	b.n	80059ee <UART_SetConfig+0x2e6>
 80059b0:	2304      	movs	r3, #4
 80059b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b6:	e01a      	b.n	80059ee <UART_SetConfig+0x2e6>
 80059b8:	2308      	movs	r3, #8
 80059ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059be:	e016      	b.n	80059ee <UART_SetConfig+0x2e6>
 80059c0:	2310      	movs	r3, #16
 80059c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c6:	e012      	b.n	80059ee <UART_SetConfig+0x2e6>
 80059c8:	efff69f3 	.word	0xefff69f3
 80059cc:	40008000 	.word	0x40008000
 80059d0:	40013800 	.word	0x40013800
 80059d4:	40021000 	.word	0x40021000
 80059d8:	40004400 	.word	0x40004400
 80059dc:	40004800 	.word	0x40004800
 80059e0:	40004c00 	.word	0x40004c00
 80059e4:	40005000 	.word	0x40005000
 80059e8:	2310      	movs	r3, #16
 80059ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a9f      	ldr	r2, [pc, #636]	; (8005c70 <UART_SetConfig+0x568>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d17a      	bne.n	8005aee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d824      	bhi.n	8005a4a <UART_SetConfig+0x342>
 8005a00:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <UART_SetConfig+0x300>)
 8005a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a06:	bf00      	nop
 8005a08:	08005a2d 	.word	0x08005a2d
 8005a0c:	08005a4b 	.word	0x08005a4b
 8005a10:	08005a35 	.word	0x08005a35
 8005a14:	08005a4b 	.word	0x08005a4b
 8005a18:	08005a3b 	.word	0x08005a3b
 8005a1c:	08005a4b 	.word	0x08005a4b
 8005a20:	08005a4b 	.word	0x08005a4b
 8005a24:	08005a4b 	.word	0x08005a4b
 8005a28:	08005a43 	.word	0x08005a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a2c:	f7fe f9a8 	bl	8003d80 <HAL_RCC_GetPCLK1Freq>
 8005a30:	61f8      	str	r0, [r7, #28]
        break;
 8005a32:	e010      	b.n	8005a56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a34:	4b8f      	ldr	r3, [pc, #572]	; (8005c74 <UART_SetConfig+0x56c>)
 8005a36:	61fb      	str	r3, [r7, #28]
        break;
 8005a38:	e00d      	b.n	8005a56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a3a:	f7fe f909 	bl	8003c50 <HAL_RCC_GetSysClockFreq>
 8005a3e:	61f8      	str	r0, [r7, #28]
        break;
 8005a40:	e009      	b.n	8005a56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a46:	61fb      	str	r3, [r7, #28]
        break;
 8005a48:	e005      	b.n	8005a56 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80fb 	beq.w	8005c54 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	4413      	add	r3, r2
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d305      	bcc.n	8005a7a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d903      	bls.n	8005a82 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a80:	e0e8      	b.n	8005c54 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	2200      	movs	r2, #0
 8005a86:	461c      	mov	r4, r3
 8005a88:	4615      	mov	r5, r2
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	022b      	lsls	r3, r5, #8
 8005a94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a98:	0222      	lsls	r2, r4, #8
 8005a9a:	68f9      	ldr	r1, [r7, #12]
 8005a9c:	6849      	ldr	r1, [r1, #4]
 8005a9e:	0849      	lsrs	r1, r1, #1
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	4688      	mov	r8, r1
 8005aa4:	4681      	mov	r9, r0
 8005aa6:	eb12 0a08 	adds.w	sl, r2, r8
 8005aaa:	eb43 0b09 	adc.w	fp, r3, r9
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	603b      	str	r3, [r7, #0]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005abc:	4650      	mov	r0, sl
 8005abe:	4659      	mov	r1, fp
 8005ac0:	f7fb f8ba 	bl	8000c38 <__aeabi_uldivmod>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4613      	mov	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ad2:	d308      	bcc.n	8005ae6 <UART_SetConfig+0x3de>
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ada:	d204      	bcs.n	8005ae6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	60da      	str	r2, [r3, #12]
 8005ae4:	e0b6      	b.n	8005c54 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005aec:	e0b2      	b.n	8005c54 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af6:	d15e      	bne.n	8005bb6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005af8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d828      	bhi.n	8005b52 <UART_SetConfig+0x44a>
 8005b00:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <UART_SetConfig+0x400>)
 8005b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b06:	bf00      	nop
 8005b08:	08005b2d 	.word	0x08005b2d
 8005b0c:	08005b35 	.word	0x08005b35
 8005b10:	08005b3d 	.word	0x08005b3d
 8005b14:	08005b53 	.word	0x08005b53
 8005b18:	08005b43 	.word	0x08005b43
 8005b1c:	08005b53 	.word	0x08005b53
 8005b20:	08005b53 	.word	0x08005b53
 8005b24:	08005b53 	.word	0x08005b53
 8005b28:	08005b4b 	.word	0x08005b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b2c:	f7fe f928 	bl	8003d80 <HAL_RCC_GetPCLK1Freq>
 8005b30:	61f8      	str	r0, [r7, #28]
        break;
 8005b32:	e014      	b.n	8005b5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b34:	f7fe f93a 	bl	8003dac <HAL_RCC_GetPCLK2Freq>
 8005b38:	61f8      	str	r0, [r7, #28]
        break;
 8005b3a:	e010      	b.n	8005b5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b3c:	4b4d      	ldr	r3, [pc, #308]	; (8005c74 <UART_SetConfig+0x56c>)
 8005b3e:	61fb      	str	r3, [r7, #28]
        break;
 8005b40:	e00d      	b.n	8005b5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b42:	f7fe f885 	bl	8003c50 <HAL_RCC_GetSysClockFreq>
 8005b46:	61f8      	str	r0, [r7, #28]
        break;
 8005b48:	e009      	b.n	8005b5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b4e:	61fb      	str	r3, [r7, #28]
        break;
 8005b50:	e005      	b.n	8005b5e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d077      	beq.n	8005c54 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	005a      	lsls	r2, r3, #1
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	085b      	lsrs	r3, r3, #1
 8005b6e:	441a      	add	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b78:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	2b0f      	cmp	r3, #15
 8005b7e:	d916      	bls.n	8005bae <UART_SetConfig+0x4a6>
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b86:	d212      	bcs.n	8005bae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	f023 030f 	bic.w	r3, r3, #15
 8005b90:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	085b      	lsrs	r3, r3, #1
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	8afb      	ldrh	r3, [r7, #22]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	8afa      	ldrh	r2, [r7, #22]
 8005baa:	60da      	str	r2, [r3, #12]
 8005bac:	e052      	b.n	8005c54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bb4:	e04e      	b.n	8005c54 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d827      	bhi.n	8005c0e <UART_SetConfig+0x506>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0x4bc>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf9 	.word	0x08005bf9
 8005bd0:	08005c0f 	.word	0x08005c0f
 8005bd4:	08005bff 	.word	0x08005bff
 8005bd8:	08005c0f 	.word	0x08005c0f
 8005bdc:	08005c0f 	.word	0x08005c0f
 8005be0:	08005c0f 	.word	0x08005c0f
 8005be4:	08005c07 	.word	0x08005c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be8:	f7fe f8ca 	bl	8003d80 <HAL_RCC_GetPCLK1Freq>
 8005bec:	61f8      	str	r0, [r7, #28]
        break;
 8005bee:	e014      	b.n	8005c1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bf0:	f7fe f8dc 	bl	8003dac <HAL_RCC_GetPCLK2Freq>
 8005bf4:	61f8      	str	r0, [r7, #28]
        break;
 8005bf6:	e010      	b.n	8005c1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf8:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <UART_SetConfig+0x56c>)
 8005bfa:	61fb      	str	r3, [r7, #28]
        break;
 8005bfc:	e00d      	b.n	8005c1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfe:	f7fe f827 	bl	8003c50 <HAL_RCC_GetSysClockFreq>
 8005c02:	61f8      	str	r0, [r7, #28]
        break;
 8005c04:	e009      	b.n	8005c1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c0a:	61fb      	str	r3, [r7, #28]
        break;
 8005c0c:	e005      	b.n	8005c1a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c18:	bf00      	nop
    }

    if (pclk != 0U)
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d019      	beq.n	8005c54 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	085a      	lsrs	r2, r3, #1
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	441a      	add	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	2b0f      	cmp	r3, #15
 8005c38:	d909      	bls.n	8005c4e <UART_SetConfig+0x546>
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c40:	d205      	bcs.n	8005c4e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60da      	str	r2, [r3, #12]
 8005c4c:	e002      	b.n	8005c54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3728      	adds	r7, #40	; 0x28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c6e:	bf00      	nop
 8005c70:	40008000 	.word	0x40008000
 8005c74:	00f42400 	.word	0x00f42400

08005c78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00a      	beq.n	8005ce6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	f003 0304 	and.w	r3, r3, #4
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	f003 0310 	and.w	r3, r3, #16
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d01a      	beq.n	8005d8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d76:	d10a      	bne.n	8005d8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	605a      	str	r2, [r3, #4]
  }
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b098      	sub	sp, #96	; 0x60
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dcc:	f7fc ff28 	bl	8002c20 <HAL_GetTick>
 8005dd0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0308 	and.w	r3, r3, #8
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d12e      	bne.n	8005e3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de8:	2200      	movs	r2, #0
 8005dea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f88c 	bl	8005f0c <UART_WaitOnFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d021      	beq.n	8005e3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	e853 3f00 	ldrex	r3, [r3]
 8005e06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e0e:	653b      	str	r3, [r7, #80]	; 0x50
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	461a      	mov	r2, r3
 8005e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e18:	647b      	str	r3, [r7, #68]	; 0x44
 8005e1a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e20:	e841 2300 	strex	r3, r2, [r1]
 8005e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e6      	bne.n	8005dfa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e062      	b.n	8005f04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d149      	bne.n	8005ee0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e54:	2200      	movs	r2, #0
 8005e56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f856 	bl	8005f0c <UART_WaitOnFlagUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d03c      	beq.n	8005ee0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	e853 3f00 	ldrex	r3, [r3]
 8005e72:	623b      	str	r3, [r7, #32]
   return(result);
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e84:	633b      	str	r3, [r7, #48]	; 0x30
 8005e86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e8c:	e841 2300 	strex	r3, r2, [r1]
 8005e90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e6      	bne.n	8005e66 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0301 	bic.w	r3, r3, #1
 8005eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eb8:	61fa      	str	r2, [r7, #28]
 8005eba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	69b9      	ldr	r1, [r7, #24]
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e5      	bne.n	8005e98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e011      	b.n	8005f04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3758      	adds	r7, #88	; 0x58
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f1c:	e049      	b.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f24:	d045      	beq.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f26:	f7fc fe7b 	bl	8002c20 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d302      	bcc.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e048      	b.n	8005fd2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d031      	beq.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d110      	bne.n	8005f7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2208      	movs	r2, #8
 8005f62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 f838 	bl	8005fda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2208      	movs	r2, #8
 8005f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e029      	b.n	8005fd2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f8c:	d111      	bne.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f81e 	bl	8005fda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e00f      	b.n	8005fd2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	bf0c      	ite	eq
 8005fc2:	2301      	moveq	r3, #1
 8005fc4:	2300      	movne	r3, #0
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d0a6      	beq.n	8005f1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b095      	sub	sp, #84	; 0x54
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006000:	643b      	str	r3, [r7, #64]	; 0x40
 8006002:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006006:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800600e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e6      	bne.n	8005fe2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3308      	adds	r3, #8
 800601a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	61fb      	str	r3, [r7, #28]
   return(result);
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f023 0301 	bic.w	r3, r3, #1
 800602a:	64bb      	str	r3, [r7, #72]	; 0x48
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3308      	adds	r3, #8
 8006032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006034:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800603a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e5      	bne.n	8006014 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800604c:	2b01      	cmp	r3, #1
 800604e:	d118      	bne.n	8006082 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	60bb      	str	r3, [r7, #8]
   return(result);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f023 0310 	bic.w	r3, r3, #16
 8006064:	647b      	str	r3, [r7, #68]	; 0x44
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	6979      	ldr	r1, [r7, #20]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	613b      	str	r3, [r7, #16]
   return(result);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e6      	bne.n	8006050 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006096:	bf00      	nop
 8006098:	3754      	adds	r7, #84	; 0x54
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
	...

080060a4 <rand>:
 80060a4:	4b16      	ldr	r3, [pc, #88]	; (8006100 <rand+0x5c>)
 80060a6:	b510      	push	{r4, lr}
 80060a8:	681c      	ldr	r4, [r3, #0]
 80060aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80060ac:	b9b3      	cbnz	r3, 80060dc <rand+0x38>
 80060ae:	2018      	movs	r0, #24
 80060b0:	f000 fa22 	bl	80064f8 <malloc>
 80060b4:	4602      	mov	r2, r0
 80060b6:	6320      	str	r0, [r4, #48]	; 0x30
 80060b8:	b920      	cbnz	r0, 80060c4 <rand+0x20>
 80060ba:	4b12      	ldr	r3, [pc, #72]	; (8006104 <rand+0x60>)
 80060bc:	4812      	ldr	r0, [pc, #72]	; (8006108 <rand+0x64>)
 80060be:	2152      	movs	r1, #82	; 0x52
 80060c0:	f000 f9b0 	bl	8006424 <__assert_func>
 80060c4:	4911      	ldr	r1, [pc, #68]	; (800610c <rand+0x68>)
 80060c6:	4b12      	ldr	r3, [pc, #72]	; (8006110 <rand+0x6c>)
 80060c8:	e9c0 1300 	strd	r1, r3, [r0]
 80060cc:	4b11      	ldr	r3, [pc, #68]	; (8006114 <rand+0x70>)
 80060ce:	6083      	str	r3, [r0, #8]
 80060d0:	230b      	movs	r3, #11
 80060d2:	8183      	strh	r3, [r0, #12]
 80060d4:	2100      	movs	r1, #0
 80060d6:	2001      	movs	r0, #1
 80060d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80060dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80060de:	480e      	ldr	r0, [pc, #56]	; (8006118 <rand+0x74>)
 80060e0:	690b      	ldr	r3, [r1, #16]
 80060e2:	694c      	ldr	r4, [r1, #20]
 80060e4:	4a0d      	ldr	r2, [pc, #52]	; (800611c <rand+0x78>)
 80060e6:	4358      	muls	r0, r3
 80060e8:	fb02 0004 	mla	r0, r2, r4, r0
 80060ec:	fba3 3202 	umull	r3, r2, r3, r2
 80060f0:	3301      	adds	r3, #1
 80060f2:	eb40 0002 	adc.w	r0, r0, r2
 80060f6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80060fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80060fe:	bd10      	pop	{r4, pc}
 8006100:	20000064 	.word	0x20000064
 8006104:	0800843c 	.word	0x0800843c
 8006108:	08008453 	.word	0x08008453
 800610c:	abcd330e 	.word	0xabcd330e
 8006110:	e66d1234 	.word	0xe66d1234
 8006114:	0005deec 	.word	0x0005deec
 8006118:	5851f42d 	.word	0x5851f42d
 800611c:	4c957f2d 	.word	0x4c957f2d

08006120 <std>:
 8006120:	2300      	movs	r3, #0
 8006122:	b510      	push	{r4, lr}
 8006124:	4604      	mov	r4, r0
 8006126:	e9c0 3300 	strd	r3, r3, [r0]
 800612a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800612e:	6083      	str	r3, [r0, #8]
 8006130:	8181      	strh	r1, [r0, #12]
 8006132:	6643      	str	r3, [r0, #100]	; 0x64
 8006134:	81c2      	strh	r2, [r0, #14]
 8006136:	6183      	str	r3, [r0, #24]
 8006138:	4619      	mov	r1, r3
 800613a:	2208      	movs	r2, #8
 800613c:	305c      	adds	r0, #92	; 0x5c
 800613e:	f000 f8f4 	bl	800632a <memset>
 8006142:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <std+0x58>)
 8006144:	6263      	str	r3, [r4, #36]	; 0x24
 8006146:	4b0d      	ldr	r3, [pc, #52]	; (800617c <std+0x5c>)
 8006148:	62a3      	str	r3, [r4, #40]	; 0x28
 800614a:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <std+0x60>)
 800614c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800614e:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <std+0x64>)
 8006150:	6323      	str	r3, [r4, #48]	; 0x30
 8006152:	4b0d      	ldr	r3, [pc, #52]	; (8006188 <std+0x68>)
 8006154:	6224      	str	r4, [r4, #32]
 8006156:	429c      	cmp	r4, r3
 8006158:	d006      	beq.n	8006168 <std+0x48>
 800615a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800615e:	4294      	cmp	r4, r2
 8006160:	d002      	beq.n	8006168 <std+0x48>
 8006162:	33d0      	adds	r3, #208	; 0xd0
 8006164:	429c      	cmp	r4, r3
 8006166:	d105      	bne.n	8006174 <std+0x54>
 8006168:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800616c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006170:	f000 b954 	b.w	800641c <__retarget_lock_init_recursive>
 8006174:	bd10      	pop	{r4, pc}
 8006176:	bf00      	nop
 8006178:	080062a5 	.word	0x080062a5
 800617c:	080062c7 	.word	0x080062c7
 8006180:	080062ff 	.word	0x080062ff
 8006184:	08006323 	.word	0x08006323
 8006188:	2000126c 	.word	0x2000126c

0800618c <stdio_exit_handler>:
 800618c:	4a02      	ldr	r2, [pc, #8]	; (8006198 <stdio_exit_handler+0xc>)
 800618e:	4903      	ldr	r1, [pc, #12]	; (800619c <stdio_exit_handler+0x10>)
 8006190:	4803      	ldr	r0, [pc, #12]	; (80061a0 <stdio_exit_handler+0x14>)
 8006192:	f000 b869 	b.w	8006268 <_fwalk_sglue>
 8006196:	bf00      	nop
 8006198:	2000000c 	.word	0x2000000c
 800619c:	0800676d 	.word	0x0800676d
 80061a0:	20000018 	.word	0x20000018

080061a4 <cleanup_stdio>:
 80061a4:	6841      	ldr	r1, [r0, #4]
 80061a6:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <cleanup_stdio+0x34>)
 80061a8:	4299      	cmp	r1, r3
 80061aa:	b510      	push	{r4, lr}
 80061ac:	4604      	mov	r4, r0
 80061ae:	d001      	beq.n	80061b4 <cleanup_stdio+0x10>
 80061b0:	f000 fadc 	bl	800676c <_fflush_r>
 80061b4:	68a1      	ldr	r1, [r4, #8]
 80061b6:	4b09      	ldr	r3, [pc, #36]	; (80061dc <cleanup_stdio+0x38>)
 80061b8:	4299      	cmp	r1, r3
 80061ba:	d002      	beq.n	80061c2 <cleanup_stdio+0x1e>
 80061bc:	4620      	mov	r0, r4
 80061be:	f000 fad5 	bl	800676c <_fflush_r>
 80061c2:	68e1      	ldr	r1, [r4, #12]
 80061c4:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <cleanup_stdio+0x3c>)
 80061c6:	4299      	cmp	r1, r3
 80061c8:	d004      	beq.n	80061d4 <cleanup_stdio+0x30>
 80061ca:	4620      	mov	r0, r4
 80061cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d0:	f000 bacc 	b.w	800676c <_fflush_r>
 80061d4:	bd10      	pop	{r4, pc}
 80061d6:	bf00      	nop
 80061d8:	2000126c 	.word	0x2000126c
 80061dc:	200012d4 	.word	0x200012d4
 80061e0:	2000133c 	.word	0x2000133c

080061e4 <global_stdio_init.part.0>:
 80061e4:	b510      	push	{r4, lr}
 80061e6:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <global_stdio_init.part.0+0x30>)
 80061e8:	4c0b      	ldr	r4, [pc, #44]	; (8006218 <global_stdio_init.part.0+0x34>)
 80061ea:	4a0c      	ldr	r2, [pc, #48]	; (800621c <global_stdio_init.part.0+0x38>)
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	4620      	mov	r0, r4
 80061f0:	2200      	movs	r2, #0
 80061f2:	2104      	movs	r1, #4
 80061f4:	f7ff ff94 	bl	8006120 <std>
 80061f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80061fc:	2201      	movs	r2, #1
 80061fe:	2109      	movs	r1, #9
 8006200:	f7ff ff8e 	bl	8006120 <std>
 8006204:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006208:	2202      	movs	r2, #2
 800620a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800620e:	2112      	movs	r1, #18
 8006210:	f7ff bf86 	b.w	8006120 <std>
 8006214:	200013a4 	.word	0x200013a4
 8006218:	2000126c 	.word	0x2000126c
 800621c:	0800618d 	.word	0x0800618d

08006220 <__sfp_lock_acquire>:
 8006220:	4801      	ldr	r0, [pc, #4]	; (8006228 <__sfp_lock_acquire+0x8>)
 8006222:	f000 b8fc 	b.w	800641e <__retarget_lock_acquire_recursive>
 8006226:	bf00      	nop
 8006228:	200013ad 	.word	0x200013ad

0800622c <__sfp_lock_release>:
 800622c:	4801      	ldr	r0, [pc, #4]	; (8006234 <__sfp_lock_release+0x8>)
 800622e:	f000 b8f7 	b.w	8006420 <__retarget_lock_release_recursive>
 8006232:	bf00      	nop
 8006234:	200013ad 	.word	0x200013ad

08006238 <__sinit>:
 8006238:	b510      	push	{r4, lr}
 800623a:	4604      	mov	r4, r0
 800623c:	f7ff fff0 	bl	8006220 <__sfp_lock_acquire>
 8006240:	6a23      	ldr	r3, [r4, #32]
 8006242:	b11b      	cbz	r3, 800624c <__sinit+0x14>
 8006244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006248:	f7ff bff0 	b.w	800622c <__sfp_lock_release>
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <__sinit+0x28>)
 800624e:	6223      	str	r3, [r4, #32]
 8006250:	4b04      	ldr	r3, [pc, #16]	; (8006264 <__sinit+0x2c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f5      	bne.n	8006244 <__sinit+0xc>
 8006258:	f7ff ffc4 	bl	80061e4 <global_stdio_init.part.0>
 800625c:	e7f2      	b.n	8006244 <__sinit+0xc>
 800625e:	bf00      	nop
 8006260:	080061a5 	.word	0x080061a5
 8006264:	200013a4 	.word	0x200013a4

08006268 <_fwalk_sglue>:
 8006268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800626c:	4607      	mov	r7, r0
 800626e:	4688      	mov	r8, r1
 8006270:	4614      	mov	r4, r2
 8006272:	2600      	movs	r6, #0
 8006274:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006278:	f1b9 0901 	subs.w	r9, r9, #1
 800627c:	d505      	bpl.n	800628a <_fwalk_sglue+0x22>
 800627e:	6824      	ldr	r4, [r4, #0]
 8006280:	2c00      	cmp	r4, #0
 8006282:	d1f7      	bne.n	8006274 <_fwalk_sglue+0xc>
 8006284:	4630      	mov	r0, r6
 8006286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800628a:	89ab      	ldrh	r3, [r5, #12]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d907      	bls.n	80062a0 <_fwalk_sglue+0x38>
 8006290:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006294:	3301      	adds	r3, #1
 8006296:	d003      	beq.n	80062a0 <_fwalk_sglue+0x38>
 8006298:	4629      	mov	r1, r5
 800629a:	4638      	mov	r0, r7
 800629c:	47c0      	blx	r8
 800629e:	4306      	orrs	r6, r0
 80062a0:	3568      	adds	r5, #104	; 0x68
 80062a2:	e7e9      	b.n	8006278 <_fwalk_sglue+0x10>

080062a4 <__sread>:
 80062a4:	b510      	push	{r4, lr}
 80062a6:	460c      	mov	r4, r1
 80062a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ac:	f000 f868 	bl	8006380 <_read_r>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	bfab      	itete	ge
 80062b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062b6:	89a3      	ldrhlt	r3, [r4, #12]
 80062b8:	181b      	addge	r3, r3, r0
 80062ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062be:	bfac      	ite	ge
 80062c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80062c2:	81a3      	strhlt	r3, [r4, #12]
 80062c4:	bd10      	pop	{r4, pc}

080062c6 <__swrite>:
 80062c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ca:	461f      	mov	r7, r3
 80062cc:	898b      	ldrh	r3, [r1, #12]
 80062ce:	05db      	lsls	r3, r3, #23
 80062d0:	4605      	mov	r5, r0
 80062d2:	460c      	mov	r4, r1
 80062d4:	4616      	mov	r6, r2
 80062d6:	d505      	bpl.n	80062e4 <__swrite+0x1e>
 80062d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062dc:	2302      	movs	r3, #2
 80062de:	2200      	movs	r2, #0
 80062e0:	f000 f83c 	bl	800635c <_lseek_r>
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062ee:	81a3      	strh	r3, [r4, #12]
 80062f0:	4632      	mov	r2, r6
 80062f2:	463b      	mov	r3, r7
 80062f4:	4628      	mov	r0, r5
 80062f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062fa:	f000 b853 	b.w	80063a4 <_write_r>

080062fe <__sseek>:
 80062fe:	b510      	push	{r4, lr}
 8006300:	460c      	mov	r4, r1
 8006302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006306:	f000 f829 	bl	800635c <_lseek_r>
 800630a:	1c43      	adds	r3, r0, #1
 800630c:	89a3      	ldrh	r3, [r4, #12]
 800630e:	bf15      	itete	ne
 8006310:	6560      	strne	r0, [r4, #84]	; 0x54
 8006312:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006316:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800631a:	81a3      	strheq	r3, [r4, #12]
 800631c:	bf18      	it	ne
 800631e:	81a3      	strhne	r3, [r4, #12]
 8006320:	bd10      	pop	{r4, pc}

08006322 <__sclose>:
 8006322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006326:	f000 b809 	b.w	800633c <_close_r>

0800632a <memset>:
 800632a:	4402      	add	r2, r0
 800632c:	4603      	mov	r3, r0
 800632e:	4293      	cmp	r3, r2
 8006330:	d100      	bne.n	8006334 <memset+0xa>
 8006332:	4770      	bx	lr
 8006334:	f803 1b01 	strb.w	r1, [r3], #1
 8006338:	e7f9      	b.n	800632e <memset+0x4>
	...

0800633c <_close_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	4d06      	ldr	r5, [pc, #24]	; (8006358 <_close_r+0x1c>)
 8006340:	2300      	movs	r3, #0
 8006342:	4604      	mov	r4, r0
 8006344:	4608      	mov	r0, r1
 8006346:	602b      	str	r3, [r5, #0]
 8006348:	f7fc fb53 	bl	80029f2 <_close>
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	d102      	bne.n	8006356 <_close_r+0x1a>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	b103      	cbz	r3, 8006356 <_close_r+0x1a>
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	bd38      	pop	{r3, r4, r5, pc}
 8006358:	200013a8 	.word	0x200013a8

0800635c <_lseek_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4d07      	ldr	r5, [pc, #28]	; (800637c <_lseek_r+0x20>)
 8006360:	4604      	mov	r4, r0
 8006362:	4608      	mov	r0, r1
 8006364:	4611      	mov	r1, r2
 8006366:	2200      	movs	r2, #0
 8006368:	602a      	str	r2, [r5, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	f7fc fb68 	bl	8002a40 <_lseek>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d102      	bne.n	800637a <_lseek_r+0x1e>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	b103      	cbz	r3, 800637a <_lseek_r+0x1e>
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	bd38      	pop	{r3, r4, r5, pc}
 800637c:	200013a8 	.word	0x200013a8

08006380 <_read_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4d07      	ldr	r5, [pc, #28]	; (80063a0 <_read_r+0x20>)
 8006384:	4604      	mov	r4, r0
 8006386:	4608      	mov	r0, r1
 8006388:	4611      	mov	r1, r2
 800638a:	2200      	movs	r2, #0
 800638c:	602a      	str	r2, [r5, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	f7fc faf6 	bl	8002980 <_read>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d102      	bne.n	800639e <_read_r+0x1e>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	b103      	cbz	r3, 800639e <_read_r+0x1e>
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	bd38      	pop	{r3, r4, r5, pc}
 80063a0:	200013a8 	.word	0x200013a8

080063a4 <_write_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4d07      	ldr	r5, [pc, #28]	; (80063c4 <_write_r+0x20>)
 80063a8:	4604      	mov	r4, r0
 80063aa:	4608      	mov	r0, r1
 80063ac:	4611      	mov	r1, r2
 80063ae:	2200      	movs	r2, #0
 80063b0:	602a      	str	r2, [r5, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	f7fc fb01 	bl	80029ba <_write>
 80063b8:	1c43      	adds	r3, r0, #1
 80063ba:	d102      	bne.n	80063c2 <_write_r+0x1e>
 80063bc:	682b      	ldr	r3, [r5, #0]
 80063be:	b103      	cbz	r3, 80063c2 <_write_r+0x1e>
 80063c0:	6023      	str	r3, [r4, #0]
 80063c2:	bd38      	pop	{r3, r4, r5, pc}
 80063c4:	200013a8 	.word	0x200013a8

080063c8 <__errno>:
 80063c8:	4b01      	ldr	r3, [pc, #4]	; (80063d0 <__errno+0x8>)
 80063ca:	6818      	ldr	r0, [r3, #0]
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	20000064 	.word	0x20000064

080063d4 <__libc_init_array>:
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	4d0d      	ldr	r5, [pc, #52]	; (800640c <__libc_init_array+0x38>)
 80063d8:	4c0d      	ldr	r4, [pc, #52]	; (8006410 <__libc_init_array+0x3c>)
 80063da:	1b64      	subs	r4, r4, r5
 80063dc:	10a4      	asrs	r4, r4, #2
 80063de:	2600      	movs	r6, #0
 80063e0:	42a6      	cmp	r6, r4
 80063e2:	d109      	bne.n	80063f8 <__libc_init_array+0x24>
 80063e4:	4d0b      	ldr	r5, [pc, #44]	; (8006414 <__libc_init_array+0x40>)
 80063e6:	4c0c      	ldr	r4, [pc, #48]	; (8006418 <__libc_init_array+0x44>)
 80063e8:	f001 ffde 	bl	80083a8 <_init>
 80063ec:	1b64      	subs	r4, r4, r5
 80063ee:	10a4      	asrs	r4, r4, #2
 80063f0:	2600      	movs	r6, #0
 80063f2:	42a6      	cmp	r6, r4
 80063f4:	d105      	bne.n	8006402 <__libc_init_array+0x2e>
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
 80063f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063fc:	4798      	blx	r3
 80063fe:	3601      	adds	r6, #1
 8006400:	e7ee      	b.n	80063e0 <__libc_init_array+0xc>
 8006402:	f855 3b04 	ldr.w	r3, [r5], #4
 8006406:	4798      	blx	r3
 8006408:	3601      	adds	r6, #1
 800640a:	e7f2      	b.n	80063f2 <__libc_init_array+0x1e>
 800640c:	08008700 	.word	0x08008700
 8006410:	08008700 	.word	0x08008700
 8006414:	08008700 	.word	0x08008700
 8006418:	08008704 	.word	0x08008704

0800641c <__retarget_lock_init_recursive>:
 800641c:	4770      	bx	lr

0800641e <__retarget_lock_acquire_recursive>:
 800641e:	4770      	bx	lr

08006420 <__retarget_lock_release_recursive>:
 8006420:	4770      	bx	lr
	...

08006424 <__assert_func>:
 8006424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006426:	4614      	mov	r4, r2
 8006428:	461a      	mov	r2, r3
 800642a:	4b09      	ldr	r3, [pc, #36]	; (8006450 <__assert_func+0x2c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4605      	mov	r5, r0
 8006430:	68d8      	ldr	r0, [r3, #12]
 8006432:	b14c      	cbz	r4, 8006448 <__assert_func+0x24>
 8006434:	4b07      	ldr	r3, [pc, #28]	; (8006454 <__assert_func+0x30>)
 8006436:	9100      	str	r1, [sp, #0]
 8006438:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800643c:	4906      	ldr	r1, [pc, #24]	; (8006458 <__assert_func+0x34>)
 800643e:	462b      	mov	r3, r5
 8006440:	f000 f9bc 	bl	80067bc <fiprintf>
 8006444:	f000 f9dc 	bl	8006800 <abort>
 8006448:	4b04      	ldr	r3, [pc, #16]	; (800645c <__assert_func+0x38>)
 800644a:	461c      	mov	r4, r3
 800644c:	e7f3      	b.n	8006436 <__assert_func+0x12>
 800644e:	bf00      	nop
 8006450:	20000064 	.word	0x20000064
 8006454:	080084ab 	.word	0x080084ab
 8006458:	080084b8 	.word	0x080084b8
 800645c:	080084e6 	.word	0x080084e6

08006460 <_free_r>:
 8006460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006462:	2900      	cmp	r1, #0
 8006464:	d044      	beq.n	80064f0 <_free_r+0x90>
 8006466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800646a:	9001      	str	r0, [sp, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f1a1 0404 	sub.w	r4, r1, #4
 8006472:	bfb8      	it	lt
 8006474:	18e4      	addlt	r4, r4, r3
 8006476:	f000 f8e7 	bl	8006648 <__malloc_lock>
 800647a:	4a1e      	ldr	r2, [pc, #120]	; (80064f4 <_free_r+0x94>)
 800647c:	9801      	ldr	r0, [sp, #4]
 800647e:	6813      	ldr	r3, [r2, #0]
 8006480:	b933      	cbnz	r3, 8006490 <_free_r+0x30>
 8006482:	6063      	str	r3, [r4, #4]
 8006484:	6014      	str	r4, [r2, #0]
 8006486:	b003      	add	sp, #12
 8006488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800648c:	f000 b8e2 	b.w	8006654 <__malloc_unlock>
 8006490:	42a3      	cmp	r3, r4
 8006492:	d908      	bls.n	80064a6 <_free_r+0x46>
 8006494:	6825      	ldr	r5, [r4, #0]
 8006496:	1961      	adds	r1, r4, r5
 8006498:	428b      	cmp	r3, r1
 800649a:	bf01      	itttt	eq
 800649c:	6819      	ldreq	r1, [r3, #0]
 800649e:	685b      	ldreq	r3, [r3, #4]
 80064a0:	1949      	addeq	r1, r1, r5
 80064a2:	6021      	streq	r1, [r4, #0]
 80064a4:	e7ed      	b.n	8006482 <_free_r+0x22>
 80064a6:	461a      	mov	r2, r3
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	b10b      	cbz	r3, 80064b0 <_free_r+0x50>
 80064ac:	42a3      	cmp	r3, r4
 80064ae:	d9fa      	bls.n	80064a6 <_free_r+0x46>
 80064b0:	6811      	ldr	r1, [r2, #0]
 80064b2:	1855      	adds	r5, r2, r1
 80064b4:	42a5      	cmp	r5, r4
 80064b6:	d10b      	bne.n	80064d0 <_free_r+0x70>
 80064b8:	6824      	ldr	r4, [r4, #0]
 80064ba:	4421      	add	r1, r4
 80064bc:	1854      	adds	r4, r2, r1
 80064be:	42a3      	cmp	r3, r4
 80064c0:	6011      	str	r1, [r2, #0]
 80064c2:	d1e0      	bne.n	8006486 <_free_r+0x26>
 80064c4:	681c      	ldr	r4, [r3, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	6053      	str	r3, [r2, #4]
 80064ca:	440c      	add	r4, r1
 80064cc:	6014      	str	r4, [r2, #0]
 80064ce:	e7da      	b.n	8006486 <_free_r+0x26>
 80064d0:	d902      	bls.n	80064d8 <_free_r+0x78>
 80064d2:	230c      	movs	r3, #12
 80064d4:	6003      	str	r3, [r0, #0]
 80064d6:	e7d6      	b.n	8006486 <_free_r+0x26>
 80064d8:	6825      	ldr	r5, [r4, #0]
 80064da:	1961      	adds	r1, r4, r5
 80064dc:	428b      	cmp	r3, r1
 80064de:	bf04      	itt	eq
 80064e0:	6819      	ldreq	r1, [r3, #0]
 80064e2:	685b      	ldreq	r3, [r3, #4]
 80064e4:	6063      	str	r3, [r4, #4]
 80064e6:	bf04      	itt	eq
 80064e8:	1949      	addeq	r1, r1, r5
 80064ea:	6021      	streq	r1, [r4, #0]
 80064ec:	6054      	str	r4, [r2, #4]
 80064ee:	e7ca      	b.n	8006486 <_free_r+0x26>
 80064f0:	b003      	add	sp, #12
 80064f2:	bd30      	pop	{r4, r5, pc}
 80064f4:	200013b0 	.word	0x200013b0

080064f8 <malloc>:
 80064f8:	4b02      	ldr	r3, [pc, #8]	; (8006504 <malloc+0xc>)
 80064fa:	4601      	mov	r1, r0
 80064fc:	6818      	ldr	r0, [r3, #0]
 80064fe:	f000 b823 	b.w	8006548 <_malloc_r>
 8006502:	bf00      	nop
 8006504:	20000064 	.word	0x20000064

08006508 <sbrk_aligned>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	4e0e      	ldr	r6, [pc, #56]	; (8006544 <sbrk_aligned+0x3c>)
 800650c:	460c      	mov	r4, r1
 800650e:	6831      	ldr	r1, [r6, #0]
 8006510:	4605      	mov	r5, r0
 8006512:	b911      	cbnz	r1, 800651a <sbrk_aligned+0x12>
 8006514:	f000 f964 	bl	80067e0 <_sbrk_r>
 8006518:	6030      	str	r0, [r6, #0]
 800651a:	4621      	mov	r1, r4
 800651c:	4628      	mov	r0, r5
 800651e:	f000 f95f 	bl	80067e0 <_sbrk_r>
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	d00a      	beq.n	800653c <sbrk_aligned+0x34>
 8006526:	1cc4      	adds	r4, r0, #3
 8006528:	f024 0403 	bic.w	r4, r4, #3
 800652c:	42a0      	cmp	r0, r4
 800652e:	d007      	beq.n	8006540 <sbrk_aligned+0x38>
 8006530:	1a21      	subs	r1, r4, r0
 8006532:	4628      	mov	r0, r5
 8006534:	f000 f954 	bl	80067e0 <_sbrk_r>
 8006538:	3001      	adds	r0, #1
 800653a:	d101      	bne.n	8006540 <sbrk_aligned+0x38>
 800653c:	f04f 34ff 	mov.w	r4, #4294967295
 8006540:	4620      	mov	r0, r4
 8006542:	bd70      	pop	{r4, r5, r6, pc}
 8006544:	200013b4 	.word	0x200013b4

08006548 <_malloc_r>:
 8006548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800654c:	1ccd      	adds	r5, r1, #3
 800654e:	f025 0503 	bic.w	r5, r5, #3
 8006552:	3508      	adds	r5, #8
 8006554:	2d0c      	cmp	r5, #12
 8006556:	bf38      	it	cc
 8006558:	250c      	movcc	r5, #12
 800655a:	2d00      	cmp	r5, #0
 800655c:	4607      	mov	r7, r0
 800655e:	db01      	blt.n	8006564 <_malloc_r+0x1c>
 8006560:	42a9      	cmp	r1, r5
 8006562:	d905      	bls.n	8006570 <_malloc_r+0x28>
 8006564:	230c      	movs	r3, #12
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	2600      	movs	r6, #0
 800656a:	4630      	mov	r0, r6
 800656c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006570:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006644 <_malloc_r+0xfc>
 8006574:	f000 f868 	bl	8006648 <__malloc_lock>
 8006578:	f8d8 3000 	ldr.w	r3, [r8]
 800657c:	461c      	mov	r4, r3
 800657e:	bb5c      	cbnz	r4, 80065d8 <_malloc_r+0x90>
 8006580:	4629      	mov	r1, r5
 8006582:	4638      	mov	r0, r7
 8006584:	f7ff ffc0 	bl	8006508 <sbrk_aligned>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	4604      	mov	r4, r0
 800658c:	d155      	bne.n	800663a <_malloc_r+0xf2>
 800658e:	f8d8 4000 	ldr.w	r4, [r8]
 8006592:	4626      	mov	r6, r4
 8006594:	2e00      	cmp	r6, #0
 8006596:	d145      	bne.n	8006624 <_malloc_r+0xdc>
 8006598:	2c00      	cmp	r4, #0
 800659a:	d048      	beq.n	800662e <_malloc_r+0xe6>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	4631      	mov	r1, r6
 80065a0:	4638      	mov	r0, r7
 80065a2:	eb04 0903 	add.w	r9, r4, r3
 80065a6:	f000 f91b 	bl	80067e0 <_sbrk_r>
 80065aa:	4581      	cmp	r9, r0
 80065ac:	d13f      	bne.n	800662e <_malloc_r+0xe6>
 80065ae:	6821      	ldr	r1, [r4, #0]
 80065b0:	1a6d      	subs	r5, r5, r1
 80065b2:	4629      	mov	r1, r5
 80065b4:	4638      	mov	r0, r7
 80065b6:	f7ff ffa7 	bl	8006508 <sbrk_aligned>
 80065ba:	3001      	adds	r0, #1
 80065bc:	d037      	beq.n	800662e <_malloc_r+0xe6>
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	442b      	add	r3, r5
 80065c2:	6023      	str	r3, [r4, #0]
 80065c4:	f8d8 3000 	ldr.w	r3, [r8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d038      	beq.n	800663e <_malloc_r+0xf6>
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	42a2      	cmp	r2, r4
 80065d0:	d12b      	bne.n	800662a <_malloc_r+0xe2>
 80065d2:	2200      	movs	r2, #0
 80065d4:	605a      	str	r2, [r3, #4]
 80065d6:	e00f      	b.n	80065f8 <_malloc_r+0xb0>
 80065d8:	6822      	ldr	r2, [r4, #0]
 80065da:	1b52      	subs	r2, r2, r5
 80065dc:	d41f      	bmi.n	800661e <_malloc_r+0xd6>
 80065de:	2a0b      	cmp	r2, #11
 80065e0:	d917      	bls.n	8006612 <_malloc_r+0xca>
 80065e2:	1961      	adds	r1, r4, r5
 80065e4:	42a3      	cmp	r3, r4
 80065e6:	6025      	str	r5, [r4, #0]
 80065e8:	bf18      	it	ne
 80065ea:	6059      	strne	r1, [r3, #4]
 80065ec:	6863      	ldr	r3, [r4, #4]
 80065ee:	bf08      	it	eq
 80065f0:	f8c8 1000 	streq.w	r1, [r8]
 80065f4:	5162      	str	r2, [r4, r5]
 80065f6:	604b      	str	r3, [r1, #4]
 80065f8:	4638      	mov	r0, r7
 80065fa:	f104 060b 	add.w	r6, r4, #11
 80065fe:	f000 f829 	bl	8006654 <__malloc_unlock>
 8006602:	f026 0607 	bic.w	r6, r6, #7
 8006606:	1d23      	adds	r3, r4, #4
 8006608:	1af2      	subs	r2, r6, r3
 800660a:	d0ae      	beq.n	800656a <_malloc_r+0x22>
 800660c:	1b9b      	subs	r3, r3, r6
 800660e:	50a3      	str	r3, [r4, r2]
 8006610:	e7ab      	b.n	800656a <_malloc_r+0x22>
 8006612:	42a3      	cmp	r3, r4
 8006614:	6862      	ldr	r2, [r4, #4]
 8006616:	d1dd      	bne.n	80065d4 <_malloc_r+0x8c>
 8006618:	f8c8 2000 	str.w	r2, [r8]
 800661c:	e7ec      	b.n	80065f8 <_malloc_r+0xb0>
 800661e:	4623      	mov	r3, r4
 8006620:	6864      	ldr	r4, [r4, #4]
 8006622:	e7ac      	b.n	800657e <_malloc_r+0x36>
 8006624:	4634      	mov	r4, r6
 8006626:	6876      	ldr	r6, [r6, #4]
 8006628:	e7b4      	b.n	8006594 <_malloc_r+0x4c>
 800662a:	4613      	mov	r3, r2
 800662c:	e7cc      	b.n	80065c8 <_malloc_r+0x80>
 800662e:	230c      	movs	r3, #12
 8006630:	603b      	str	r3, [r7, #0]
 8006632:	4638      	mov	r0, r7
 8006634:	f000 f80e 	bl	8006654 <__malloc_unlock>
 8006638:	e797      	b.n	800656a <_malloc_r+0x22>
 800663a:	6025      	str	r5, [r4, #0]
 800663c:	e7dc      	b.n	80065f8 <_malloc_r+0xb0>
 800663e:	605b      	str	r3, [r3, #4]
 8006640:	deff      	udf	#255	; 0xff
 8006642:	bf00      	nop
 8006644:	200013b0 	.word	0x200013b0

08006648 <__malloc_lock>:
 8006648:	4801      	ldr	r0, [pc, #4]	; (8006650 <__malloc_lock+0x8>)
 800664a:	f7ff bee8 	b.w	800641e <__retarget_lock_acquire_recursive>
 800664e:	bf00      	nop
 8006650:	200013ac 	.word	0x200013ac

08006654 <__malloc_unlock>:
 8006654:	4801      	ldr	r0, [pc, #4]	; (800665c <__malloc_unlock+0x8>)
 8006656:	f7ff bee3 	b.w	8006420 <__retarget_lock_release_recursive>
 800665a:	bf00      	nop
 800665c:	200013ac 	.word	0x200013ac

08006660 <__sflush_r>:
 8006660:	898a      	ldrh	r2, [r1, #12]
 8006662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006666:	4605      	mov	r5, r0
 8006668:	0710      	lsls	r0, r2, #28
 800666a:	460c      	mov	r4, r1
 800666c:	d458      	bmi.n	8006720 <__sflush_r+0xc0>
 800666e:	684b      	ldr	r3, [r1, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	dc05      	bgt.n	8006680 <__sflush_r+0x20>
 8006674:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	dc02      	bgt.n	8006680 <__sflush_r+0x20>
 800667a:	2000      	movs	r0, #0
 800667c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006682:	2e00      	cmp	r6, #0
 8006684:	d0f9      	beq.n	800667a <__sflush_r+0x1a>
 8006686:	2300      	movs	r3, #0
 8006688:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800668c:	682f      	ldr	r7, [r5, #0]
 800668e:	6a21      	ldr	r1, [r4, #32]
 8006690:	602b      	str	r3, [r5, #0]
 8006692:	d032      	beq.n	80066fa <__sflush_r+0x9a>
 8006694:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	075a      	lsls	r2, r3, #29
 800669a:	d505      	bpl.n	80066a8 <__sflush_r+0x48>
 800669c:	6863      	ldr	r3, [r4, #4]
 800669e:	1ac0      	subs	r0, r0, r3
 80066a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066a2:	b10b      	cbz	r3, 80066a8 <__sflush_r+0x48>
 80066a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066a6:	1ac0      	subs	r0, r0, r3
 80066a8:	2300      	movs	r3, #0
 80066aa:	4602      	mov	r2, r0
 80066ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066ae:	6a21      	ldr	r1, [r4, #32]
 80066b0:	4628      	mov	r0, r5
 80066b2:	47b0      	blx	r6
 80066b4:	1c43      	adds	r3, r0, #1
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	d106      	bne.n	80066c8 <__sflush_r+0x68>
 80066ba:	6829      	ldr	r1, [r5, #0]
 80066bc:	291d      	cmp	r1, #29
 80066be:	d82b      	bhi.n	8006718 <__sflush_r+0xb8>
 80066c0:	4a29      	ldr	r2, [pc, #164]	; (8006768 <__sflush_r+0x108>)
 80066c2:	410a      	asrs	r2, r1
 80066c4:	07d6      	lsls	r6, r2, #31
 80066c6:	d427      	bmi.n	8006718 <__sflush_r+0xb8>
 80066c8:	2200      	movs	r2, #0
 80066ca:	6062      	str	r2, [r4, #4]
 80066cc:	04d9      	lsls	r1, r3, #19
 80066ce:	6922      	ldr	r2, [r4, #16]
 80066d0:	6022      	str	r2, [r4, #0]
 80066d2:	d504      	bpl.n	80066de <__sflush_r+0x7e>
 80066d4:	1c42      	adds	r2, r0, #1
 80066d6:	d101      	bne.n	80066dc <__sflush_r+0x7c>
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	b903      	cbnz	r3, 80066de <__sflush_r+0x7e>
 80066dc:	6560      	str	r0, [r4, #84]	; 0x54
 80066de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066e0:	602f      	str	r7, [r5, #0]
 80066e2:	2900      	cmp	r1, #0
 80066e4:	d0c9      	beq.n	800667a <__sflush_r+0x1a>
 80066e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066ea:	4299      	cmp	r1, r3
 80066ec:	d002      	beq.n	80066f4 <__sflush_r+0x94>
 80066ee:	4628      	mov	r0, r5
 80066f0:	f7ff feb6 	bl	8006460 <_free_r>
 80066f4:	2000      	movs	r0, #0
 80066f6:	6360      	str	r0, [r4, #52]	; 0x34
 80066f8:	e7c0      	b.n	800667c <__sflush_r+0x1c>
 80066fa:	2301      	movs	r3, #1
 80066fc:	4628      	mov	r0, r5
 80066fe:	47b0      	blx	r6
 8006700:	1c41      	adds	r1, r0, #1
 8006702:	d1c8      	bne.n	8006696 <__sflush_r+0x36>
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0c5      	beq.n	8006696 <__sflush_r+0x36>
 800670a:	2b1d      	cmp	r3, #29
 800670c:	d001      	beq.n	8006712 <__sflush_r+0xb2>
 800670e:	2b16      	cmp	r3, #22
 8006710:	d101      	bne.n	8006716 <__sflush_r+0xb6>
 8006712:	602f      	str	r7, [r5, #0]
 8006714:	e7b1      	b.n	800667a <__sflush_r+0x1a>
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800671c:	81a3      	strh	r3, [r4, #12]
 800671e:	e7ad      	b.n	800667c <__sflush_r+0x1c>
 8006720:	690f      	ldr	r7, [r1, #16]
 8006722:	2f00      	cmp	r7, #0
 8006724:	d0a9      	beq.n	800667a <__sflush_r+0x1a>
 8006726:	0793      	lsls	r3, r2, #30
 8006728:	680e      	ldr	r6, [r1, #0]
 800672a:	bf08      	it	eq
 800672c:	694b      	ldreq	r3, [r1, #20]
 800672e:	600f      	str	r7, [r1, #0]
 8006730:	bf18      	it	ne
 8006732:	2300      	movne	r3, #0
 8006734:	eba6 0807 	sub.w	r8, r6, r7
 8006738:	608b      	str	r3, [r1, #8]
 800673a:	f1b8 0f00 	cmp.w	r8, #0
 800673e:	dd9c      	ble.n	800667a <__sflush_r+0x1a>
 8006740:	6a21      	ldr	r1, [r4, #32]
 8006742:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006744:	4643      	mov	r3, r8
 8006746:	463a      	mov	r2, r7
 8006748:	4628      	mov	r0, r5
 800674a:	47b0      	blx	r6
 800674c:	2800      	cmp	r0, #0
 800674e:	dc06      	bgt.n	800675e <__sflush_r+0xfe>
 8006750:	89a3      	ldrh	r3, [r4, #12]
 8006752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006756:	81a3      	strh	r3, [r4, #12]
 8006758:	f04f 30ff 	mov.w	r0, #4294967295
 800675c:	e78e      	b.n	800667c <__sflush_r+0x1c>
 800675e:	4407      	add	r7, r0
 8006760:	eba8 0800 	sub.w	r8, r8, r0
 8006764:	e7e9      	b.n	800673a <__sflush_r+0xda>
 8006766:	bf00      	nop
 8006768:	dfbffffe 	.word	0xdfbffffe

0800676c <_fflush_r>:
 800676c:	b538      	push	{r3, r4, r5, lr}
 800676e:	690b      	ldr	r3, [r1, #16]
 8006770:	4605      	mov	r5, r0
 8006772:	460c      	mov	r4, r1
 8006774:	b913      	cbnz	r3, 800677c <_fflush_r+0x10>
 8006776:	2500      	movs	r5, #0
 8006778:	4628      	mov	r0, r5
 800677a:	bd38      	pop	{r3, r4, r5, pc}
 800677c:	b118      	cbz	r0, 8006786 <_fflush_r+0x1a>
 800677e:	6a03      	ldr	r3, [r0, #32]
 8006780:	b90b      	cbnz	r3, 8006786 <_fflush_r+0x1a>
 8006782:	f7ff fd59 	bl	8006238 <__sinit>
 8006786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0f3      	beq.n	8006776 <_fflush_r+0xa>
 800678e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006790:	07d0      	lsls	r0, r2, #31
 8006792:	d404      	bmi.n	800679e <_fflush_r+0x32>
 8006794:	0599      	lsls	r1, r3, #22
 8006796:	d402      	bmi.n	800679e <_fflush_r+0x32>
 8006798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800679a:	f7ff fe40 	bl	800641e <__retarget_lock_acquire_recursive>
 800679e:	4628      	mov	r0, r5
 80067a0:	4621      	mov	r1, r4
 80067a2:	f7ff ff5d 	bl	8006660 <__sflush_r>
 80067a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067a8:	07da      	lsls	r2, r3, #31
 80067aa:	4605      	mov	r5, r0
 80067ac:	d4e4      	bmi.n	8006778 <_fflush_r+0xc>
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	059b      	lsls	r3, r3, #22
 80067b2:	d4e1      	bmi.n	8006778 <_fflush_r+0xc>
 80067b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067b6:	f7ff fe33 	bl	8006420 <__retarget_lock_release_recursive>
 80067ba:	e7dd      	b.n	8006778 <_fflush_r+0xc>

080067bc <fiprintf>:
 80067bc:	b40e      	push	{r1, r2, r3}
 80067be:	b503      	push	{r0, r1, lr}
 80067c0:	4601      	mov	r1, r0
 80067c2:	ab03      	add	r3, sp, #12
 80067c4:	4805      	ldr	r0, [pc, #20]	; (80067dc <fiprintf+0x20>)
 80067c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ca:	6800      	ldr	r0, [r0, #0]
 80067cc:	9301      	str	r3, [sp, #4]
 80067ce:	f000 f847 	bl	8006860 <_vfiprintf_r>
 80067d2:	b002      	add	sp, #8
 80067d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80067d8:	b003      	add	sp, #12
 80067da:	4770      	bx	lr
 80067dc:	20000064 	.word	0x20000064

080067e0 <_sbrk_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4d06      	ldr	r5, [pc, #24]	; (80067fc <_sbrk_r+0x1c>)
 80067e4:	2300      	movs	r3, #0
 80067e6:	4604      	mov	r4, r0
 80067e8:	4608      	mov	r0, r1
 80067ea:	602b      	str	r3, [r5, #0]
 80067ec:	f7fc f936 	bl	8002a5c <_sbrk>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	d102      	bne.n	80067fa <_sbrk_r+0x1a>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	b103      	cbz	r3, 80067fa <_sbrk_r+0x1a>
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
 80067fc:	200013a8 	.word	0x200013a8

08006800 <abort>:
 8006800:	b508      	push	{r3, lr}
 8006802:	2006      	movs	r0, #6
 8006804:	f000 fb94 	bl	8006f30 <raise>
 8006808:	2001      	movs	r0, #1
 800680a:	f7fc f8af 	bl	800296c <_exit>

0800680e <__sfputc_r>:
 800680e:	6893      	ldr	r3, [r2, #8]
 8006810:	3b01      	subs	r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	b410      	push	{r4}
 8006816:	6093      	str	r3, [r2, #8]
 8006818:	da08      	bge.n	800682c <__sfputc_r+0x1e>
 800681a:	6994      	ldr	r4, [r2, #24]
 800681c:	42a3      	cmp	r3, r4
 800681e:	db01      	blt.n	8006824 <__sfputc_r+0x16>
 8006820:	290a      	cmp	r1, #10
 8006822:	d103      	bne.n	800682c <__sfputc_r+0x1e>
 8006824:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006828:	f000 bac4 	b.w	8006db4 <__swbuf_r>
 800682c:	6813      	ldr	r3, [r2, #0]
 800682e:	1c58      	adds	r0, r3, #1
 8006830:	6010      	str	r0, [r2, #0]
 8006832:	7019      	strb	r1, [r3, #0]
 8006834:	4608      	mov	r0, r1
 8006836:	f85d 4b04 	ldr.w	r4, [sp], #4
 800683a:	4770      	bx	lr

0800683c <__sfputs_r>:
 800683c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683e:	4606      	mov	r6, r0
 8006840:	460f      	mov	r7, r1
 8006842:	4614      	mov	r4, r2
 8006844:	18d5      	adds	r5, r2, r3
 8006846:	42ac      	cmp	r4, r5
 8006848:	d101      	bne.n	800684e <__sfputs_r+0x12>
 800684a:	2000      	movs	r0, #0
 800684c:	e007      	b.n	800685e <__sfputs_r+0x22>
 800684e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006852:	463a      	mov	r2, r7
 8006854:	4630      	mov	r0, r6
 8006856:	f7ff ffda 	bl	800680e <__sfputc_r>
 800685a:	1c43      	adds	r3, r0, #1
 800685c:	d1f3      	bne.n	8006846 <__sfputs_r+0xa>
 800685e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006860 <_vfiprintf_r>:
 8006860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006864:	460d      	mov	r5, r1
 8006866:	b09d      	sub	sp, #116	; 0x74
 8006868:	4614      	mov	r4, r2
 800686a:	4698      	mov	r8, r3
 800686c:	4606      	mov	r6, r0
 800686e:	b118      	cbz	r0, 8006878 <_vfiprintf_r+0x18>
 8006870:	6a03      	ldr	r3, [r0, #32]
 8006872:	b90b      	cbnz	r3, 8006878 <_vfiprintf_r+0x18>
 8006874:	f7ff fce0 	bl	8006238 <__sinit>
 8006878:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800687a:	07d9      	lsls	r1, r3, #31
 800687c:	d405      	bmi.n	800688a <_vfiprintf_r+0x2a>
 800687e:	89ab      	ldrh	r3, [r5, #12]
 8006880:	059a      	lsls	r2, r3, #22
 8006882:	d402      	bmi.n	800688a <_vfiprintf_r+0x2a>
 8006884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006886:	f7ff fdca 	bl	800641e <__retarget_lock_acquire_recursive>
 800688a:	89ab      	ldrh	r3, [r5, #12]
 800688c:	071b      	lsls	r3, r3, #28
 800688e:	d501      	bpl.n	8006894 <_vfiprintf_r+0x34>
 8006890:	692b      	ldr	r3, [r5, #16]
 8006892:	b99b      	cbnz	r3, 80068bc <_vfiprintf_r+0x5c>
 8006894:	4629      	mov	r1, r5
 8006896:	4630      	mov	r0, r6
 8006898:	f000 faca 	bl	8006e30 <__swsetup_r>
 800689c:	b170      	cbz	r0, 80068bc <_vfiprintf_r+0x5c>
 800689e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068a0:	07dc      	lsls	r4, r3, #31
 80068a2:	d504      	bpl.n	80068ae <_vfiprintf_r+0x4e>
 80068a4:	f04f 30ff 	mov.w	r0, #4294967295
 80068a8:	b01d      	add	sp, #116	; 0x74
 80068aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ae:	89ab      	ldrh	r3, [r5, #12]
 80068b0:	0598      	lsls	r0, r3, #22
 80068b2:	d4f7      	bmi.n	80068a4 <_vfiprintf_r+0x44>
 80068b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068b6:	f7ff fdb3 	bl	8006420 <__retarget_lock_release_recursive>
 80068ba:	e7f3      	b.n	80068a4 <_vfiprintf_r+0x44>
 80068bc:	2300      	movs	r3, #0
 80068be:	9309      	str	r3, [sp, #36]	; 0x24
 80068c0:	2320      	movs	r3, #32
 80068c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80068ca:	2330      	movs	r3, #48	; 0x30
 80068cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006a80 <_vfiprintf_r+0x220>
 80068d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068d4:	f04f 0901 	mov.w	r9, #1
 80068d8:	4623      	mov	r3, r4
 80068da:	469a      	mov	sl, r3
 80068dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068e0:	b10a      	cbz	r2, 80068e6 <_vfiprintf_r+0x86>
 80068e2:	2a25      	cmp	r2, #37	; 0x25
 80068e4:	d1f9      	bne.n	80068da <_vfiprintf_r+0x7a>
 80068e6:	ebba 0b04 	subs.w	fp, sl, r4
 80068ea:	d00b      	beq.n	8006904 <_vfiprintf_r+0xa4>
 80068ec:	465b      	mov	r3, fp
 80068ee:	4622      	mov	r2, r4
 80068f0:	4629      	mov	r1, r5
 80068f2:	4630      	mov	r0, r6
 80068f4:	f7ff ffa2 	bl	800683c <__sfputs_r>
 80068f8:	3001      	adds	r0, #1
 80068fa:	f000 80a9 	beq.w	8006a50 <_vfiprintf_r+0x1f0>
 80068fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006900:	445a      	add	r2, fp
 8006902:	9209      	str	r2, [sp, #36]	; 0x24
 8006904:	f89a 3000 	ldrb.w	r3, [sl]
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 80a1 	beq.w	8006a50 <_vfiprintf_r+0x1f0>
 800690e:	2300      	movs	r3, #0
 8006910:	f04f 32ff 	mov.w	r2, #4294967295
 8006914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006918:	f10a 0a01 	add.w	sl, sl, #1
 800691c:	9304      	str	r3, [sp, #16]
 800691e:	9307      	str	r3, [sp, #28]
 8006920:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006924:	931a      	str	r3, [sp, #104]	; 0x68
 8006926:	4654      	mov	r4, sl
 8006928:	2205      	movs	r2, #5
 800692a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800692e:	4854      	ldr	r0, [pc, #336]	; (8006a80 <_vfiprintf_r+0x220>)
 8006930:	f7f9 fc4e 	bl	80001d0 <memchr>
 8006934:	9a04      	ldr	r2, [sp, #16]
 8006936:	b9d8      	cbnz	r0, 8006970 <_vfiprintf_r+0x110>
 8006938:	06d1      	lsls	r1, r2, #27
 800693a:	bf44      	itt	mi
 800693c:	2320      	movmi	r3, #32
 800693e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006942:	0713      	lsls	r3, r2, #28
 8006944:	bf44      	itt	mi
 8006946:	232b      	movmi	r3, #43	; 0x2b
 8006948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800694c:	f89a 3000 	ldrb.w	r3, [sl]
 8006950:	2b2a      	cmp	r3, #42	; 0x2a
 8006952:	d015      	beq.n	8006980 <_vfiprintf_r+0x120>
 8006954:	9a07      	ldr	r2, [sp, #28]
 8006956:	4654      	mov	r4, sl
 8006958:	2000      	movs	r0, #0
 800695a:	f04f 0c0a 	mov.w	ip, #10
 800695e:	4621      	mov	r1, r4
 8006960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006964:	3b30      	subs	r3, #48	; 0x30
 8006966:	2b09      	cmp	r3, #9
 8006968:	d94d      	bls.n	8006a06 <_vfiprintf_r+0x1a6>
 800696a:	b1b0      	cbz	r0, 800699a <_vfiprintf_r+0x13a>
 800696c:	9207      	str	r2, [sp, #28]
 800696e:	e014      	b.n	800699a <_vfiprintf_r+0x13a>
 8006970:	eba0 0308 	sub.w	r3, r0, r8
 8006974:	fa09 f303 	lsl.w	r3, r9, r3
 8006978:	4313      	orrs	r3, r2
 800697a:	9304      	str	r3, [sp, #16]
 800697c:	46a2      	mov	sl, r4
 800697e:	e7d2      	b.n	8006926 <_vfiprintf_r+0xc6>
 8006980:	9b03      	ldr	r3, [sp, #12]
 8006982:	1d19      	adds	r1, r3, #4
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	9103      	str	r1, [sp, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	bfbb      	ittet	lt
 800698c:	425b      	neglt	r3, r3
 800698e:	f042 0202 	orrlt.w	r2, r2, #2
 8006992:	9307      	strge	r3, [sp, #28]
 8006994:	9307      	strlt	r3, [sp, #28]
 8006996:	bfb8      	it	lt
 8006998:	9204      	strlt	r2, [sp, #16]
 800699a:	7823      	ldrb	r3, [r4, #0]
 800699c:	2b2e      	cmp	r3, #46	; 0x2e
 800699e:	d10c      	bne.n	80069ba <_vfiprintf_r+0x15a>
 80069a0:	7863      	ldrb	r3, [r4, #1]
 80069a2:	2b2a      	cmp	r3, #42	; 0x2a
 80069a4:	d134      	bne.n	8006a10 <_vfiprintf_r+0x1b0>
 80069a6:	9b03      	ldr	r3, [sp, #12]
 80069a8:	1d1a      	adds	r2, r3, #4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	9203      	str	r2, [sp, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bfb8      	it	lt
 80069b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80069b6:	3402      	adds	r4, #2
 80069b8:	9305      	str	r3, [sp, #20]
 80069ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006a90 <_vfiprintf_r+0x230>
 80069be:	7821      	ldrb	r1, [r4, #0]
 80069c0:	2203      	movs	r2, #3
 80069c2:	4650      	mov	r0, sl
 80069c4:	f7f9 fc04 	bl	80001d0 <memchr>
 80069c8:	b138      	cbz	r0, 80069da <_vfiprintf_r+0x17a>
 80069ca:	9b04      	ldr	r3, [sp, #16]
 80069cc:	eba0 000a 	sub.w	r0, r0, sl
 80069d0:	2240      	movs	r2, #64	; 0x40
 80069d2:	4082      	lsls	r2, r0
 80069d4:	4313      	orrs	r3, r2
 80069d6:	3401      	adds	r4, #1
 80069d8:	9304      	str	r3, [sp, #16]
 80069da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069de:	4829      	ldr	r0, [pc, #164]	; (8006a84 <_vfiprintf_r+0x224>)
 80069e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069e4:	2206      	movs	r2, #6
 80069e6:	f7f9 fbf3 	bl	80001d0 <memchr>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d03f      	beq.n	8006a6e <_vfiprintf_r+0x20e>
 80069ee:	4b26      	ldr	r3, [pc, #152]	; (8006a88 <_vfiprintf_r+0x228>)
 80069f0:	bb1b      	cbnz	r3, 8006a3a <_vfiprintf_r+0x1da>
 80069f2:	9b03      	ldr	r3, [sp, #12]
 80069f4:	3307      	adds	r3, #7
 80069f6:	f023 0307 	bic.w	r3, r3, #7
 80069fa:	3308      	adds	r3, #8
 80069fc:	9303      	str	r3, [sp, #12]
 80069fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a00:	443b      	add	r3, r7
 8006a02:	9309      	str	r3, [sp, #36]	; 0x24
 8006a04:	e768      	b.n	80068d8 <_vfiprintf_r+0x78>
 8006a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	e7a6      	b.n	800695e <_vfiprintf_r+0xfe>
 8006a10:	2300      	movs	r3, #0
 8006a12:	3401      	adds	r4, #1
 8006a14:	9305      	str	r3, [sp, #20]
 8006a16:	4619      	mov	r1, r3
 8006a18:	f04f 0c0a 	mov.w	ip, #10
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a22:	3a30      	subs	r2, #48	; 0x30
 8006a24:	2a09      	cmp	r2, #9
 8006a26:	d903      	bls.n	8006a30 <_vfiprintf_r+0x1d0>
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0c6      	beq.n	80069ba <_vfiprintf_r+0x15a>
 8006a2c:	9105      	str	r1, [sp, #20]
 8006a2e:	e7c4      	b.n	80069ba <_vfiprintf_r+0x15a>
 8006a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a34:	4604      	mov	r4, r0
 8006a36:	2301      	movs	r3, #1
 8006a38:	e7f0      	b.n	8006a1c <_vfiprintf_r+0x1bc>
 8006a3a:	ab03      	add	r3, sp, #12
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	462a      	mov	r2, r5
 8006a40:	4b12      	ldr	r3, [pc, #72]	; (8006a8c <_vfiprintf_r+0x22c>)
 8006a42:	a904      	add	r1, sp, #16
 8006a44:	4630      	mov	r0, r6
 8006a46:	f3af 8000 	nop.w
 8006a4a:	4607      	mov	r7, r0
 8006a4c:	1c78      	adds	r0, r7, #1
 8006a4e:	d1d6      	bne.n	80069fe <_vfiprintf_r+0x19e>
 8006a50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a52:	07d9      	lsls	r1, r3, #31
 8006a54:	d405      	bmi.n	8006a62 <_vfiprintf_r+0x202>
 8006a56:	89ab      	ldrh	r3, [r5, #12]
 8006a58:	059a      	lsls	r2, r3, #22
 8006a5a:	d402      	bmi.n	8006a62 <_vfiprintf_r+0x202>
 8006a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a5e:	f7ff fcdf 	bl	8006420 <__retarget_lock_release_recursive>
 8006a62:	89ab      	ldrh	r3, [r5, #12]
 8006a64:	065b      	lsls	r3, r3, #25
 8006a66:	f53f af1d 	bmi.w	80068a4 <_vfiprintf_r+0x44>
 8006a6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a6c:	e71c      	b.n	80068a8 <_vfiprintf_r+0x48>
 8006a6e:	ab03      	add	r3, sp, #12
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	462a      	mov	r2, r5
 8006a74:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <_vfiprintf_r+0x22c>)
 8006a76:	a904      	add	r1, sp, #16
 8006a78:	4630      	mov	r0, r6
 8006a7a:	f000 f879 	bl	8006b70 <_printf_i>
 8006a7e:	e7e4      	b.n	8006a4a <_vfiprintf_r+0x1ea>
 8006a80:	080084e7 	.word	0x080084e7
 8006a84:	080084f1 	.word	0x080084f1
 8006a88:	00000000 	.word	0x00000000
 8006a8c:	0800683d 	.word	0x0800683d
 8006a90:	080084ed 	.word	0x080084ed

08006a94 <_printf_common>:
 8006a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a98:	4616      	mov	r6, r2
 8006a9a:	4699      	mov	r9, r3
 8006a9c:	688a      	ldr	r2, [r1, #8]
 8006a9e:	690b      	ldr	r3, [r1, #16]
 8006aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	bfb8      	it	lt
 8006aa8:	4613      	movlt	r3, r2
 8006aaa:	6033      	str	r3, [r6, #0]
 8006aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	b10a      	cbz	r2, 8006aba <_printf_common+0x26>
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	6033      	str	r3, [r6, #0]
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	0699      	lsls	r1, r3, #26
 8006abe:	bf42      	ittt	mi
 8006ac0:	6833      	ldrmi	r3, [r6, #0]
 8006ac2:	3302      	addmi	r3, #2
 8006ac4:	6033      	strmi	r3, [r6, #0]
 8006ac6:	6825      	ldr	r5, [r4, #0]
 8006ac8:	f015 0506 	ands.w	r5, r5, #6
 8006acc:	d106      	bne.n	8006adc <_printf_common+0x48>
 8006ace:	f104 0a19 	add.w	sl, r4, #25
 8006ad2:	68e3      	ldr	r3, [r4, #12]
 8006ad4:	6832      	ldr	r2, [r6, #0]
 8006ad6:	1a9b      	subs	r3, r3, r2
 8006ad8:	42ab      	cmp	r3, r5
 8006ada:	dc26      	bgt.n	8006b2a <_printf_common+0x96>
 8006adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ae0:	1e13      	subs	r3, r2, #0
 8006ae2:	6822      	ldr	r2, [r4, #0]
 8006ae4:	bf18      	it	ne
 8006ae6:	2301      	movne	r3, #1
 8006ae8:	0692      	lsls	r2, r2, #26
 8006aea:	d42b      	bmi.n	8006b44 <_printf_common+0xb0>
 8006aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006af0:	4649      	mov	r1, r9
 8006af2:	4638      	mov	r0, r7
 8006af4:	47c0      	blx	r8
 8006af6:	3001      	adds	r0, #1
 8006af8:	d01e      	beq.n	8006b38 <_printf_common+0xa4>
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	6922      	ldr	r2, [r4, #16]
 8006afe:	f003 0306 	and.w	r3, r3, #6
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	bf02      	ittt	eq
 8006b06:	68e5      	ldreq	r5, [r4, #12]
 8006b08:	6833      	ldreq	r3, [r6, #0]
 8006b0a:	1aed      	subeq	r5, r5, r3
 8006b0c:	68a3      	ldr	r3, [r4, #8]
 8006b0e:	bf0c      	ite	eq
 8006b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b14:	2500      	movne	r5, #0
 8006b16:	4293      	cmp	r3, r2
 8006b18:	bfc4      	itt	gt
 8006b1a:	1a9b      	subgt	r3, r3, r2
 8006b1c:	18ed      	addgt	r5, r5, r3
 8006b1e:	2600      	movs	r6, #0
 8006b20:	341a      	adds	r4, #26
 8006b22:	42b5      	cmp	r5, r6
 8006b24:	d11a      	bne.n	8006b5c <_printf_common+0xc8>
 8006b26:	2000      	movs	r0, #0
 8006b28:	e008      	b.n	8006b3c <_printf_common+0xa8>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	4652      	mov	r2, sl
 8006b2e:	4649      	mov	r1, r9
 8006b30:	4638      	mov	r0, r7
 8006b32:	47c0      	blx	r8
 8006b34:	3001      	adds	r0, #1
 8006b36:	d103      	bne.n	8006b40 <_printf_common+0xac>
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b40:	3501      	adds	r5, #1
 8006b42:	e7c6      	b.n	8006ad2 <_printf_common+0x3e>
 8006b44:	18e1      	adds	r1, r4, r3
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	2030      	movs	r0, #48	; 0x30
 8006b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b4e:	4422      	add	r2, r4
 8006b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b58:	3302      	adds	r3, #2
 8006b5a:	e7c7      	b.n	8006aec <_printf_common+0x58>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	4622      	mov	r2, r4
 8006b60:	4649      	mov	r1, r9
 8006b62:	4638      	mov	r0, r7
 8006b64:	47c0      	blx	r8
 8006b66:	3001      	adds	r0, #1
 8006b68:	d0e6      	beq.n	8006b38 <_printf_common+0xa4>
 8006b6a:	3601      	adds	r6, #1
 8006b6c:	e7d9      	b.n	8006b22 <_printf_common+0x8e>
	...

08006b70 <_printf_i>:
 8006b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b74:	7e0f      	ldrb	r7, [r1, #24]
 8006b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b78:	2f78      	cmp	r7, #120	; 0x78
 8006b7a:	4691      	mov	r9, r2
 8006b7c:	4680      	mov	r8, r0
 8006b7e:	460c      	mov	r4, r1
 8006b80:	469a      	mov	sl, r3
 8006b82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b86:	d807      	bhi.n	8006b98 <_printf_i+0x28>
 8006b88:	2f62      	cmp	r7, #98	; 0x62
 8006b8a:	d80a      	bhi.n	8006ba2 <_printf_i+0x32>
 8006b8c:	2f00      	cmp	r7, #0
 8006b8e:	f000 80d4 	beq.w	8006d3a <_printf_i+0x1ca>
 8006b92:	2f58      	cmp	r7, #88	; 0x58
 8006b94:	f000 80c0 	beq.w	8006d18 <_printf_i+0x1a8>
 8006b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ba0:	e03a      	b.n	8006c18 <_printf_i+0xa8>
 8006ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ba6:	2b15      	cmp	r3, #21
 8006ba8:	d8f6      	bhi.n	8006b98 <_printf_i+0x28>
 8006baa:	a101      	add	r1, pc, #4	; (adr r1, 8006bb0 <_printf_i+0x40>)
 8006bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bb0:	08006c09 	.word	0x08006c09
 8006bb4:	08006c1d 	.word	0x08006c1d
 8006bb8:	08006b99 	.word	0x08006b99
 8006bbc:	08006b99 	.word	0x08006b99
 8006bc0:	08006b99 	.word	0x08006b99
 8006bc4:	08006b99 	.word	0x08006b99
 8006bc8:	08006c1d 	.word	0x08006c1d
 8006bcc:	08006b99 	.word	0x08006b99
 8006bd0:	08006b99 	.word	0x08006b99
 8006bd4:	08006b99 	.word	0x08006b99
 8006bd8:	08006b99 	.word	0x08006b99
 8006bdc:	08006d21 	.word	0x08006d21
 8006be0:	08006c49 	.word	0x08006c49
 8006be4:	08006cdb 	.word	0x08006cdb
 8006be8:	08006b99 	.word	0x08006b99
 8006bec:	08006b99 	.word	0x08006b99
 8006bf0:	08006d43 	.word	0x08006d43
 8006bf4:	08006b99 	.word	0x08006b99
 8006bf8:	08006c49 	.word	0x08006c49
 8006bfc:	08006b99 	.word	0x08006b99
 8006c00:	08006b99 	.word	0x08006b99
 8006c04:	08006ce3 	.word	0x08006ce3
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	1d1a      	adds	r2, r3, #4
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	602a      	str	r2, [r5, #0]
 8006c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e09f      	b.n	8006d5c <_printf_i+0x1ec>
 8006c1c:	6820      	ldr	r0, [r4, #0]
 8006c1e:	682b      	ldr	r3, [r5, #0]
 8006c20:	0607      	lsls	r7, r0, #24
 8006c22:	f103 0104 	add.w	r1, r3, #4
 8006c26:	6029      	str	r1, [r5, #0]
 8006c28:	d501      	bpl.n	8006c2e <_printf_i+0xbe>
 8006c2a:	681e      	ldr	r6, [r3, #0]
 8006c2c:	e003      	b.n	8006c36 <_printf_i+0xc6>
 8006c2e:	0646      	lsls	r6, r0, #25
 8006c30:	d5fb      	bpl.n	8006c2a <_printf_i+0xba>
 8006c32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c36:	2e00      	cmp	r6, #0
 8006c38:	da03      	bge.n	8006c42 <_printf_i+0xd2>
 8006c3a:	232d      	movs	r3, #45	; 0x2d
 8006c3c:	4276      	negs	r6, r6
 8006c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c42:	485a      	ldr	r0, [pc, #360]	; (8006dac <_printf_i+0x23c>)
 8006c44:	230a      	movs	r3, #10
 8006c46:	e012      	b.n	8006c6e <_printf_i+0xfe>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	6820      	ldr	r0, [r4, #0]
 8006c4c:	1d19      	adds	r1, r3, #4
 8006c4e:	6029      	str	r1, [r5, #0]
 8006c50:	0605      	lsls	r5, r0, #24
 8006c52:	d501      	bpl.n	8006c58 <_printf_i+0xe8>
 8006c54:	681e      	ldr	r6, [r3, #0]
 8006c56:	e002      	b.n	8006c5e <_printf_i+0xee>
 8006c58:	0641      	lsls	r1, r0, #25
 8006c5a:	d5fb      	bpl.n	8006c54 <_printf_i+0xe4>
 8006c5c:	881e      	ldrh	r6, [r3, #0]
 8006c5e:	4853      	ldr	r0, [pc, #332]	; (8006dac <_printf_i+0x23c>)
 8006c60:	2f6f      	cmp	r7, #111	; 0x6f
 8006c62:	bf0c      	ite	eq
 8006c64:	2308      	moveq	r3, #8
 8006c66:	230a      	movne	r3, #10
 8006c68:	2100      	movs	r1, #0
 8006c6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c6e:	6865      	ldr	r5, [r4, #4]
 8006c70:	60a5      	str	r5, [r4, #8]
 8006c72:	2d00      	cmp	r5, #0
 8006c74:	bfa2      	ittt	ge
 8006c76:	6821      	ldrge	r1, [r4, #0]
 8006c78:	f021 0104 	bicge.w	r1, r1, #4
 8006c7c:	6021      	strge	r1, [r4, #0]
 8006c7e:	b90e      	cbnz	r6, 8006c84 <_printf_i+0x114>
 8006c80:	2d00      	cmp	r5, #0
 8006c82:	d04b      	beq.n	8006d1c <_printf_i+0x1ac>
 8006c84:	4615      	mov	r5, r2
 8006c86:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c8a:	fb03 6711 	mls	r7, r3, r1, r6
 8006c8e:	5dc7      	ldrb	r7, [r0, r7]
 8006c90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c94:	4637      	mov	r7, r6
 8006c96:	42bb      	cmp	r3, r7
 8006c98:	460e      	mov	r6, r1
 8006c9a:	d9f4      	bls.n	8006c86 <_printf_i+0x116>
 8006c9c:	2b08      	cmp	r3, #8
 8006c9e:	d10b      	bne.n	8006cb8 <_printf_i+0x148>
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	07de      	lsls	r6, r3, #31
 8006ca4:	d508      	bpl.n	8006cb8 <_printf_i+0x148>
 8006ca6:	6923      	ldr	r3, [r4, #16]
 8006ca8:	6861      	ldr	r1, [r4, #4]
 8006caa:	4299      	cmp	r1, r3
 8006cac:	bfde      	ittt	le
 8006cae:	2330      	movle	r3, #48	; 0x30
 8006cb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cb8:	1b52      	subs	r2, r2, r5
 8006cba:	6122      	str	r2, [r4, #16]
 8006cbc:	f8cd a000 	str.w	sl, [sp]
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	aa03      	add	r2, sp, #12
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	4640      	mov	r0, r8
 8006cc8:	f7ff fee4 	bl	8006a94 <_printf_common>
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d14a      	bne.n	8006d66 <_printf_i+0x1f6>
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd4:	b004      	add	sp, #16
 8006cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	f043 0320 	orr.w	r3, r3, #32
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	4833      	ldr	r0, [pc, #204]	; (8006db0 <_printf_i+0x240>)
 8006ce4:	2778      	movs	r7, #120	; 0x78
 8006ce6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	6829      	ldr	r1, [r5, #0]
 8006cee:	061f      	lsls	r7, r3, #24
 8006cf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cf4:	d402      	bmi.n	8006cfc <_printf_i+0x18c>
 8006cf6:	065f      	lsls	r7, r3, #25
 8006cf8:	bf48      	it	mi
 8006cfa:	b2b6      	uxthmi	r6, r6
 8006cfc:	07df      	lsls	r7, r3, #31
 8006cfe:	bf48      	it	mi
 8006d00:	f043 0320 	orrmi.w	r3, r3, #32
 8006d04:	6029      	str	r1, [r5, #0]
 8006d06:	bf48      	it	mi
 8006d08:	6023      	strmi	r3, [r4, #0]
 8006d0a:	b91e      	cbnz	r6, 8006d14 <_printf_i+0x1a4>
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	f023 0320 	bic.w	r3, r3, #32
 8006d12:	6023      	str	r3, [r4, #0]
 8006d14:	2310      	movs	r3, #16
 8006d16:	e7a7      	b.n	8006c68 <_printf_i+0xf8>
 8006d18:	4824      	ldr	r0, [pc, #144]	; (8006dac <_printf_i+0x23c>)
 8006d1a:	e7e4      	b.n	8006ce6 <_printf_i+0x176>
 8006d1c:	4615      	mov	r5, r2
 8006d1e:	e7bd      	b.n	8006c9c <_printf_i+0x12c>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	6826      	ldr	r6, [r4, #0]
 8006d24:	6961      	ldr	r1, [r4, #20]
 8006d26:	1d18      	adds	r0, r3, #4
 8006d28:	6028      	str	r0, [r5, #0]
 8006d2a:	0635      	lsls	r5, r6, #24
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	d501      	bpl.n	8006d34 <_printf_i+0x1c4>
 8006d30:	6019      	str	r1, [r3, #0]
 8006d32:	e002      	b.n	8006d3a <_printf_i+0x1ca>
 8006d34:	0670      	lsls	r0, r6, #25
 8006d36:	d5fb      	bpl.n	8006d30 <_printf_i+0x1c0>
 8006d38:	8019      	strh	r1, [r3, #0]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	4615      	mov	r5, r2
 8006d40:	e7bc      	b.n	8006cbc <_printf_i+0x14c>
 8006d42:	682b      	ldr	r3, [r5, #0]
 8006d44:	1d1a      	adds	r2, r3, #4
 8006d46:	602a      	str	r2, [r5, #0]
 8006d48:	681d      	ldr	r5, [r3, #0]
 8006d4a:	6862      	ldr	r2, [r4, #4]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f7f9 fa3e 	bl	80001d0 <memchr>
 8006d54:	b108      	cbz	r0, 8006d5a <_printf_i+0x1ea>
 8006d56:	1b40      	subs	r0, r0, r5
 8006d58:	6060      	str	r0, [r4, #4]
 8006d5a:	6863      	ldr	r3, [r4, #4]
 8006d5c:	6123      	str	r3, [r4, #16]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d64:	e7aa      	b.n	8006cbc <_printf_i+0x14c>
 8006d66:	6923      	ldr	r3, [r4, #16]
 8006d68:	462a      	mov	r2, r5
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	4640      	mov	r0, r8
 8006d6e:	47d0      	blx	sl
 8006d70:	3001      	adds	r0, #1
 8006d72:	d0ad      	beq.n	8006cd0 <_printf_i+0x160>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	079b      	lsls	r3, r3, #30
 8006d78:	d413      	bmi.n	8006da2 <_printf_i+0x232>
 8006d7a:	68e0      	ldr	r0, [r4, #12]
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	4298      	cmp	r0, r3
 8006d80:	bfb8      	it	lt
 8006d82:	4618      	movlt	r0, r3
 8006d84:	e7a6      	b.n	8006cd4 <_printf_i+0x164>
 8006d86:	2301      	movs	r3, #1
 8006d88:	4632      	mov	r2, r6
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	4640      	mov	r0, r8
 8006d8e:	47d0      	blx	sl
 8006d90:	3001      	adds	r0, #1
 8006d92:	d09d      	beq.n	8006cd0 <_printf_i+0x160>
 8006d94:	3501      	adds	r5, #1
 8006d96:	68e3      	ldr	r3, [r4, #12]
 8006d98:	9903      	ldr	r1, [sp, #12]
 8006d9a:	1a5b      	subs	r3, r3, r1
 8006d9c:	42ab      	cmp	r3, r5
 8006d9e:	dcf2      	bgt.n	8006d86 <_printf_i+0x216>
 8006da0:	e7eb      	b.n	8006d7a <_printf_i+0x20a>
 8006da2:	2500      	movs	r5, #0
 8006da4:	f104 0619 	add.w	r6, r4, #25
 8006da8:	e7f5      	b.n	8006d96 <_printf_i+0x226>
 8006daa:	bf00      	nop
 8006dac:	080084f8 	.word	0x080084f8
 8006db0:	08008509 	.word	0x08008509

08006db4 <__swbuf_r>:
 8006db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db6:	460e      	mov	r6, r1
 8006db8:	4614      	mov	r4, r2
 8006dba:	4605      	mov	r5, r0
 8006dbc:	b118      	cbz	r0, 8006dc6 <__swbuf_r+0x12>
 8006dbe:	6a03      	ldr	r3, [r0, #32]
 8006dc0:	b90b      	cbnz	r3, 8006dc6 <__swbuf_r+0x12>
 8006dc2:	f7ff fa39 	bl	8006238 <__sinit>
 8006dc6:	69a3      	ldr	r3, [r4, #24]
 8006dc8:	60a3      	str	r3, [r4, #8]
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	071a      	lsls	r2, r3, #28
 8006dce:	d525      	bpl.n	8006e1c <__swbuf_r+0x68>
 8006dd0:	6923      	ldr	r3, [r4, #16]
 8006dd2:	b31b      	cbz	r3, 8006e1c <__swbuf_r+0x68>
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	6922      	ldr	r2, [r4, #16]
 8006dd8:	1a98      	subs	r0, r3, r2
 8006dda:	6963      	ldr	r3, [r4, #20]
 8006ddc:	b2f6      	uxtb	r6, r6
 8006dde:	4283      	cmp	r3, r0
 8006de0:	4637      	mov	r7, r6
 8006de2:	dc04      	bgt.n	8006dee <__swbuf_r+0x3a>
 8006de4:	4621      	mov	r1, r4
 8006de6:	4628      	mov	r0, r5
 8006de8:	f7ff fcc0 	bl	800676c <_fflush_r>
 8006dec:	b9e0      	cbnz	r0, 8006e28 <__swbuf_r+0x74>
 8006dee:	68a3      	ldr	r3, [r4, #8]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	60a3      	str	r3, [r4, #8]
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	6022      	str	r2, [r4, #0]
 8006dfa:	701e      	strb	r6, [r3, #0]
 8006dfc:	6962      	ldr	r2, [r4, #20]
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d004      	beq.n	8006e0e <__swbuf_r+0x5a>
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	07db      	lsls	r3, r3, #31
 8006e08:	d506      	bpl.n	8006e18 <__swbuf_r+0x64>
 8006e0a:	2e0a      	cmp	r6, #10
 8006e0c:	d104      	bne.n	8006e18 <__swbuf_r+0x64>
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4628      	mov	r0, r5
 8006e12:	f7ff fcab 	bl	800676c <_fflush_r>
 8006e16:	b938      	cbnz	r0, 8006e28 <__swbuf_r+0x74>
 8006e18:	4638      	mov	r0, r7
 8006e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f000 f806 	bl	8006e30 <__swsetup_r>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d0d5      	beq.n	8006dd4 <__swbuf_r+0x20>
 8006e28:	f04f 37ff 	mov.w	r7, #4294967295
 8006e2c:	e7f4      	b.n	8006e18 <__swbuf_r+0x64>
	...

08006e30 <__swsetup_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4b2a      	ldr	r3, [pc, #168]	; (8006edc <__swsetup_r+0xac>)
 8006e34:	4605      	mov	r5, r0
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	460c      	mov	r4, r1
 8006e3a:	b118      	cbz	r0, 8006e44 <__swsetup_r+0x14>
 8006e3c:	6a03      	ldr	r3, [r0, #32]
 8006e3e:	b90b      	cbnz	r3, 8006e44 <__swsetup_r+0x14>
 8006e40:	f7ff f9fa 	bl	8006238 <__sinit>
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e4a:	0718      	lsls	r0, r3, #28
 8006e4c:	d422      	bmi.n	8006e94 <__swsetup_r+0x64>
 8006e4e:	06d9      	lsls	r1, r3, #27
 8006e50:	d407      	bmi.n	8006e62 <__swsetup_r+0x32>
 8006e52:	2309      	movs	r3, #9
 8006e54:	602b      	str	r3, [r5, #0]
 8006e56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e5a:	81a3      	strh	r3, [r4, #12]
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e60:	e034      	b.n	8006ecc <__swsetup_r+0x9c>
 8006e62:	0758      	lsls	r0, r3, #29
 8006e64:	d512      	bpl.n	8006e8c <__swsetup_r+0x5c>
 8006e66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e68:	b141      	cbz	r1, 8006e7c <__swsetup_r+0x4c>
 8006e6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e6e:	4299      	cmp	r1, r3
 8006e70:	d002      	beq.n	8006e78 <__swsetup_r+0x48>
 8006e72:	4628      	mov	r0, r5
 8006e74:	f7ff faf4 	bl	8006460 <_free_r>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	6363      	str	r3, [r4, #52]	; 0x34
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e82:	81a3      	strh	r3, [r4, #12]
 8006e84:	2300      	movs	r3, #0
 8006e86:	6063      	str	r3, [r4, #4]
 8006e88:	6923      	ldr	r3, [r4, #16]
 8006e8a:	6023      	str	r3, [r4, #0]
 8006e8c:	89a3      	ldrh	r3, [r4, #12]
 8006e8e:	f043 0308 	orr.w	r3, r3, #8
 8006e92:	81a3      	strh	r3, [r4, #12]
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	b94b      	cbnz	r3, 8006eac <__swsetup_r+0x7c>
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea2:	d003      	beq.n	8006eac <__swsetup_r+0x7c>
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	f000 f884 	bl	8006fb4 <__smakebuf_r>
 8006eac:	89a0      	ldrh	r0, [r4, #12]
 8006eae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006eb2:	f010 0301 	ands.w	r3, r0, #1
 8006eb6:	d00a      	beq.n	8006ece <__swsetup_r+0x9e>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60a3      	str	r3, [r4, #8]
 8006ebc:	6963      	ldr	r3, [r4, #20]
 8006ebe:	425b      	negs	r3, r3
 8006ec0:	61a3      	str	r3, [r4, #24]
 8006ec2:	6923      	ldr	r3, [r4, #16]
 8006ec4:	b943      	cbnz	r3, 8006ed8 <__swsetup_r+0xa8>
 8006ec6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006eca:	d1c4      	bne.n	8006e56 <__swsetup_r+0x26>
 8006ecc:	bd38      	pop	{r3, r4, r5, pc}
 8006ece:	0781      	lsls	r1, r0, #30
 8006ed0:	bf58      	it	pl
 8006ed2:	6963      	ldrpl	r3, [r4, #20]
 8006ed4:	60a3      	str	r3, [r4, #8]
 8006ed6:	e7f4      	b.n	8006ec2 <__swsetup_r+0x92>
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e7f7      	b.n	8006ecc <__swsetup_r+0x9c>
 8006edc:	20000064 	.word	0x20000064

08006ee0 <_raise_r>:
 8006ee0:	291f      	cmp	r1, #31
 8006ee2:	b538      	push	{r3, r4, r5, lr}
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	460d      	mov	r5, r1
 8006ee8:	d904      	bls.n	8006ef4 <_raise_r+0x14>
 8006eea:	2316      	movs	r3, #22
 8006eec:	6003      	str	r3, [r0, #0]
 8006eee:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006ef6:	b112      	cbz	r2, 8006efe <_raise_r+0x1e>
 8006ef8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006efc:	b94b      	cbnz	r3, 8006f12 <_raise_r+0x32>
 8006efe:	4620      	mov	r0, r4
 8006f00:	f000 f830 	bl	8006f64 <_getpid_r>
 8006f04:	462a      	mov	r2, r5
 8006f06:	4601      	mov	r1, r0
 8006f08:	4620      	mov	r0, r4
 8006f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f0e:	f000 b817 	b.w	8006f40 <_kill_r>
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d00a      	beq.n	8006f2c <_raise_r+0x4c>
 8006f16:	1c59      	adds	r1, r3, #1
 8006f18:	d103      	bne.n	8006f22 <_raise_r+0x42>
 8006f1a:	2316      	movs	r3, #22
 8006f1c:	6003      	str	r3, [r0, #0]
 8006f1e:	2001      	movs	r0, #1
 8006f20:	e7e7      	b.n	8006ef2 <_raise_r+0x12>
 8006f22:	2400      	movs	r4, #0
 8006f24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f28:	4628      	mov	r0, r5
 8006f2a:	4798      	blx	r3
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	e7e0      	b.n	8006ef2 <_raise_r+0x12>

08006f30 <raise>:
 8006f30:	4b02      	ldr	r3, [pc, #8]	; (8006f3c <raise+0xc>)
 8006f32:	4601      	mov	r1, r0
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	f7ff bfd3 	b.w	8006ee0 <_raise_r>
 8006f3a:	bf00      	nop
 8006f3c:	20000064 	.word	0x20000064

08006f40 <_kill_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4d07      	ldr	r5, [pc, #28]	; (8006f60 <_kill_r+0x20>)
 8006f44:	2300      	movs	r3, #0
 8006f46:	4604      	mov	r4, r0
 8006f48:	4608      	mov	r0, r1
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	602b      	str	r3, [r5, #0]
 8006f4e:	f7fb fcfd 	bl	800294c <_kill>
 8006f52:	1c43      	adds	r3, r0, #1
 8006f54:	d102      	bne.n	8006f5c <_kill_r+0x1c>
 8006f56:	682b      	ldr	r3, [r5, #0]
 8006f58:	b103      	cbz	r3, 8006f5c <_kill_r+0x1c>
 8006f5a:	6023      	str	r3, [r4, #0]
 8006f5c:	bd38      	pop	{r3, r4, r5, pc}
 8006f5e:	bf00      	nop
 8006f60:	200013a8 	.word	0x200013a8

08006f64 <_getpid_r>:
 8006f64:	f7fb bcea 	b.w	800293c <_getpid>

08006f68 <__swhatbuf_r>:
 8006f68:	b570      	push	{r4, r5, r6, lr}
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f70:	2900      	cmp	r1, #0
 8006f72:	b096      	sub	sp, #88	; 0x58
 8006f74:	4615      	mov	r5, r2
 8006f76:	461e      	mov	r6, r3
 8006f78:	da0d      	bge.n	8006f96 <__swhatbuf_r+0x2e>
 8006f7a:	89a3      	ldrh	r3, [r4, #12]
 8006f7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006f80:	f04f 0100 	mov.w	r1, #0
 8006f84:	bf0c      	ite	eq
 8006f86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006f8a:	2340      	movne	r3, #64	; 0x40
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	6031      	str	r1, [r6, #0]
 8006f90:	602b      	str	r3, [r5, #0]
 8006f92:	b016      	add	sp, #88	; 0x58
 8006f94:	bd70      	pop	{r4, r5, r6, pc}
 8006f96:	466a      	mov	r2, sp
 8006f98:	f000 f848 	bl	800702c <_fstat_r>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	dbec      	blt.n	8006f7a <__swhatbuf_r+0x12>
 8006fa0:	9901      	ldr	r1, [sp, #4]
 8006fa2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006fa6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006faa:	4259      	negs	r1, r3
 8006fac:	4159      	adcs	r1, r3
 8006fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fb2:	e7eb      	b.n	8006f8c <__swhatbuf_r+0x24>

08006fb4 <__smakebuf_r>:
 8006fb4:	898b      	ldrh	r3, [r1, #12]
 8006fb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fb8:	079d      	lsls	r5, r3, #30
 8006fba:	4606      	mov	r6, r0
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	d507      	bpl.n	8006fd0 <__smakebuf_r+0x1c>
 8006fc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	6123      	str	r3, [r4, #16]
 8006fc8:	2301      	movs	r3, #1
 8006fca:	6163      	str	r3, [r4, #20]
 8006fcc:	b002      	add	sp, #8
 8006fce:	bd70      	pop	{r4, r5, r6, pc}
 8006fd0:	ab01      	add	r3, sp, #4
 8006fd2:	466a      	mov	r2, sp
 8006fd4:	f7ff ffc8 	bl	8006f68 <__swhatbuf_r>
 8006fd8:	9900      	ldr	r1, [sp, #0]
 8006fda:	4605      	mov	r5, r0
 8006fdc:	4630      	mov	r0, r6
 8006fde:	f7ff fab3 	bl	8006548 <_malloc_r>
 8006fe2:	b948      	cbnz	r0, 8006ff8 <__smakebuf_r+0x44>
 8006fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fe8:	059a      	lsls	r2, r3, #22
 8006fea:	d4ef      	bmi.n	8006fcc <__smakebuf_r+0x18>
 8006fec:	f023 0303 	bic.w	r3, r3, #3
 8006ff0:	f043 0302 	orr.w	r3, r3, #2
 8006ff4:	81a3      	strh	r3, [r4, #12]
 8006ff6:	e7e3      	b.n	8006fc0 <__smakebuf_r+0xc>
 8006ff8:	89a3      	ldrh	r3, [r4, #12]
 8006ffa:	6020      	str	r0, [r4, #0]
 8006ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007000:	81a3      	strh	r3, [r4, #12]
 8007002:	9b00      	ldr	r3, [sp, #0]
 8007004:	6163      	str	r3, [r4, #20]
 8007006:	9b01      	ldr	r3, [sp, #4]
 8007008:	6120      	str	r0, [r4, #16]
 800700a:	b15b      	cbz	r3, 8007024 <__smakebuf_r+0x70>
 800700c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007010:	4630      	mov	r0, r6
 8007012:	f000 f81d 	bl	8007050 <_isatty_r>
 8007016:	b128      	cbz	r0, 8007024 <__smakebuf_r+0x70>
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	f023 0303 	bic.w	r3, r3, #3
 800701e:	f043 0301 	orr.w	r3, r3, #1
 8007022:	81a3      	strh	r3, [r4, #12]
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	431d      	orrs	r5, r3
 8007028:	81a5      	strh	r5, [r4, #12]
 800702a:	e7cf      	b.n	8006fcc <__smakebuf_r+0x18>

0800702c <_fstat_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4d07      	ldr	r5, [pc, #28]	; (800704c <_fstat_r+0x20>)
 8007030:	2300      	movs	r3, #0
 8007032:	4604      	mov	r4, r0
 8007034:	4608      	mov	r0, r1
 8007036:	4611      	mov	r1, r2
 8007038:	602b      	str	r3, [r5, #0]
 800703a:	f7fb fce6 	bl	8002a0a <_fstat>
 800703e:	1c43      	adds	r3, r0, #1
 8007040:	d102      	bne.n	8007048 <_fstat_r+0x1c>
 8007042:	682b      	ldr	r3, [r5, #0]
 8007044:	b103      	cbz	r3, 8007048 <_fstat_r+0x1c>
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	bd38      	pop	{r3, r4, r5, pc}
 800704a:	bf00      	nop
 800704c:	200013a8 	.word	0x200013a8

08007050 <_isatty_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4d06      	ldr	r5, [pc, #24]	; (800706c <_isatty_r+0x1c>)
 8007054:	2300      	movs	r3, #0
 8007056:	4604      	mov	r4, r0
 8007058:	4608      	mov	r0, r1
 800705a:	602b      	str	r3, [r5, #0]
 800705c:	f7fb fce5 	bl	8002a2a <_isatty>
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	d102      	bne.n	800706a <_isatty_r+0x1a>
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	b103      	cbz	r3, 800706a <_isatty_r+0x1a>
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	bd38      	pop	{r3, r4, r5, pc}
 800706c:	200013a8 	.word	0x200013a8

08007070 <sqrt>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	ed2d 8b02 	vpush	{d8}
 8007076:	ec55 4b10 	vmov	r4, r5, d0
 800707a:	f000 f8d1 	bl	8007220 <__ieee754_sqrt>
 800707e:	4622      	mov	r2, r4
 8007080:	462b      	mov	r3, r5
 8007082:	4620      	mov	r0, r4
 8007084:	4629      	mov	r1, r5
 8007086:	eeb0 8a40 	vmov.f32	s16, s0
 800708a:	eef0 8a60 	vmov.f32	s17, s1
 800708e:	f7f9 fd45 	bl	8000b1c <__aeabi_dcmpun>
 8007092:	b990      	cbnz	r0, 80070ba <sqrt+0x4a>
 8007094:	2200      	movs	r2, #0
 8007096:	2300      	movs	r3, #0
 8007098:	4620      	mov	r0, r4
 800709a:	4629      	mov	r1, r5
 800709c:	f7f9 fd16 	bl	8000acc <__aeabi_dcmplt>
 80070a0:	b158      	cbz	r0, 80070ba <sqrt+0x4a>
 80070a2:	f7ff f991 	bl	80063c8 <__errno>
 80070a6:	2321      	movs	r3, #33	; 0x21
 80070a8:	6003      	str	r3, [r0, #0]
 80070aa:	2200      	movs	r2, #0
 80070ac:	2300      	movs	r3, #0
 80070ae:	4610      	mov	r0, r2
 80070b0:	4619      	mov	r1, r3
 80070b2:	f7f9 fbc3 	bl	800083c <__aeabi_ddiv>
 80070b6:	ec41 0b18 	vmov	d8, r0, r1
 80070ba:	eeb0 0a48 	vmov.f32	s0, s16
 80070be:	eef0 0a68 	vmov.f32	s1, s17
 80070c2:	ecbd 8b02 	vpop	{d8}
 80070c6:	bd38      	pop	{r3, r4, r5, pc}

080070c8 <cos>:
 80070c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070ca:	ec53 2b10 	vmov	r2, r3, d0
 80070ce:	4826      	ldr	r0, [pc, #152]	; (8007168 <cos+0xa0>)
 80070d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80070d4:	4281      	cmp	r1, r0
 80070d6:	dc06      	bgt.n	80070e6 <cos+0x1e>
 80070d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007160 <cos+0x98>
 80070dc:	b005      	add	sp, #20
 80070de:	f85d eb04 	ldr.w	lr, [sp], #4
 80070e2:	f000 b979 	b.w	80073d8 <__kernel_cos>
 80070e6:	4821      	ldr	r0, [pc, #132]	; (800716c <cos+0xa4>)
 80070e8:	4281      	cmp	r1, r0
 80070ea:	dd09      	ble.n	8007100 <cos+0x38>
 80070ec:	ee10 0a10 	vmov	r0, s0
 80070f0:	4619      	mov	r1, r3
 80070f2:	f7f9 f8c1 	bl	8000278 <__aeabi_dsub>
 80070f6:	ec41 0b10 	vmov	d0, r0, r1
 80070fa:	b005      	add	sp, #20
 80070fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8007100:	4668      	mov	r0, sp
 8007102:	f000 faf1 	bl	80076e8 <__ieee754_rem_pio2>
 8007106:	f000 0003 	and.w	r0, r0, #3
 800710a:	2801      	cmp	r0, #1
 800710c:	d00b      	beq.n	8007126 <cos+0x5e>
 800710e:	2802      	cmp	r0, #2
 8007110:	d016      	beq.n	8007140 <cos+0x78>
 8007112:	b9e0      	cbnz	r0, 800714e <cos+0x86>
 8007114:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007118:	ed9d 0b00 	vldr	d0, [sp]
 800711c:	f000 f95c 	bl	80073d8 <__kernel_cos>
 8007120:	ec51 0b10 	vmov	r0, r1, d0
 8007124:	e7e7      	b.n	80070f6 <cos+0x2e>
 8007126:	ed9d 1b02 	vldr	d1, [sp, #8]
 800712a:	ed9d 0b00 	vldr	d0, [sp]
 800712e:	f000 fa1b 	bl	8007568 <__kernel_sin>
 8007132:	ec53 2b10 	vmov	r2, r3, d0
 8007136:	ee10 0a10 	vmov	r0, s0
 800713a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800713e:	e7da      	b.n	80070f6 <cos+0x2e>
 8007140:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007144:	ed9d 0b00 	vldr	d0, [sp]
 8007148:	f000 f946 	bl	80073d8 <__kernel_cos>
 800714c:	e7f1      	b.n	8007132 <cos+0x6a>
 800714e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007152:	ed9d 0b00 	vldr	d0, [sp]
 8007156:	2001      	movs	r0, #1
 8007158:	f000 fa06 	bl	8007568 <__kernel_sin>
 800715c:	e7e0      	b.n	8007120 <cos+0x58>
 800715e:	bf00      	nop
	...
 8007168:	3fe921fb 	.word	0x3fe921fb
 800716c:	7fefffff 	.word	0x7fefffff

08007170 <sin>:
 8007170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007172:	ec53 2b10 	vmov	r2, r3, d0
 8007176:	4828      	ldr	r0, [pc, #160]	; (8007218 <sin+0xa8>)
 8007178:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800717c:	4281      	cmp	r1, r0
 800717e:	dc07      	bgt.n	8007190 <sin+0x20>
 8007180:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007210 <sin+0xa0>
 8007184:	2000      	movs	r0, #0
 8007186:	b005      	add	sp, #20
 8007188:	f85d eb04 	ldr.w	lr, [sp], #4
 800718c:	f000 b9ec 	b.w	8007568 <__kernel_sin>
 8007190:	4822      	ldr	r0, [pc, #136]	; (800721c <sin+0xac>)
 8007192:	4281      	cmp	r1, r0
 8007194:	dd09      	ble.n	80071aa <sin+0x3a>
 8007196:	ee10 0a10 	vmov	r0, s0
 800719a:	4619      	mov	r1, r3
 800719c:	f7f9 f86c 	bl	8000278 <__aeabi_dsub>
 80071a0:	ec41 0b10 	vmov	d0, r0, r1
 80071a4:	b005      	add	sp, #20
 80071a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80071aa:	4668      	mov	r0, sp
 80071ac:	f000 fa9c 	bl	80076e8 <__ieee754_rem_pio2>
 80071b0:	f000 0003 	and.w	r0, r0, #3
 80071b4:	2801      	cmp	r0, #1
 80071b6:	d00c      	beq.n	80071d2 <sin+0x62>
 80071b8:	2802      	cmp	r0, #2
 80071ba:	d011      	beq.n	80071e0 <sin+0x70>
 80071bc:	b9f0      	cbnz	r0, 80071fc <sin+0x8c>
 80071be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80071c2:	ed9d 0b00 	vldr	d0, [sp]
 80071c6:	2001      	movs	r0, #1
 80071c8:	f000 f9ce 	bl	8007568 <__kernel_sin>
 80071cc:	ec51 0b10 	vmov	r0, r1, d0
 80071d0:	e7e6      	b.n	80071a0 <sin+0x30>
 80071d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80071d6:	ed9d 0b00 	vldr	d0, [sp]
 80071da:	f000 f8fd 	bl	80073d8 <__kernel_cos>
 80071de:	e7f5      	b.n	80071cc <sin+0x5c>
 80071e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80071e4:	ed9d 0b00 	vldr	d0, [sp]
 80071e8:	2001      	movs	r0, #1
 80071ea:	f000 f9bd 	bl	8007568 <__kernel_sin>
 80071ee:	ec53 2b10 	vmov	r2, r3, d0
 80071f2:	ee10 0a10 	vmov	r0, s0
 80071f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80071fa:	e7d1      	b.n	80071a0 <sin+0x30>
 80071fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007200:	ed9d 0b00 	vldr	d0, [sp]
 8007204:	f000 f8e8 	bl	80073d8 <__kernel_cos>
 8007208:	e7f1      	b.n	80071ee <sin+0x7e>
 800720a:	bf00      	nop
 800720c:	f3af 8000 	nop.w
	...
 8007218:	3fe921fb 	.word	0x3fe921fb
 800721c:	7fefffff 	.word	0x7fefffff

08007220 <__ieee754_sqrt>:
 8007220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	ec55 4b10 	vmov	r4, r5, d0
 8007228:	4e67      	ldr	r6, [pc, #412]	; (80073c8 <__ieee754_sqrt+0x1a8>)
 800722a:	43ae      	bics	r6, r5
 800722c:	ee10 0a10 	vmov	r0, s0
 8007230:	ee10 2a10 	vmov	r2, s0
 8007234:	4629      	mov	r1, r5
 8007236:	462b      	mov	r3, r5
 8007238:	d10d      	bne.n	8007256 <__ieee754_sqrt+0x36>
 800723a:	f7f9 f9d5 	bl	80005e8 <__aeabi_dmul>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	4620      	mov	r0, r4
 8007244:	4629      	mov	r1, r5
 8007246:	f7f9 f819 	bl	800027c <__adddf3>
 800724a:	4604      	mov	r4, r0
 800724c:	460d      	mov	r5, r1
 800724e:	ec45 4b10 	vmov	d0, r4, r5
 8007252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007256:	2d00      	cmp	r5, #0
 8007258:	dc0b      	bgt.n	8007272 <__ieee754_sqrt+0x52>
 800725a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800725e:	4326      	orrs	r6, r4
 8007260:	d0f5      	beq.n	800724e <__ieee754_sqrt+0x2e>
 8007262:	b135      	cbz	r5, 8007272 <__ieee754_sqrt+0x52>
 8007264:	f7f9 f808 	bl	8000278 <__aeabi_dsub>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	f7f9 fae6 	bl	800083c <__aeabi_ddiv>
 8007270:	e7eb      	b.n	800724a <__ieee754_sqrt+0x2a>
 8007272:	1509      	asrs	r1, r1, #20
 8007274:	f000 808d 	beq.w	8007392 <__ieee754_sqrt+0x172>
 8007278:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800727c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007280:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007284:	07c9      	lsls	r1, r1, #31
 8007286:	bf5c      	itt	pl
 8007288:	005b      	lslpl	r3, r3, #1
 800728a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800728e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007292:	bf58      	it	pl
 8007294:	0052      	lslpl	r2, r2, #1
 8007296:	2500      	movs	r5, #0
 8007298:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800729c:	1076      	asrs	r6, r6, #1
 800729e:	0052      	lsls	r2, r2, #1
 80072a0:	f04f 0e16 	mov.w	lr, #22
 80072a4:	46ac      	mov	ip, r5
 80072a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072aa:	eb0c 0001 	add.w	r0, ip, r1
 80072ae:	4298      	cmp	r0, r3
 80072b0:	bfde      	ittt	le
 80072b2:	1a1b      	suble	r3, r3, r0
 80072b4:	eb00 0c01 	addle.w	ip, r0, r1
 80072b8:	186d      	addle	r5, r5, r1
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	f1be 0e01 	subs.w	lr, lr, #1
 80072c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80072c4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80072c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80072cc:	d1ed      	bne.n	80072aa <__ieee754_sqrt+0x8a>
 80072ce:	4674      	mov	r4, lr
 80072d0:	2720      	movs	r7, #32
 80072d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80072d6:	4563      	cmp	r3, ip
 80072d8:	eb01 000e 	add.w	r0, r1, lr
 80072dc:	dc02      	bgt.n	80072e4 <__ieee754_sqrt+0xc4>
 80072de:	d113      	bne.n	8007308 <__ieee754_sqrt+0xe8>
 80072e0:	4290      	cmp	r0, r2
 80072e2:	d811      	bhi.n	8007308 <__ieee754_sqrt+0xe8>
 80072e4:	2800      	cmp	r0, #0
 80072e6:	eb00 0e01 	add.w	lr, r0, r1
 80072ea:	da57      	bge.n	800739c <__ieee754_sqrt+0x17c>
 80072ec:	f1be 0f00 	cmp.w	lr, #0
 80072f0:	db54      	blt.n	800739c <__ieee754_sqrt+0x17c>
 80072f2:	f10c 0801 	add.w	r8, ip, #1
 80072f6:	eba3 030c 	sub.w	r3, r3, ip
 80072fa:	4290      	cmp	r0, r2
 80072fc:	bf88      	it	hi
 80072fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007302:	1a12      	subs	r2, r2, r0
 8007304:	440c      	add	r4, r1
 8007306:	46c4      	mov	ip, r8
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	3f01      	subs	r7, #1
 800730c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007310:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007314:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007318:	d1dd      	bne.n	80072d6 <__ieee754_sqrt+0xb6>
 800731a:	4313      	orrs	r3, r2
 800731c:	d01b      	beq.n	8007356 <__ieee754_sqrt+0x136>
 800731e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80073cc <__ieee754_sqrt+0x1ac>
 8007322:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80073d0 <__ieee754_sqrt+0x1b0>
 8007326:	e9da 0100 	ldrd	r0, r1, [sl]
 800732a:	e9db 2300 	ldrd	r2, r3, [fp]
 800732e:	f7f8 ffa3 	bl	8000278 <__aeabi_dsub>
 8007332:	e9da 8900 	ldrd	r8, r9, [sl]
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4640      	mov	r0, r8
 800733c:	4649      	mov	r1, r9
 800733e:	f7f9 fbcf 	bl	8000ae0 <__aeabi_dcmple>
 8007342:	b140      	cbz	r0, 8007356 <__ieee754_sqrt+0x136>
 8007344:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007348:	e9da 0100 	ldrd	r0, r1, [sl]
 800734c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007350:	d126      	bne.n	80073a0 <__ieee754_sqrt+0x180>
 8007352:	3501      	adds	r5, #1
 8007354:	463c      	mov	r4, r7
 8007356:	106a      	asrs	r2, r5, #1
 8007358:	0863      	lsrs	r3, r4, #1
 800735a:	07e9      	lsls	r1, r5, #31
 800735c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007360:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007364:	bf48      	it	mi
 8007366:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800736a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800736e:	461c      	mov	r4, r3
 8007370:	e76d      	b.n	800724e <__ieee754_sqrt+0x2e>
 8007372:	0ad3      	lsrs	r3, r2, #11
 8007374:	3815      	subs	r0, #21
 8007376:	0552      	lsls	r2, r2, #21
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0fa      	beq.n	8007372 <__ieee754_sqrt+0x152>
 800737c:	02dc      	lsls	r4, r3, #11
 800737e:	d50a      	bpl.n	8007396 <__ieee754_sqrt+0x176>
 8007380:	f1c1 0420 	rsb	r4, r1, #32
 8007384:	fa22 f404 	lsr.w	r4, r2, r4
 8007388:	1e4d      	subs	r5, r1, #1
 800738a:	408a      	lsls	r2, r1
 800738c:	4323      	orrs	r3, r4
 800738e:	1b41      	subs	r1, r0, r5
 8007390:	e772      	b.n	8007278 <__ieee754_sqrt+0x58>
 8007392:	4608      	mov	r0, r1
 8007394:	e7f0      	b.n	8007378 <__ieee754_sqrt+0x158>
 8007396:	005b      	lsls	r3, r3, #1
 8007398:	3101      	adds	r1, #1
 800739a:	e7ef      	b.n	800737c <__ieee754_sqrt+0x15c>
 800739c:	46e0      	mov	r8, ip
 800739e:	e7aa      	b.n	80072f6 <__ieee754_sqrt+0xd6>
 80073a0:	f7f8 ff6c 	bl	800027c <__adddf3>
 80073a4:	e9da 8900 	ldrd	r8, r9, [sl]
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4640      	mov	r0, r8
 80073ae:	4649      	mov	r1, r9
 80073b0:	f7f9 fb8c 	bl	8000acc <__aeabi_dcmplt>
 80073b4:	b120      	cbz	r0, 80073c0 <__ieee754_sqrt+0x1a0>
 80073b6:	1ca0      	adds	r0, r4, #2
 80073b8:	bf08      	it	eq
 80073ba:	3501      	addeq	r5, #1
 80073bc:	3402      	adds	r4, #2
 80073be:	e7ca      	b.n	8007356 <__ieee754_sqrt+0x136>
 80073c0:	3401      	adds	r4, #1
 80073c2:	f024 0401 	bic.w	r4, r4, #1
 80073c6:	e7c6      	b.n	8007356 <__ieee754_sqrt+0x136>
 80073c8:	7ff00000 	.word	0x7ff00000
 80073cc:	20000068 	.word	0x20000068
 80073d0:	20000070 	.word	0x20000070
 80073d4:	00000000 	.word	0x00000000

080073d8 <__kernel_cos>:
 80073d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	ec57 6b10 	vmov	r6, r7, d0
 80073e0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80073e4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80073e8:	ed8d 1b00 	vstr	d1, [sp]
 80073ec:	da07      	bge.n	80073fe <__kernel_cos+0x26>
 80073ee:	ee10 0a10 	vmov	r0, s0
 80073f2:	4639      	mov	r1, r7
 80073f4:	f7f9 fba8 	bl	8000b48 <__aeabi_d2iz>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	f000 8088 	beq.w	800750e <__kernel_cos+0x136>
 80073fe:	4632      	mov	r2, r6
 8007400:	463b      	mov	r3, r7
 8007402:	4630      	mov	r0, r6
 8007404:	4639      	mov	r1, r7
 8007406:	f7f9 f8ef 	bl	80005e8 <__aeabi_dmul>
 800740a:	4b51      	ldr	r3, [pc, #324]	; (8007550 <__kernel_cos+0x178>)
 800740c:	2200      	movs	r2, #0
 800740e:	4604      	mov	r4, r0
 8007410:	460d      	mov	r5, r1
 8007412:	f7f9 f8e9 	bl	80005e8 <__aeabi_dmul>
 8007416:	a340      	add	r3, pc, #256	; (adr r3, 8007518 <__kernel_cos+0x140>)
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	4682      	mov	sl, r0
 800741e:	468b      	mov	fp, r1
 8007420:	4620      	mov	r0, r4
 8007422:	4629      	mov	r1, r5
 8007424:	f7f9 f8e0 	bl	80005e8 <__aeabi_dmul>
 8007428:	a33d      	add	r3, pc, #244	; (adr r3, 8007520 <__kernel_cos+0x148>)
 800742a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742e:	f7f8 ff25 	bl	800027c <__adddf3>
 8007432:	4622      	mov	r2, r4
 8007434:	462b      	mov	r3, r5
 8007436:	f7f9 f8d7 	bl	80005e8 <__aeabi_dmul>
 800743a:	a33b      	add	r3, pc, #236	; (adr r3, 8007528 <__kernel_cos+0x150>)
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	f7f8 ff1a 	bl	8000278 <__aeabi_dsub>
 8007444:	4622      	mov	r2, r4
 8007446:	462b      	mov	r3, r5
 8007448:	f7f9 f8ce 	bl	80005e8 <__aeabi_dmul>
 800744c:	a338      	add	r3, pc, #224	; (adr r3, 8007530 <__kernel_cos+0x158>)
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	f7f8 ff13 	bl	800027c <__adddf3>
 8007456:	4622      	mov	r2, r4
 8007458:	462b      	mov	r3, r5
 800745a:	f7f9 f8c5 	bl	80005e8 <__aeabi_dmul>
 800745e:	a336      	add	r3, pc, #216	; (adr r3, 8007538 <__kernel_cos+0x160>)
 8007460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007464:	f7f8 ff08 	bl	8000278 <__aeabi_dsub>
 8007468:	4622      	mov	r2, r4
 800746a:	462b      	mov	r3, r5
 800746c:	f7f9 f8bc 	bl	80005e8 <__aeabi_dmul>
 8007470:	a333      	add	r3, pc, #204	; (adr r3, 8007540 <__kernel_cos+0x168>)
 8007472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007476:	f7f8 ff01 	bl	800027c <__adddf3>
 800747a:	4622      	mov	r2, r4
 800747c:	462b      	mov	r3, r5
 800747e:	f7f9 f8b3 	bl	80005e8 <__aeabi_dmul>
 8007482:	4622      	mov	r2, r4
 8007484:	462b      	mov	r3, r5
 8007486:	f7f9 f8af 	bl	80005e8 <__aeabi_dmul>
 800748a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800748e:	4604      	mov	r4, r0
 8007490:	460d      	mov	r5, r1
 8007492:	4630      	mov	r0, r6
 8007494:	4639      	mov	r1, r7
 8007496:	f7f9 f8a7 	bl	80005e8 <__aeabi_dmul>
 800749a:	460b      	mov	r3, r1
 800749c:	4602      	mov	r2, r0
 800749e:	4629      	mov	r1, r5
 80074a0:	4620      	mov	r0, r4
 80074a2:	f7f8 fee9 	bl	8000278 <__aeabi_dsub>
 80074a6:	4b2b      	ldr	r3, [pc, #172]	; (8007554 <__kernel_cos+0x17c>)
 80074a8:	4598      	cmp	r8, r3
 80074aa:	4606      	mov	r6, r0
 80074ac:	460f      	mov	r7, r1
 80074ae:	dc10      	bgt.n	80074d2 <__kernel_cos+0xfa>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4650      	mov	r0, sl
 80074b6:	4659      	mov	r1, fp
 80074b8:	f7f8 fede 	bl	8000278 <__aeabi_dsub>
 80074bc:	460b      	mov	r3, r1
 80074be:	4926      	ldr	r1, [pc, #152]	; (8007558 <__kernel_cos+0x180>)
 80074c0:	4602      	mov	r2, r0
 80074c2:	2000      	movs	r0, #0
 80074c4:	f7f8 fed8 	bl	8000278 <__aeabi_dsub>
 80074c8:	ec41 0b10 	vmov	d0, r0, r1
 80074cc:	b003      	add	sp, #12
 80074ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d2:	4b22      	ldr	r3, [pc, #136]	; (800755c <__kernel_cos+0x184>)
 80074d4:	4920      	ldr	r1, [pc, #128]	; (8007558 <__kernel_cos+0x180>)
 80074d6:	4598      	cmp	r8, r3
 80074d8:	bfcc      	ite	gt
 80074da:	4d21      	ldrgt	r5, [pc, #132]	; (8007560 <__kernel_cos+0x188>)
 80074dc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80074e0:	2400      	movs	r4, #0
 80074e2:	4622      	mov	r2, r4
 80074e4:	462b      	mov	r3, r5
 80074e6:	2000      	movs	r0, #0
 80074e8:	f7f8 fec6 	bl	8000278 <__aeabi_dsub>
 80074ec:	4622      	mov	r2, r4
 80074ee:	4680      	mov	r8, r0
 80074f0:	4689      	mov	r9, r1
 80074f2:	462b      	mov	r3, r5
 80074f4:	4650      	mov	r0, sl
 80074f6:	4659      	mov	r1, fp
 80074f8:	f7f8 febe 	bl	8000278 <__aeabi_dsub>
 80074fc:	4632      	mov	r2, r6
 80074fe:	463b      	mov	r3, r7
 8007500:	f7f8 feba 	bl	8000278 <__aeabi_dsub>
 8007504:	4602      	mov	r2, r0
 8007506:	460b      	mov	r3, r1
 8007508:	4640      	mov	r0, r8
 800750a:	4649      	mov	r1, r9
 800750c:	e7da      	b.n	80074c4 <__kernel_cos+0xec>
 800750e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007548 <__kernel_cos+0x170>
 8007512:	e7db      	b.n	80074cc <__kernel_cos+0xf4>
 8007514:	f3af 8000 	nop.w
 8007518:	be8838d4 	.word	0xbe8838d4
 800751c:	bda8fae9 	.word	0xbda8fae9
 8007520:	bdb4b1c4 	.word	0xbdb4b1c4
 8007524:	3e21ee9e 	.word	0x3e21ee9e
 8007528:	809c52ad 	.word	0x809c52ad
 800752c:	3e927e4f 	.word	0x3e927e4f
 8007530:	19cb1590 	.word	0x19cb1590
 8007534:	3efa01a0 	.word	0x3efa01a0
 8007538:	16c15177 	.word	0x16c15177
 800753c:	3f56c16c 	.word	0x3f56c16c
 8007540:	5555554c 	.word	0x5555554c
 8007544:	3fa55555 	.word	0x3fa55555
 8007548:	00000000 	.word	0x00000000
 800754c:	3ff00000 	.word	0x3ff00000
 8007550:	3fe00000 	.word	0x3fe00000
 8007554:	3fd33332 	.word	0x3fd33332
 8007558:	3ff00000 	.word	0x3ff00000
 800755c:	3fe90000 	.word	0x3fe90000
 8007560:	3fd20000 	.word	0x3fd20000
 8007564:	00000000 	.word	0x00000000

08007568 <__kernel_sin>:
 8007568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800756c:	ed2d 8b04 	vpush	{d8-d9}
 8007570:	eeb0 8a41 	vmov.f32	s16, s2
 8007574:	eef0 8a61 	vmov.f32	s17, s3
 8007578:	ec55 4b10 	vmov	r4, r5, d0
 800757c:	b083      	sub	sp, #12
 800757e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007582:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007586:	9001      	str	r0, [sp, #4]
 8007588:	da06      	bge.n	8007598 <__kernel_sin+0x30>
 800758a:	ee10 0a10 	vmov	r0, s0
 800758e:	4629      	mov	r1, r5
 8007590:	f7f9 fada 	bl	8000b48 <__aeabi_d2iz>
 8007594:	2800      	cmp	r0, #0
 8007596:	d051      	beq.n	800763c <__kernel_sin+0xd4>
 8007598:	4622      	mov	r2, r4
 800759a:	462b      	mov	r3, r5
 800759c:	4620      	mov	r0, r4
 800759e:	4629      	mov	r1, r5
 80075a0:	f7f9 f822 	bl	80005e8 <__aeabi_dmul>
 80075a4:	4682      	mov	sl, r0
 80075a6:	468b      	mov	fp, r1
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4620      	mov	r0, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	f7f9 f81a 	bl	80005e8 <__aeabi_dmul>
 80075b4:	a341      	add	r3, pc, #260	; (adr r3, 80076bc <__kernel_sin+0x154>)
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	4680      	mov	r8, r0
 80075bc:	4689      	mov	r9, r1
 80075be:	4650      	mov	r0, sl
 80075c0:	4659      	mov	r1, fp
 80075c2:	f7f9 f811 	bl	80005e8 <__aeabi_dmul>
 80075c6:	a33f      	add	r3, pc, #252	; (adr r3, 80076c4 <__kernel_sin+0x15c>)
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	f7f8 fe54 	bl	8000278 <__aeabi_dsub>
 80075d0:	4652      	mov	r2, sl
 80075d2:	465b      	mov	r3, fp
 80075d4:	f7f9 f808 	bl	80005e8 <__aeabi_dmul>
 80075d8:	a33c      	add	r3, pc, #240	; (adr r3, 80076cc <__kernel_sin+0x164>)
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	f7f8 fe4d 	bl	800027c <__adddf3>
 80075e2:	4652      	mov	r2, sl
 80075e4:	465b      	mov	r3, fp
 80075e6:	f7f8 ffff 	bl	80005e8 <__aeabi_dmul>
 80075ea:	a33a      	add	r3, pc, #232	; (adr r3, 80076d4 <__kernel_sin+0x16c>)
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	f7f8 fe42 	bl	8000278 <__aeabi_dsub>
 80075f4:	4652      	mov	r2, sl
 80075f6:	465b      	mov	r3, fp
 80075f8:	f7f8 fff6 	bl	80005e8 <__aeabi_dmul>
 80075fc:	a337      	add	r3, pc, #220	; (adr r3, 80076dc <__kernel_sin+0x174>)
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	f7f8 fe3b 	bl	800027c <__adddf3>
 8007606:	9b01      	ldr	r3, [sp, #4]
 8007608:	4606      	mov	r6, r0
 800760a:	460f      	mov	r7, r1
 800760c:	b9eb      	cbnz	r3, 800764a <__kernel_sin+0xe2>
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	4650      	mov	r0, sl
 8007614:	4659      	mov	r1, fp
 8007616:	f7f8 ffe7 	bl	80005e8 <__aeabi_dmul>
 800761a:	a325      	add	r3, pc, #148	; (adr r3, 80076b0 <__kernel_sin+0x148>)
 800761c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007620:	f7f8 fe2a 	bl	8000278 <__aeabi_dsub>
 8007624:	4642      	mov	r2, r8
 8007626:	464b      	mov	r3, r9
 8007628:	f7f8 ffde 	bl	80005e8 <__aeabi_dmul>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	4620      	mov	r0, r4
 8007632:	4629      	mov	r1, r5
 8007634:	f7f8 fe22 	bl	800027c <__adddf3>
 8007638:	4604      	mov	r4, r0
 800763a:	460d      	mov	r5, r1
 800763c:	ec45 4b10 	vmov	d0, r4, r5
 8007640:	b003      	add	sp, #12
 8007642:	ecbd 8b04 	vpop	{d8-d9}
 8007646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764a:	4b1b      	ldr	r3, [pc, #108]	; (80076b8 <__kernel_sin+0x150>)
 800764c:	ec51 0b18 	vmov	r0, r1, d8
 8007650:	2200      	movs	r2, #0
 8007652:	f7f8 ffc9 	bl	80005e8 <__aeabi_dmul>
 8007656:	4632      	mov	r2, r6
 8007658:	ec41 0b19 	vmov	d9, r0, r1
 800765c:	463b      	mov	r3, r7
 800765e:	4640      	mov	r0, r8
 8007660:	4649      	mov	r1, r9
 8007662:	f7f8 ffc1 	bl	80005e8 <__aeabi_dmul>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	ec51 0b19 	vmov	r0, r1, d9
 800766e:	f7f8 fe03 	bl	8000278 <__aeabi_dsub>
 8007672:	4652      	mov	r2, sl
 8007674:	465b      	mov	r3, fp
 8007676:	f7f8 ffb7 	bl	80005e8 <__aeabi_dmul>
 800767a:	ec53 2b18 	vmov	r2, r3, d8
 800767e:	f7f8 fdfb 	bl	8000278 <__aeabi_dsub>
 8007682:	a30b      	add	r3, pc, #44	; (adr r3, 80076b0 <__kernel_sin+0x148>)
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	4606      	mov	r6, r0
 800768a:	460f      	mov	r7, r1
 800768c:	4640      	mov	r0, r8
 800768e:	4649      	mov	r1, r9
 8007690:	f7f8 ffaa 	bl	80005e8 <__aeabi_dmul>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4630      	mov	r0, r6
 800769a:	4639      	mov	r1, r7
 800769c:	f7f8 fdee 	bl	800027c <__adddf3>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4620      	mov	r0, r4
 80076a6:	4629      	mov	r1, r5
 80076a8:	f7f8 fde6 	bl	8000278 <__aeabi_dsub>
 80076ac:	e7c4      	b.n	8007638 <__kernel_sin+0xd0>
 80076ae:	bf00      	nop
 80076b0:	55555549 	.word	0x55555549
 80076b4:	3fc55555 	.word	0x3fc55555
 80076b8:	3fe00000 	.word	0x3fe00000
 80076bc:	5acfd57c 	.word	0x5acfd57c
 80076c0:	3de5d93a 	.word	0x3de5d93a
 80076c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80076c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80076cc:	57b1fe7d 	.word	0x57b1fe7d
 80076d0:	3ec71de3 	.word	0x3ec71de3
 80076d4:	19c161d5 	.word	0x19c161d5
 80076d8:	3f2a01a0 	.word	0x3f2a01a0
 80076dc:	1110f8a6 	.word	0x1110f8a6
 80076e0:	3f811111 	.word	0x3f811111
 80076e4:	00000000 	.word	0x00000000

080076e8 <__ieee754_rem_pio2>:
 80076e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	ed2d 8b02 	vpush	{d8}
 80076f0:	ec55 4b10 	vmov	r4, r5, d0
 80076f4:	4bca      	ldr	r3, [pc, #808]	; (8007a20 <__ieee754_rem_pio2+0x338>)
 80076f6:	b08b      	sub	sp, #44	; 0x2c
 80076f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80076fc:	4598      	cmp	r8, r3
 80076fe:	4682      	mov	sl, r0
 8007700:	9502      	str	r5, [sp, #8]
 8007702:	dc08      	bgt.n	8007716 <__ieee754_rem_pio2+0x2e>
 8007704:	2200      	movs	r2, #0
 8007706:	2300      	movs	r3, #0
 8007708:	ed80 0b00 	vstr	d0, [r0]
 800770c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007710:	f04f 0b00 	mov.w	fp, #0
 8007714:	e028      	b.n	8007768 <__ieee754_rem_pio2+0x80>
 8007716:	4bc3      	ldr	r3, [pc, #780]	; (8007a24 <__ieee754_rem_pio2+0x33c>)
 8007718:	4598      	cmp	r8, r3
 800771a:	dc78      	bgt.n	800780e <__ieee754_rem_pio2+0x126>
 800771c:	9b02      	ldr	r3, [sp, #8]
 800771e:	4ec2      	ldr	r6, [pc, #776]	; (8007a28 <__ieee754_rem_pio2+0x340>)
 8007720:	2b00      	cmp	r3, #0
 8007722:	ee10 0a10 	vmov	r0, s0
 8007726:	a3b0      	add	r3, pc, #704	; (adr r3, 80079e8 <__ieee754_rem_pio2+0x300>)
 8007728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772c:	4629      	mov	r1, r5
 800772e:	dd39      	ble.n	80077a4 <__ieee754_rem_pio2+0xbc>
 8007730:	f7f8 fda2 	bl	8000278 <__aeabi_dsub>
 8007734:	45b0      	cmp	r8, r6
 8007736:	4604      	mov	r4, r0
 8007738:	460d      	mov	r5, r1
 800773a:	d01b      	beq.n	8007774 <__ieee754_rem_pio2+0x8c>
 800773c:	a3ac      	add	r3, pc, #688	; (adr r3, 80079f0 <__ieee754_rem_pio2+0x308>)
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	f7f8 fd99 	bl	8000278 <__aeabi_dsub>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	e9ca 2300 	strd	r2, r3, [sl]
 800774e:	4620      	mov	r0, r4
 8007750:	4629      	mov	r1, r5
 8007752:	f7f8 fd91 	bl	8000278 <__aeabi_dsub>
 8007756:	a3a6      	add	r3, pc, #664	; (adr r3, 80079f0 <__ieee754_rem_pio2+0x308>)
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	f7f8 fd8c 	bl	8000278 <__aeabi_dsub>
 8007760:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007764:	f04f 0b01 	mov.w	fp, #1
 8007768:	4658      	mov	r0, fp
 800776a:	b00b      	add	sp, #44	; 0x2c
 800776c:	ecbd 8b02 	vpop	{d8}
 8007770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007774:	a3a0      	add	r3, pc, #640	; (adr r3, 80079f8 <__ieee754_rem_pio2+0x310>)
 8007776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777a:	f7f8 fd7d 	bl	8000278 <__aeabi_dsub>
 800777e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007a00 <__ieee754_rem_pio2+0x318>)
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	4604      	mov	r4, r0
 8007786:	460d      	mov	r5, r1
 8007788:	f7f8 fd76 	bl	8000278 <__aeabi_dsub>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	e9ca 2300 	strd	r2, r3, [sl]
 8007794:	4620      	mov	r0, r4
 8007796:	4629      	mov	r1, r5
 8007798:	f7f8 fd6e 	bl	8000278 <__aeabi_dsub>
 800779c:	a398      	add	r3, pc, #608	; (adr r3, 8007a00 <__ieee754_rem_pio2+0x318>)
 800779e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a2:	e7db      	b.n	800775c <__ieee754_rem_pio2+0x74>
 80077a4:	f7f8 fd6a 	bl	800027c <__adddf3>
 80077a8:	45b0      	cmp	r8, r6
 80077aa:	4604      	mov	r4, r0
 80077ac:	460d      	mov	r5, r1
 80077ae:	d016      	beq.n	80077de <__ieee754_rem_pio2+0xf6>
 80077b0:	a38f      	add	r3, pc, #572	; (adr r3, 80079f0 <__ieee754_rem_pio2+0x308>)
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f7f8 fd61 	bl	800027c <__adddf3>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	e9ca 2300 	strd	r2, r3, [sl]
 80077c2:	4620      	mov	r0, r4
 80077c4:	4629      	mov	r1, r5
 80077c6:	f7f8 fd57 	bl	8000278 <__aeabi_dsub>
 80077ca:	a389      	add	r3, pc, #548	; (adr r3, 80079f0 <__ieee754_rem_pio2+0x308>)
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	f7f8 fd54 	bl	800027c <__adddf3>
 80077d4:	f04f 3bff 	mov.w	fp, #4294967295
 80077d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80077dc:	e7c4      	b.n	8007768 <__ieee754_rem_pio2+0x80>
 80077de:	a386      	add	r3, pc, #536	; (adr r3, 80079f8 <__ieee754_rem_pio2+0x310>)
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	f7f8 fd4a 	bl	800027c <__adddf3>
 80077e8:	a385      	add	r3, pc, #532	; (adr r3, 8007a00 <__ieee754_rem_pio2+0x318>)
 80077ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ee:	4604      	mov	r4, r0
 80077f0:	460d      	mov	r5, r1
 80077f2:	f7f8 fd43 	bl	800027c <__adddf3>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	e9ca 2300 	strd	r2, r3, [sl]
 80077fe:	4620      	mov	r0, r4
 8007800:	4629      	mov	r1, r5
 8007802:	f7f8 fd39 	bl	8000278 <__aeabi_dsub>
 8007806:	a37e      	add	r3, pc, #504	; (adr r3, 8007a00 <__ieee754_rem_pio2+0x318>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	e7e0      	b.n	80077d0 <__ieee754_rem_pio2+0xe8>
 800780e:	4b87      	ldr	r3, [pc, #540]	; (8007a2c <__ieee754_rem_pio2+0x344>)
 8007810:	4598      	cmp	r8, r3
 8007812:	f300 80d8 	bgt.w	80079c6 <__ieee754_rem_pio2+0x2de>
 8007816:	f000 f96d 	bl	8007af4 <fabs>
 800781a:	ec55 4b10 	vmov	r4, r5, d0
 800781e:	ee10 0a10 	vmov	r0, s0
 8007822:	a379      	add	r3, pc, #484	; (adr r3, 8007a08 <__ieee754_rem_pio2+0x320>)
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	4629      	mov	r1, r5
 800782a:	f7f8 fedd 	bl	80005e8 <__aeabi_dmul>
 800782e:	4b80      	ldr	r3, [pc, #512]	; (8007a30 <__ieee754_rem_pio2+0x348>)
 8007830:	2200      	movs	r2, #0
 8007832:	f7f8 fd23 	bl	800027c <__adddf3>
 8007836:	f7f9 f987 	bl	8000b48 <__aeabi_d2iz>
 800783a:	4683      	mov	fp, r0
 800783c:	f7f8 fe6a 	bl	8000514 <__aeabi_i2d>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	ec43 2b18 	vmov	d8, r2, r3
 8007848:	a367      	add	r3, pc, #412	; (adr r3, 80079e8 <__ieee754_rem_pio2+0x300>)
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	f7f8 fecb 	bl	80005e8 <__aeabi_dmul>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4620      	mov	r0, r4
 8007858:	4629      	mov	r1, r5
 800785a:	f7f8 fd0d 	bl	8000278 <__aeabi_dsub>
 800785e:	a364      	add	r3, pc, #400	; (adr r3, 80079f0 <__ieee754_rem_pio2+0x308>)
 8007860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007864:	4606      	mov	r6, r0
 8007866:	460f      	mov	r7, r1
 8007868:	ec51 0b18 	vmov	r0, r1, d8
 800786c:	f7f8 febc 	bl	80005e8 <__aeabi_dmul>
 8007870:	f1bb 0f1f 	cmp.w	fp, #31
 8007874:	4604      	mov	r4, r0
 8007876:	460d      	mov	r5, r1
 8007878:	dc0d      	bgt.n	8007896 <__ieee754_rem_pio2+0x1ae>
 800787a:	4b6e      	ldr	r3, [pc, #440]	; (8007a34 <__ieee754_rem_pio2+0x34c>)
 800787c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007884:	4543      	cmp	r3, r8
 8007886:	d006      	beq.n	8007896 <__ieee754_rem_pio2+0x1ae>
 8007888:	4622      	mov	r2, r4
 800788a:	462b      	mov	r3, r5
 800788c:	4630      	mov	r0, r6
 800788e:	4639      	mov	r1, r7
 8007890:	f7f8 fcf2 	bl	8000278 <__aeabi_dsub>
 8007894:	e00e      	b.n	80078b4 <__ieee754_rem_pio2+0x1cc>
 8007896:	462b      	mov	r3, r5
 8007898:	4622      	mov	r2, r4
 800789a:	4630      	mov	r0, r6
 800789c:	4639      	mov	r1, r7
 800789e:	f7f8 fceb 	bl	8000278 <__aeabi_dsub>
 80078a2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80078a6:	9303      	str	r3, [sp, #12]
 80078a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80078ac:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80078b0:	2b10      	cmp	r3, #16
 80078b2:	dc02      	bgt.n	80078ba <__ieee754_rem_pio2+0x1d2>
 80078b4:	e9ca 0100 	strd	r0, r1, [sl]
 80078b8:	e039      	b.n	800792e <__ieee754_rem_pio2+0x246>
 80078ba:	a34f      	add	r3, pc, #316	; (adr r3, 80079f8 <__ieee754_rem_pio2+0x310>)
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	ec51 0b18 	vmov	r0, r1, d8
 80078c4:	f7f8 fe90 	bl	80005e8 <__aeabi_dmul>
 80078c8:	4604      	mov	r4, r0
 80078ca:	460d      	mov	r5, r1
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	4630      	mov	r0, r6
 80078d2:	4639      	mov	r1, r7
 80078d4:	f7f8 fcd0 	bl	8000278 <__aeabi_dsub>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4680      	mov	r8, r0
 80078de:	4689      	mov	r9, r1
 80078e0:	4630      	mov	r0, r6
 80078e2:	4639      	mov	r1, r7
 80078e4:	f7f8 fcc8 	bl	8000278 <__aeabi_dsub>
 80078e8:	4622      	mov	r2, r4
 80078ea:	462b      	mov	r3, r5
 80078ec:	f7f8 fcc4 	bl	8000278 <__aeabi_dsub>
 80078f0:	a343      	add	r3, pc, #268	; (adr r3, 8007a00 <__ieee754_rem_pio2+0x318>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	4604      	mov	r4, r0
 80078f8:	460d      	mov	r5, r1
 80078fa:	ec51 0b18 	vmov	r0, r1, d8
 80078fe:	f7f8 fe73 	bl	80005e8 <__aeabi_dmul>
 8007902:	4622      	mov	r2, r4
 8007904:	462b      	mov	r3, r5
 8007906:	f7f8 fcb7 	bl	8000278 <__aeabi_dsub>
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	4604      	mov	r4, r0
 8007910:	460d      	mov	r5, r1
 8007912:	4640      	mov	r0, r8
 8007914:	4649      	mov	r1, r9
 8007916:	f7f8 fcaf 	bl	8000278 <__aeabi_dsub>
 800791a:	9a03      	ldr	r2, [sp, #12]
 800791c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b31      	cmp	r3, #49	; 0x31
 8007924:	dc24      	bgt.n	8007970 <__ieee754_rem_pio2+0x288>
 8007926:	e9ca 0100 	strd	r0, r1, [sl]
 800792a:	4646      	mov	r6, r8
 800792c:	464f      	mov	r7, r9
 800792e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007932:	4630      	mov	r0, r6
 8007934:	4642      	mov	r2, r8
 8007936:	464b      	mov	r3, r9
 8007938:	4639      	mov	r1, r7
 800793a:	f7f8 fc9d 	bl	8000278 <__aeabi_dsub>
 800793e:	462b      	mov	r3, r5
 8007940:	4622      	mov	r2, r4
 8007942:	f7f8 fc99 	bl	8000278 <__aeabi_dsub>
 8007946:	9b02      	ldr	r3, [sp, #8]
 8007948:	2b00      	cmp	r3, #0
 800794a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800794e:	f6bf af0b 	bge.w	8007768 <__ieee754_rem_pio2+0x80>
 8007952:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007956:	f8ca 3004 	str.w	r3, [sl, #4]
 800795a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800795e:	f8ca 8000 	str.w	r8, [sl]
 8007962:	f8ca 0008 	str.w	r0, [sl, #8]
 8007966:	f8ca 300c 	str.w	r3, [sl, #12]
 800796a:	f1cb 0b00 	rsb	fp, fp, #0
 800796e:	e6fb      	b.n	8007768 <__ieee754_rem_pio2+0x80>
 8007970:	a327      	add	r3, pc, #156	; (adr r3, 8007a10 <__ieee754_rem_pio2+0x328>)
 8007972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007976:	ec51 0b18 	vmov	r0, r1, d8
 800797a:	f7f8 fe35 	bl	80005e8 <__aeabi_dmul>
 800797e:	4604      	mov	r4, r0
 8007980:	460d      	mov	r5, r1
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4640      	mov	r0, r8
 8007988:	4649      	mov	r1, r9
 800798a:	f7f8 fc75 	bl	8000278 <__aeabi_dsub>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4606      	mov	r6, r0
 8007994:	460f      	mov	r7, r1
 8007996:	4640      	mov	r0, r8
 8007998:	4649      	mov	r1, r9
 800799a:	f7f8 fc6d 	bl	8000278 <__aeabi_dsub>
 800799e:	4622      	mov	r2, r4
 80079a0:	462b      	mov	r3, r5
 80079a2:	f7f8 fc69 	bl	8000278 <__aeabi_dsub>
 80079a6:	a31c      	add	r3, pc, #112	; (adr r3, 8007a18 <__ieee754_rem_pio2+0x330>)
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	4604      	mov	r4, r0
 80079ae:	460d      	mov	r5, r1
 80079b0:	ec51 0b18 	vmov	r0, r1, d8
 80079b4:	f7f8 fe18 	bl	80005e8 <__aeabi_dmul>
 80079b8:	4622      	mov	r2, r4
 80079ba:	462b      	mov	r3, r5
 80079bc:	f7f8 fc5c 	bl	8000278 <__aeabi_dsub>
 80079c0:	4604      	mov	r4, r0
 80079c2:	460d      	mov	r5, r1
 80079c4:	e760      	b.n	8007888 <__ieee754_rem_pio2+0x1a0>
 80079c6:	4b1c      	ldr	r3, [pc, #112]	; (8007a38 <__ieee754_rem_pio2+0x350>)
 80079c8:	4598      	cmp	r8, r3
 80079ca:	dd37      	ble.n	8007a3c <__ieee754_rem_pio2+0x354>
 80079cc:	ee10 2a10 	vmov	r2, s0
 80079d0:	462b      	mov	r3, r5
 80079d2:	4620      	mov	r0, r4
 80079d4:	4629      	mov	r1, r5
 80079d6:	f7f8 fc4f 	bl	8000278 <__aeabi_dsub>
 80079da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80079de:	e9ca 0100 	strd	r0, r1, [sl]
 80079e2:	e695      	b.n	8007710 <__ieee754_rem_pio2+0x28>
 80079e4:	f3af 8000 	nop.w
 80079e8:	54400000 	.word	0x54400000
 80079ec:	3ff921fb 	.word	0x3ff921fb
 80079f0:	1a626331 	.word	0x1a626331
 80079f4:	3dd0b461 	.word	0x3dd0b461
 80079f8:	1a600000 	.word	0x1a600000
 80079fc:	3dd0b461 	.word	0x3dd0b461
 8007a00:	2e037073 	.word	0x2e037073
 8007a04:	3ba3198a 	.word	0x3ba3198a
 8007a08:	6dc9c883 	.word	0x6dc9c883
 8007a0c:	3fe45f30 	.word	0x3fe45f30
 8007a10:	2e000000 	.word	0x2e000000
 8007a14:	3ba3198a 	.word	0x3ba3198a
 8007a18:	252049c1 	.word	0x252049c1
 8007a1c:	397b839a 	.word	0x397b839a
 8007a20:	3fe921fb 	.word	0x3fe921fb
 8007a24:	4002d97b 	.word	0x4002d97b
 8007a28:	3ff921fb 	.word	0x3ff921fb
 8007a2c:	413921fb 	.word	0x413921fb
 8007a30:	3fe00000 	.word	0x3fe00000
 8007a34:	0800851c 	.word	0x0800851c
 8007a38:	7fefffff 	.word	0x7fefffff
 8007a3c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8007a40:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8007a44:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8007a48:	4620      	mov	r0, r4
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	f7f9 f87c 	bl	8000b48 <__aeabi_d2iz>
 8007a50:	f7f8 fd60 	bl	8000514 <__aeabi_i2d>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	4620      	mov	r0, r4
 8007a5a:	4629      	mov	r1, r5
 8007a5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a60:	f7f8 fc0a 	bl	8000278 <__aeabi_dsub>
 8007a64:	4b21      	ldr	r3, [pc, #132]	; (8007aec <__ieee754_rem_pio2+0x404>)
 8007a66:	2200      	movs	r2, #0
 8007a68:	f7f8 fdbe 	bl	80005e8 <__aeabi_dmul>
 8007a6c:	460d      	mov	r5, r1
 8007a6e:	4604      	mov	r4, r0
 8007a70:	f7f9 f86a 	bl	8000b48 <__aeabi_d2iz>
 8007a74:	f7f8 fd4e 	bl	8000514 <__aeabi_i2d>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	4629      	mov	r1, r5
 8007a80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a84:	f7f8 fbf8 	bl	8000278 <__aeabi_dsub>
 8007a88:	4b18      	ldr	r3, [pc, #96]	; (8007aec <__ieee754_rem_pio2+0x404>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f7f8 fdac 	bl	80005e8 <__aeabi_dmul>
 8007a90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a94:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8007a98:	2703      	movs	r7, #3
 8007a9a:	2400      	movs	r4, #0
 8007a9c:	2500      	movs	r5, #0
 8007a9e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	462b      	mov	r3, r5
 8007aa6:	46b9      	mov	r9, r7
 8007aa8:	3f01      	subs	r7, #1
 8007aaa:	f7f9 f805 	bl	8000ab8 <__aeabi_dcmpeq>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d1f5      	bne.n	8007a9e <__ieee754_rem_pio2+0x3b6>
 8007ab2:	4b0f      	ldr	r3, [pc, #60]	; (8007af0 <__ieee754_rem_pio2+0x408>)
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	4632      	mov	r2, r6
 8007abc:	464b      	mov	r3, r9
 8007abe:	4651      	mov	r1, sl
 8007ac0:	a804      	add	r0, sp, #16
 8007ac2:	f000 f821 	bl	8007b08 <__kernel_rem_pio2>
 8007ac6:	9b02      	ldr	r3, [sp, #8]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	4683      	mov	fp, r0
 8007acc:	f6bf ae4c 	bge.w	8007768 <__ieee754_rem_pio2+0x80>
 8007ad0:	e9da 2100 	ldrd	r2, r1, [sl]
 8007ad4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ad8:	e9ca 2300 	strd	r2, r3, [sl]
 8007adc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007ae0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ae4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007ae8:	e73f      	b.n	800796a <__ieee754_rem_pio2+0x282>
 8007aea:	bf00      	nop
 8007aec:	41700000 	.word	0x41700000
 8007af0:	0800859c 	.word	0x0800859c

08007af4 <fabs>:
 8007af4:	ec51 0b10 	vmov	r0, r1, d0
 8007af8:	ee10 2a10 	vmov	r2, s0
 8007afc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b00:	ec43 2b10 	vmov	d0, r2, r3
 8007b04:	4770      	bx	lr
	...

08007b08 <__kernel_rem_pio2>:
 8007b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0c:	ed2d 8b02 	vpush	{d8}
 8007b10:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007b14:	f112 0f14 	cmn.w	r2, #20
 8007b18:	9306      	str	r3, [sp, #24]
 8007b1a:	9104      	str	r1, [sp, #16]
 8007b1c:	4bc2      	ldr	r3, [pc, #776]	; (8007e28 <__kernel_rem_pio2+0x320>)
 8007b1e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007b20:	9009      	str	r0, [sp, #36]	; 0x24
 8007b22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	9b06      	ldr	r3, [sp, #24]
 8007b2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b2e:	bfa8      	it	ge
 8007b30:	1ed4      	subge	r4, r2, #3
 8007b32:	9305      	str	r3, [sp, #20]
 8007b34:	bfb2      	itee	lt
 8007b36:	2400      	movlt	r4, #0
 8007b38:	2318      	movge	r3, #24
 8007b3a:	fb94 f4f3 	sdivge	r4, r4, r3
 8007b3e:	f06f 0317 	mvn.w	r3, #23
 8007b42:	fb04 3303 	mla	r3, r4, r3, r3
 8007b46:	eb03 0a02 	add.w	sl, r3, r2
 8007b4a:	9b00      	ldr	r3, [sp, #0]
 8007b4c:	9a05      	ldr	r2, [sp, #20]
 8007b4e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8007e18 <__kernel_rem_pio2+0x310>
 8007b52:	eb03 0802 	add.w	r8, r3, r2
 8007b56:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007b58:	1aa7      	subs	r7, r4, r2
 8007b5a:	ae20      	add	r6, sp, #128	; 0x80
 8007b5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007b60:	2500      	movs	r5, #0
 8007b62:	4545      	cmp	r5, r8
 8007b64:	dd13      	ble.n	8007b8e <__kernel_rem_pio2+0x86>
 8007b66:	9b06      	ldr	r3, [sp, #24]
 8007b68:	aa20      	add	r2, sp, #128	; 0x80
 8007b6a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007b6e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007b72:	f04f 0800 	mov.w	r8, #0
 8007b76:	9b00      	ldr	r3, [sp, #0]
 8007b78:	4598      	cmp	r8, r3
 8007b7a:	dc31      	bgt.n	8007be0 <__kernel_rem_pio2+0xd8>
 8007b7c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8007e18 <__kernel_rem_pio2+0x310>
 8007b80:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007b84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b88:	462f      	mov	r7, r5
 8007b8a:	2600      	movs	r6, #0
 8007b8c:	e01b      	b.n	8007bc6 <__kernel_rem_pio2+0xbe>
 8007b8e:	42ef      	cmn	r7, r5
 8007b90:	d407      	bmi.n	8007ba2 <__kernel_rem_pio2+0x9a>
 8007b92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007b96:	f7f8 fcbd 	bl	8000514 <__aeabi_i2d>
 8007b9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007b9e:	3501      	adds	r5, #1
 8007ba0:	e7df      	b.n	8007b62 <__kernel_rem_pio2+0x5a>
 8007ba2:	ec51 0b18 	vmov	r0, r1, d8
 8007ba6:	e7f8      	b.n	8007b9a <__kernel_rem_pio2+0x92>
 8007ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007bb0:	f7f8 fd1a 	bl	80005e8 <__aeabi_dmul>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bbc:	f7f8 fb5e 	bl	800027c <__adddf3>
 8007bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bc4:	3601      	adds	r6, #1
 8007bc6:	9b05      	ldr	r3, [sp, #20]
 8007bc8:	429e      	cmp	r6, r3
 8007bca:	f1a7 0708 	sub.w	r7, r7, #8
 8007bce:	ddeb      	ble.n	8007ba8 <__kernel_rem_pio2+0xa0>
 8007bd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bd4:	f108 0801 	add.w	r8, r8, #1
 8007bd8:	ecab 7b02 	vstmia	fp!, {d7}
 8007bdc:	3508      	adds	r5, #8
 8007bde:	e7ca      	b.n	8007b76 <__kernel_rem_pio2+0x6e>
 8007be0:	9b00      	ldr	r3, [sp, #0]
 8007be2:	aa0c      	add	r2, sp, #48	; 0x30
 8007be4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bea:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007bec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007bf0:	9c00      	ldr	r4, [sp, #0]
 8007bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8007bf4:	00e3      	lsls	r3, r4, #3
 8007bf6:	9308      	str	r3, [sp, #32]
 8007bf8:	ab98      	add	r3, sp, #608	; 0x260
 8007bfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bfe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007c02:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8007c06:	ab70      	add	r3, sp, #448	; 0x1c0
 8007c08:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007c0c:	46c3      	mov	fp, r8
 8007c0e:	46a1      	mov	r9, r4
 8007c10:	f1b9 0f00 	cmp.w	r9, #0
 8007c14:	f1a5 0508 	sub.w	r5, r5, #8
 8007c18:	dc77      	bgt.n	8007d0a <__kernel_rem_pio2+0x202>
 8007c1a:	ec47 6b10 	vmov	d0, r6, r7
 8007c1e:	4650      	mov	r0, sl
 8007c20:	f000 fac2 	bl	80081a8 <scalbn>
 8007c24:	ec57 6b10 	vmov	r6, r7, d0
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007c2e:	ee10 0a10 	vmov	r0, s0
 8007c32:	4639      	mov	r1, r7
 8007c34:	f7f8 fcd8 	bl	80005e8 <__aeabi_dmul>
 8007c38:	ec41 0b10 	vmov	d0, r0, r1
 8007c3c:	f000 fb34 	bl	80082a8 <floor>
 8007c40:	4b7a      	ldr	r3, [pc, #488]	; (8007e2c <__kernel_rem_pio2+0x324>)
 8007c42:	ec51 0b10 	vmov	r0, r1, d0
 8007c46:	2200      	movs	r2, #0
 8007c48:	f7f8 fcce 	bl	80005e8 <__aeabi_dmul>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4630      	mov	r0, r6
 8007c52:	4639      	mov	r1, r7
 8007c54:	f7f8 fb10 	bl	8000278 <__aeabi_dsub>
 8007c58:	460f      	mov	r7, r1
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	f7f8 ff74 	bl	8000b48 <__aeabi_d2iz>
 8007c60:	9002      	str	r0, [sp, #8]
 8007c62:	f7f8 fc57 	bl	8000514 <__aeabi_i2d>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	f7f8 fb03 	bl	8000278 <__aeabi_dsub>
 8007c72:	f1ba 0f00 	cmp.w	sl, #0
 8007c76:	4606      	mov	r6, r0
 8007c78:	460f      	mov	r7, r1
 8007c7a:	dd6d      	ble.n	8007d58 <__kernel_rem_pio2+0x250>
 8007c7c:	1e61      	subs	r1, r4, #1
 8007c7e:	ab0c      	add	r3, sp, #48	; 0x30
 8007c80:	9d02      	ldr	r5, [sp, #8]
 8007c82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c86:	f1ca 0018 	rsb	r0, sl, #24
 8007c8a:	fa43 f200 	asr.w	r2, r3, r0
 8007c8e:	4415      	add	r5, r2
 8007c90:	4082      	lsls	r2, r0
 8007c92:	1a9b      	subs	r3, r3, r2
 8007c94:	aa0c      	add	r2, sp, #48	; 0x30
 8007c96:	9502      	str	r5, [sp, #8]
 8007c98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007c9c:	f1ca 0217 	rsb	r2, sl, #23
 8007ca0:	fa43 fb02 	asr.w	fp, r3, r2
 8007ca4:	f1bb 0f00 	cmp.w	fp, #0
 8007ca8:	dd65      	ble.n	8007d76 <__kernel_rem_pio2+0x26e>
 8007caa:	9b02      	ldr	r3, [sp, #8]
 8007cac:	2200      	movs	r2, #0
 8007cae:	3301      	adds	r3, #1
 8007cb0:	9302      	str	r3, [sp, #8]
 8007cb2:	4615      	mov	r5, r2
 8007cb4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007cb8:	4294      	cmp	r4, r2
 8007cba:	f300 809f 	bgt.w	8007dfc <__kernel_rem_pio2+0x2f4>
 8007cbe:	f1ba 0f00 	cmp.w	sl, #0
 8007cc2:	dd07      	ble.n	8007cd4 <__kernel_rem_pio2+0x1cc>
 8007cc4:	f1ba 0f01 	cmp.w	sl, #1
 8007cc8:	f000 80c1 	beq.w	8007e4e <__kernel_rem_pio2+0x346>
 8007ccc:	f1ba 0f02 	cmp.w	sl, #2
 8007cd0:	f000 80c7 	beq.w	8007e62 <__kernel_rem_pio2+0x35a>
 8007cd4:	f1bb 0f02 	cmp.w	fp, #2
 8007cd8:	d14d      	bne.n	8007d76 <__kernel_rem_pio2+0x26e>
 8007cda:	4632      	mov	r2, r6
 8007cdc:	463b      	mov	r3, r7
 8007cde:	4954      	ldr	r1, [pc, #336]	; (8007e30 <__kernel_rem_pio2+0x328>)
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	f7f8 fac9 	bl	8000278 <__aeabi_dsub>
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	460f      	mov	r7, r1
 8007cea:	2d00      	cmp	r5, #0
 8007cec:	d043      	beq.n	8007d76 <__kernel_rem_pio2+0x26e>
 8007cee:	4650      	mov	r0, sl
 8007cf0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8007e20 <__kernel_rem_pio2+0x318>
 8007cf4:	f000 fa58 	bl	80081a8 <scalbn>
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	4639      	mov	r1, r7
 8007cfc:	ec53 2b10 	vmov	r2, r3, d0
 8007d00:	f7f8 faba 	bl	8000278 <__aeabi_dsub>
 8007d04:	4606      	mov	r6, r0
 8007d06:	460f      	mov	r7, r1
 8007d08:	e035      	b.n	8007d76 <__kernel_rem_pio2+0x26e>
 8007d0a:	4b4a      	ldr	r3, [pc, #296]	; (8007e34 <__kernel_rem_pio2+0x32c>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4630      	mov	r0, r6
 8007d10:	4639      	mov	r1, r7
 8007d12:	f7f8 fc69 	bl	80005e8 <__aeabi_dmul>
 8007d16:	f7f8 ff17 	bl	8000b48 <__aeabi_d2iz>
 8007d1a:	f7f8 fbfb 	bl	8000514 <__aeabi_i2d>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	ec43 2b18 	vmov	d8, r2, r3
 8007d26:	4b44      	ldr	r3, [pc, #272]	; (8007e38 <__kernel_rem_pio2+0x330>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f7f8 fc5d 	bl	80005e8 <__aeabi_dmul>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4630      	mov	r0, r6
 8007d34:	4639      	mov	r1, r7
 8007d36:	f7f8 fa9f 	bl	8000278 <__aeabi_dsub>
 8007d3a:	f7f8 ff05 	bl	8000b48 <__aeabi_d2iz>
 8007d3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d42:	f84b 0b04 	str.w	r0, [fp], #4
 8007d46:	ec51 0b18 	vmov	r0, r1, d8
 8007d4a:	f7f8 fa97 	bl	800027c <__adddf3>
 8007d4e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007d52:	4606      	mov	r6, r0
 8007d54:	460f      	mov	r7, r1
 8007d56:	e75b      	b.n	8007c10 <__kernel_rem_pio2+0x108>
 8007d58:	d106      	bne.n	8007d68 <__kernel_rem_pio2+0x260>
 8007d5a:	1e63      	subs	r3, r4, #1
 8007d5c:	aa0c      	add	r2, sp, #48	; 0x30
 8007d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d62:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8007d66:	e79d      	b.n	8007ca4 <__kernel_rem_pio2+0x19c>
 8007d68:	4b34      	ldr	r3, [pc, #208]	; (8007e3c <__kernel_rem_pio2+0x334>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f7f8 fec2 	bl	8000af4 <__aeabi_dcmpge>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d140      	bne.n	8007df6 <__kernel_rem_pio2+0x2ee>
 8007d74:	4683      	mov	fp, r0
 8007d76:	2200      	movs	r2, #0
 8007d78:	2300      	movs	r3, #0
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	f7f8 fe9b 	bl	8000ab8 <__aeabi_dcmpeq>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	f000 80c1 	beq.w	8007f0a <__kernel_rem_pio2+0x402>
 8007d88:	1e65      	subs	r5, r4, #1
 8007d8a:	462b      	mov	r3, r5
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	9900      	ldr	r1, [sp, #0]
 8007d90:	428b      	cmp	r3, r1
 8007d92:	da6d      	bge.n	8007e70 <__kernel_rem_pio2+0x368>
 8007d94:	2a00      	cmp	r2, #0
 8007d96:	f000 808a 	beq.w	8007eae <__kernel_rem_pio2+0x3a6>
 8007d9a:	ab0c      	add	r3, sp, #48	; 0x30
 8007d9c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007da0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 80ae 	beq.w	8007f06 <__kernel_rem_pio2+0x3fe>
 8007daa:	4650      	mov	r0, sl
 8007dac:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007e20 <__kernel_rem_pio2+0x318>
 8007db0:	f000 f9fa 	bl	80081a8 <scalbn>
 8007db4:	1c6b      	adds	r3, r5, #1
 8007db6:	00da      	lsls	r2, r3, #3
 8007db8:	9205      	str	r2, [sp, #20]
 8007dba:	ec57 6b10 	vmov	r6, r7, d0
 8007dbe:	aa70      	add	r2, sp, #448	; 0x1c0
 8007dc0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007e34 <__kernel_rem_pio2+0x32c>
 8007dc4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8007dc8:	462c      	mov	r4, r5
 8007dca:	f04f 0800 	mov.w	r8, #0
 8007dce:	2c00      	cmp	r4, #0
 8007dd0:	f280 80d4 	bge.w	8007f7c <__kernel_rem_pio2+0x474>
 8007dd4:	462c      	mov	r4, r5
 8007dd6:	2c00      	cmp	r4, #0
 8007dd8:	f2c0 8102 	blt.w	8007fe0 <__kernel_rem_pio2+0x4d8>
 8007ddc:	4b18      	ldr	r3, [pc, #96]	; (8007e40 <__kernel_rem_pio2+0x338>)
 8007dde:	461e      	mov	r6, r3
 8007de0:	ab70      	add	r3, sp, #448	; 0x1c0
 8007de2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8007de6:	1b2b      	subs	r3, r5, r4
 8007de8:	f04f 0900 	mov.w	r9, #0
 8007dec:	f04f 0a00 	mov.w	sl, #0
 8007df0:	2700      	movs	r7, #0
 8007df2:	9306      	str	r3, [sp, #24]
 8007df4:	e0e6      	b.n	8007fc4 <__kernel_rem_pio2+0x4bc>
 8007df6:	f04f 0b02 	mov.w	fp, #2
 8007dfa:	e756      	b.n	8007caa <__kernel_rem_pio2+0x1a2>
 8007dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8007e00:	bb05      	cbnz	r5, 8007e44 <__kernel_rem_pio2+0x33c>
 8007e02:	b123      	cbz	r3, 8007e0e <__kernel_rem_pio2+0x306>
 8007e04:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007e08:	f8c8 3000 	str.w	r3, [r8]
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	3201      	adds	r2, #1
 8007e10:	f108 0804 	add.w	r8, r8, #4
 8007e14:	461d      	mov	r5, r3
 8007e16:	e74f      	b.n	8007cb8 <__kernel_rem_pio2+0x1b0>
	...
 8007e24:	3ff00000 	.word	0x3ff00000
 8007e28:	080086e8 	.word	0x080086e8
 8007e2c:	40200000 	.word	0x40200000
 8007e30:	3ff00000 	.word	0x3ff00000
 8007e34:	3e700000 	.word	0x3e700000
 8007e38:	41700000 	.word	0x41700000
 8007e3c:	3fe00000 	.word	0x3fe00000
 8007e40:	080086a8 	.word	0x080086a8
 8007e44:	1acb      	subs	r3, r1, r3
 8007e46:	f8c8 3000 	str.w	r3, [r8]
 8007e4a:	462b      	mov	r3, r5
 8007e4c:	e7df      	b.n	8007e0e <__kernel_rem_pio2+0x306>
 8007e4e:	1e62      	subs	r2, r4, #1
 8007e50:	ab0c      	add	r3, sp, #48	; 0x30
 8007e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e56:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007e5a:	a90c      	add	r1, sp, #48	; 0x30
 8007e5c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007e60:	e738      	b.n	8007cd4 <__kernel_rem_pio2+0x1cc>
 8007e62:	1e62      	subs	r2, r4, #1
 8007e64:	ab0c      	add	r3, sp, #48	; 0x30
 8007e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007e6e:	e7f4      	b.n	8007e5a <__kernel_rem_pio2+0x352>
 8007e70:	a90c      	add	r1, sp, #48	; 0x30
 8007e72:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007e76:	3b01      	subs	r3, #1
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	e788      	b.n	8007d8e <__kernel_rem_pio2+0x286>
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007e82:	2900      	cmp	r1, #0
 8007e84:	d0fa      	beq.n	8007e7c <__kernel_rem_pio2+0x374>
 8007e86:	9a08      	ldr	r2, [sp, #32]
 8007e88:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8007e8c:	446a      	add	r2, sp
 8007e8e:	3a98      	subs	r2, #152	; 0x98
 8007e90:	9208      	str	r2, [sp, #32]
 8007e92:	9a06      	ldr	r2, [sp, #24]
 8007e94:	a920      	add	r1, sp, #128	; 0x80
 8007e96:	18a2      	adds	r2, r4, r2
 8007e98:	18e3      	adds	r3, r4, r3
 8007e9a:	f104 0801 	add.w	r8, r4, #1
 8007e9e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8007ea2:	9302      	str	r3, [sp, #8]
 8007ea4:	9b02      	ldr	r3, [sp, #8]
 8007ea6:	4543      	cmp	r3, r8
 8007ea8:	da04      	bge.n	8007eb4 <__kernel_rem_pio2+0x3ac>
 8007eaa:	461c      	mov	r4, r3
 8007eac:	e6a2      	b.n	8007bf4 <__kernel_rem_pio2+0xec>
 8007eae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e7e4      	b.n	8007e7e <__kernel_rem_pio2+0x376>
 8007eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eb6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007eba:	f7f8 fb2b 	bl	8000514 <__aeabi_i2d>
 8007ebe:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec4:	46ab      	mov	fp, r5
 8007ec6:	461c      	mov	r4, r3
 8007ec8:	f04f 0900 	mov.w	r9, #0
 8007ecc:	2600      	movs	r6, #0
 8007ece:	2700      	movs	r7, #0
 8007ed0:	9b05      	ldr	r3, [sp, #20]
 8007ed2:	4599      	cmp	r9, r3
 8007ed4:	dd06      	ble.n	8007ee4 <__kernel_rem_pio2+0x3dc>
 8007ed6:	9b08      	ldr	r3, [sp, #32]
 8007ed8:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007edc:	f108 0801 	add.w	r8, r8, #1
 8007ee0:	9308      	str	r3, [sp, #32]
 8007ee2:	e7df      	b.n	8007ea4 <__kernel_rem_pio2+0x39c>
 8007ee4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007ee8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007eec:	f7f8 fb7c 	bl	80005e8 <__aeabi_dmul>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	f7f8 f9c0 	bl	800027c <__adddf3>
 8007efc:	f109 0901 	add.w	r9, r9, #1
 8007f00:	4606      	mov	r6, r0
 8007f02:	460f      	mov	r7, r1
 8007f04:	e7e4      	b.n	8007ed0 <__kernel_rem_pio2+0x3c8>
 8007f06:	3d01      	subs	r5, #1
 8007f08:	e747      	b.n	8007d9a <__kernel_rem_pio2+0x292>
 8007f0a:	ec47 6b10 	vmov	d0, r6, r7
 8007f0e:	f1ca 0000 	rsb	r0, sl, #0
 8007f12:	f000 f949 	bl	80081a8 <scalbn>
 8007f16:	ec57 6b10 	vmov	r6, r7, d0
 8007f1a:	4ba0      	ldr	r3, [pc, #640]	; (800819c <__kernel_rem_pio2+0x694>)
 8007f1c:	ee10 0a10 	vmov	r0, s0
 8007f20:	2200      	movs	r2, #0
 8007f22:	4639      	mov	r1, r7
 8007f24:	f7f8 fde6 	bl	8000af4 <__aeabi_dcmpge>
 8007f28:	b1f8      	cbz	r0, 8007f6a <__kernel_rem_pio2+0x462>
 8007f2a:	4b9d      	ldr	r3, [pc, #628]	; (80081a0 <__kernel_rem_pio2+0x698>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	4630      	mov	r0, r6
 8007f30:	4639      	mov	r1, r7
 8007f32:	f7f8 fb59 	bl	80005e8 <__aeabi_dmul>
 8007f36:	f7f8 fe07 	bl	8000b48 <__aeabi_d2iz>
 8007f3a:	4680      	mov	r8, r0
 8007f3c:	f7f8 faea 	bl	8000514 <__aeabi_i2d>
 8007f40:	4b96      	ldr	r3, [pc, #600]	; (800819c <__kernel_rem_pio2+0x694>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	f7f8 fb50 	bl	80005e8 <__aeabi_dmul>
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f7f8 f992 	bl	8000278 <__aeabi_dsub>
 8007f54:	f7f8 fdf8 	bl	8000b48 <__aeabi_d2iz>
 8007f58:	1c65      	adds	r5, r4, #1
 8007f5a:	ab0c      	add	r3, sp, #48	; 0x30
 8007f5c:	f10a 0a18 	add.w	sl, sl, #24
 8007f60:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007f64:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007f68:	e71f      	b.n	8007daa <__kernel_rem_pio2+0x2a2>
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	4639      	mov	r1, r7
 8007f6e:	f7f8 fdeb 	bl	8000b48 <__aeabi_d2iz>
 8007f72:	ab0c      	add	r3, sp, #48	; 0x30
 8007f74:	4625      	mov	r5, r4
 8007f76:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007f7a:	e716      	b.n	8007daa <__kernel_rem_pio2+0x2a2>
 8007f7c:	ab0c      	add	r3, sp, #48	; 0x30
 8007f7e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007f82:	f7f8 fac7 	bl	8000514 <__aeabi_i2d>
 8007f86:	4632      	mov	r2, r6
 8007f88:	463b      	mov	r3, r7
 8007f8a:	f7f8 fb2d 	bl	80005e8 <__aeabi_dmul>
 8007f8e:	4642      	mov	r2, r8
 8007f90:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007f94:	464b      	mov	r3, r9
 8007f96:	4630      	mov	r0, r6
 8007f98:	4639      	mov	r1, r7
 8007f9a:	f7f8 fb25 	bl	80005e8 <__aeabi_dmul>
 8007f9e:	3c01      	subs	r4, #1
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	460f      	mov	r7, r1
 8007fa4:	e713      	b.n	8007dce <__kernel_rem_pio2+0x2c6>
 8007fa6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8007faa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8007fae:	f7f8 fb1b 	bl	80005e8 <__aeabi_dmul>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	4648      	mov	r0, r9
 8007fb8:	4651      	mov	r1, sl
 8007fba:	f7f8 f95f 	bl	800027c <__adddf3>
 8007fbe:	3701      	adds	r7, #1
 8007fc0:	4681      	mov	r9, r0
 8007fc2:	468a      	mov	sl, r1
 8007fc4:	9b00      	ldr	r3, [sp, #0]
 8007fc6:	429f      	cmp	r7, r3
 8007fc8:	dc02      	bgt.n	8007fd0 <__kernel_rem_pio2+0x4c8>
 8007fca:	9b06      	ldr	r3, [sp, #24]
 8007fcc:	429f      	cmp	r7, r3
 8007fce:	ddea      	ble.n	8007fa6 <__kernel_rem_pio2+0x49e>
 8007fd0:	9a06      	ldr	r2, [sp, #24]
 8007fd2:	ab48      	add	r3, sp, #288	; 0x120
 8007fd4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8007fd8:	e9c6 9a00 	strd	r9, sl, [r6]
 8007fdc:	3c01      	subs	r4, #1
 8007fde:	e6fa      	b.n	8007dd6 <__kernel_rem_pio2+0x2ce>
 8007fe0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	dc0b      	bgt.n	8007ffe <__kernel_rem_pio2+0x4f6>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	dc39      	bgt.n	800805e <__kernel_rem_pio2+0x556>
 8007fea:	d05d      	beq.n	80080a8 <__kernel_rem_pio2+0x5a0>
 8007fec:	9b02      	ldr	r3, [sp, #8]
 8007fee:	f003 0007 	and.w	r0, r3, #7
 8007ff2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007ff6:	ecbd 8b02 	vpop	{d8}
 8007ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ffe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008000:	2b03      	cmp	r3, #3
 8008002:	d1f3      	bne.n	8007fec <__kernel_rem_pio2+0x4e4>
 8008004:	9b05      	ldr	r3, [sp, #20]
 8008006:	9500      	str	r5, [sp, #0]
 8008008:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800800c:	eb0d 0403 	add.w	r4, sp, r3
 8008010:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008014:	46a2      	mov	sl, r4
 8008016:	9b00      	ldr	r3, [sp, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f1aa 0a08 	sub.w	sl, sl, #8
 800801e:	dc69      	bgt.n	80080f4 <__kernel_rem_pio2+0x5ec>
 8008020:	46aa      	mov	sl, r5
 8008022:	f1ba 0f01 	cmp.w	sl, #1
 8008026:	f1a4 0408 	sub.w	r4, r4, #8
 800802a:	f300 8083 	bgt.w	8008134 <__kernel_rem_pio2+0x62c>
 800802e:	9c05      	ldr	r4, [sp, #20]
 8008030:	ab48      	add	r3, sp, #288	; 0x120
 8008032:	441c      	add	r4, r3
 8008034:	2000      	movs	r0, #0
 8008036:	2100      	movs	r1, #0
 8008038:	2d01      	cmp	r5, #1
 800803a:	f300 809a 	bgt.w	8008172 <__kernel_rem_pio2+0x66a>
 800803e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8008042:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008046:	f1bb 0f00 	cmp.w	fp, #0
 800804a:	f040 8098 	bne.w	800817e <__kernel_rem_pio2+0x676>
 800804e:	9b04      	ldr	r3, [sp, #16]
 8008050:	e9c3 7800 	strd	r7, r8, [r3]
 8008054:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008058:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800805c:	e7c6      	b.n	8007fec <__kernel_rem_pio2+0x4e4>
 800805e:	9e05      	ldr	r6, [sp, #20]
 8008060:	ab48      	add	r3, sp, #288	; 0x120
 8008062:	441e      	add	r6, r3
 8008064:	462c      	mov	r4, r5
 8008066:	2000      	movs	r0, #0
 8008068:	2100      	movs	r1, #0
 800806a:	2c00      	cmp	r4, #0
 800806c:	da33      	bge.n	80080d6 <__kernel_rem_pio2+0x5ce>
 800806e:	f1bb 0f00 	cmp.w	fp, #0
 8008072:	d036      	beq.n	80080e2 <__kernel_rem_pio2+0x5da>
 8008074:	4602      	mov	r2, r0
 8008076:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800807a:	9c04      	ldr	r4, [sp, #16]
 800807c:	e9c4 2300 	strd	r2, r3, [r4]
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008088:	f7f8 f8f6 	bl	8000278 <__aeabi_dsub>
 800808c:	ae4a      	add	r6, sp, #296	; 0x128
 800808e:	2401      	movs	r4, #1
 8008090:	42a5      	cmp	r5, r4
 8008092:	da29      	bge.n	80080e8 <__kernel_rem_pio2+0x5e0>
 8008094:	f1bb 0f00 	cmp.w	fp, #0
 8008098:	d002      	beq.n	80080a0 <__kernel_rem_pio2+0x598>
 800809a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800809e:	4619      	mov	r1, r3
 80080a0:	9b04      	ldr	r3, [sp, #16]
 80080a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80080a6:	e7a1      	b.n	8007fec <__kernel_rem_pio2+0x4e4>
 80080a8:	9c05      	ldr	r4, [sp, #20]
 80080aa:	ab48      	add	r3, sp, #288	; 0x120
 80080ac:	441c      	add	r4, r3
 80080ae:	2000      	movs	r0, #0
 80080b0:	2100      	movs	r1, #0
 80080b2:	2d00      	cmp	r5, #0
 80080b4:	da09      	bge.n	80080ca <__kernel_rem_pio2+0x5c2>
 80080b6:	f1bb 0f00 	cmp.w	fp, #0
 80080ba:	d002      	beq.n	80080c2 <__kernel_rem_pio2+0x5ba>
 80080bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080c0:	4619      	mov	r1, r3
 80080c2:	9b04      	ldr	r3, [sp, #16]
 80080c4:	e9c3 0100 	strd	r0, r1, [r3]
 80080c8:	e790      	b.n	8007fec <__kernel_rem_pio2+0x4e4>
 80080ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80080ce:	f7f8 f8d5 	bl	800027c <__adddf3>
 80080d2:	3d01      	subs	r5, #1
 80080d4:	e7ed      	b.n	80080b2 <__kernel_rem_pio2+0x5aa>
 80080d6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80080da:	f7f8 f8cf 	bl	800027c <__adddf3>
 80080de:	3c01      	subs	r4, #1
 80080e0:	e7c3      	b.n	800806a <__kernel_rem_pio2+0x562>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	e7c8      	b.n	800807a <__kernel_rem_pio2+0x572>
 80080e8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80080ec:	f7f8 f8c6 	bl	800027c <__adddf3>
 80080f0:	3401      	adds	r4, #1
 80080f2:	e7cd      	b.n	8008090 <__kernel_rem_pio2+0x588>
 80080f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80080f8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80080fc:	9b00      	ldr	r3, [sp, #0]
 80080fe:	3b01      	subs	r3, #1
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	4632      	mov	r2, r6
 8008104:	463b      	mov	r3, r7
 8008106:	4640      	mov	r0, r8
 8008108:	4649      	mov	r1, r9
 800810a:	f7f8 f8b7 	bl	800027c <__adddf3>
 800810e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	4640      	mov	r0, r8
 8008118:	4649      	mov	r1, r9
 800811a:	f7f8 f8ad 	bl	8000278 <__aeabi_dsub>
 800811e:	4632      	mov	r2, r6
 8008120:	463b      	mov	r3, r7
 8008122:	f7f8 f8ab 	bl	800027c <__adddf3>
 8008126:	ed9d 7b06 	vldr	d7, [sp, #24]
 800812a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800812e:	ed8a 7b00 	vstr	d7, [sl]
 8008132:	e770      	b.n	8008016 <__kernel_rem_pio2+0x50e>
 8008134:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008138:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800813c:	4640      	mov	r0, r8
 800813e:	4632      	mov	r2, r6
 8008140:	463b      	mov	r3, r7
 8008142:	4649      	mov	r1, r9
 8008144:	f7f8 f89a 	bl	800027c <__adddf3>
 8008148:	e9cd 0100 	strd	r0, r1, [sp]
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	4640      	mov	r0, r8
 8008152:	4649      	mov	r1, r9
 8008154:	f7f8 f890 	bl	8000278 <__aeabi_dsub>
 8008158:	4632      	mov	r2, r6
 800815a:	463b      	mov	r3, r7
 800815c:	f7f8 f88e 	bl	800027c <__adddf3>
 8008160:	ed9d 7b00 	vldr	d7, [sp]
 8008164:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008168:	ed84 7b00 	vstr	d7, [r4]
 800816c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008170:	e757      	b.n	8008022 <__kernel_rem_pio2+0x51a>
 8008172:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008176:	f7f8 f881 	bl	800027c <__adddf3>
 800817a:	3d01      	subs	r5, #1
 800817c:	e75c      	b.n	8008038 <__kernel_rem_pio2+0x530>
 800817e:	9b04      	ldr	r3, [sp, #16]
 8008180:	9a04      	ldr	r2, [sp, #16]
 8008182:	601f      	str	r7, [r3, #0]
 8008184:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008188:	605c      	str	r4, [r3, #4]
 800818a:	609d      	str	r5, [r3, #8]
 800818c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008190:	60d3      	str	r3, [r2, #12]
 8008192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008196:	6110      	str	r0, [r2, #16]
 8008198:	6153      	str	r3, [r2, #20]
 800819a:	e727      	b.n	8007fec <__kernel_rem_pio2+0x4e4>
 800819c:	41700000 	.word	0x41700000
 80081a0:	3e700000 	.word	0x3e700000
 80081a4:	00000000 	.word	0x00000000

080081a8 <scalbn>:
 80081a8:	b570      	push	{r4, r5, r6, lr}
 80081aa:	ec55 4b10 	vmov	r4, r5, d0
 80081ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80081b2:	4606      	mov	r6, r0
 80081b4:	462b      	mov	r3, r5
 80081b6:	b999      	cbnz	r1, 80081e0 <scalbn+0x38>
 80081b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80081bc:	4323      	orrs	r3, r4
 80081be:	d03f      	beq.n	8008240 <scalbn+0x98>
 80081c0:	4b35      	ldr	r3, [pc, #212]	; (8008298 <scalbn+0xf0>)
 80081c2:	4629      	mov	r1, r5
 80081c4:	ee10 0a10 	vmov	r0, s0
 80081c8:	2200      	movs	r2, #0
 80081ca:	f7f8 fa0d 	bl	80005e8 <__aeabi_dmul>
 80081ce:	4b33      	ldr	r3, [pc, #204]	; (800829c <scalbn+0xf4>)
 80081d0:	429e      	cmp	r6, r3
 80081d2:	4604      	mov	r4, r0
 80081d4:	460d      	mov	r5, r1
 80081d6:	da10      	bge.n	80081fa <scalbn+0x52>
 80081d8:	a327      	add	r3, pc, #156	; (adr r3, 8008278 <scalbn+0xd0>)
 80081da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081de:	e01f      	b.n	8008220 <scalbn+0x78>
 80081e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80081e4:	4291      	cmp	r1, r2
 80081e6:	d10c      	bne.n	8008202 <scalbn+0x5a>
 80081e8:	ee10 2a10 	vmov	r2, s0
 80081ec:	4620      	mov	r0, r4
 80081ee:	4629      	mov	r1, r5
 80081f0:	f7f8 f844 	bl	800027c <__adddf3>
 80081f4:	4604      	mov	r4, r0
 80081f6:	460d      	mov	r5, r1
 80081f8:	e022      	b.n	8008240 <scalbn+0x98>
 80081fa:	460b      	mov	r3, r1
 80081fc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008200:	3936      	subs	r1, #54	; 0x36
 8008202:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008206:	4296      	cmp	r6, r2
 8008208:	dd0d      	ble.n	8008226 <scalbn+0x7e>
 800820a:	2d00      	cmp	r5, #0
 800820c:	a11c      	add	r1, pc, #112	; (adr r1, 8008280 <scalbn+0xd8>)
 800820e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008212:	da02      	bge.n	800821a <scalbn+0x72>
 8008214:	a11c      	add	r1, pc, #112	; (adr r1, 8008288 <scalbn+0xe0>)
 8008216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800821a:	a319      	add	r3, pc, #100	; (adr r3, 8008280 <scalbn+0xd8>)
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	f7f8 f9e2 	bl	80005e8 <__aeabi_dmul>
 8008224:	e7e6      	b.n	80081f4 <scalbn+0x4c>
 8008226:	1872      	adds	r2, r6, r1
 8008228:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800822c:	428a      	cmp	r2, r1
 800822e:	dcec      	bgt.n	800820a <scalbn+0x62>
 8008230:	2a00      	cmp	r2, #0
 8008232:	dd08      	ble.n	8008246 <scalbn+0x9e>
 8008234:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008238:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800823c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008240:	ec45 4b10 	vmov	d0, r4, r5
 8008244:	bd70      	pop	{r4, r5, r6, pc}
 8008246:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800824a:	da08      	bge.n	800825e <scalbn+0xb6>
 800824c:	2d00      	cmp	r5, #0
 800824e:	a10a      	add	r1, pc, #40	; (adr r1, 8008278 <scalbn+0xd0>)
 8008250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008254:	dac0      	bge.n	80081d8 <scalbn+0x30>
 8008256:	a10e      	add	r1, pc, #56	; (adr r1, 8008290 <scalbn+0xe8>)
 8008258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800825c:	e7bc      	b.n	80081d8 <scalbn+0x30>
 800825e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008262:	3236      	adds	r2, #54	; 0x36
 8008264:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008268:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800826c:	4620      	mov	r0, r4
 800826e:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <scalbn+0xf8>)
 8008270:	2200      	movs	r2, #0
 8008272:	e7d5      	b.n	8008220 <scalbn+0x78>
 8008274:	f3af 8000 	nop.w
 8008278:	c2f8f359 	.word	0xc2f8f359
 800827c:	01a56e1f 	.word	0x01a56e1f
 8008280:	8800759c 	.word	0x8800759c
 8008284:	7e37e43c 	.word	0x7e37e43c
 8008288:	8800759c 	.word	0x8800759c
 800828c:	fe37e43c 	.word	0xfe37e43c
 8008290:	c2f8f359 	.word	0xc2f8f359
 8008294:	81a56e1f 	.word	0x81a56e1f
 8008298:	43500000 	.word	0x43500000
 800829c:	ffff3cb0 	.word	0xffff3cb0
 80082a0:	3c900000 	.word	0x3c900000
 80082a4:	00000000 	.word	0x00000000

080082a8 <floor>:
 80082a8:	ec51 0b10 	vmov	r0, r1, d0
 80082ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80082b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80082b8:	2e13      	cmp	r6, #19
 80082ba:	ee10 5a10 	vmov	r5, s0
 80082be:	ee10 8a10 	vmov	r8, s0
 80082c2:	460c      	mov	r4, r1
 80082c4:	dc31      	bgt.n	800832a <floor+0x82>
 80082c6:	2e00      	cmp	r6, #0
 80082c8:	da14      	bge.n	80082f4 <floor+0x4c>
 80082ca:	a333      	add	r3, pc, #204	; (adr r3, 8008398 <floor+0xf0>)
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f7f7 ffd4 	bl	800027c <__adddf3>
 80082d4:	2200      	movs	r2, #0
 80082d6:	2300      	movs	r3, #0
 80082d8:	f7f8 fc16 	bl	8000b08 <__aeabi_dcmpgt>
 80082dc:	b138      	cbz	r0, 80082ee <floor+0x46>
 80082de:	2c00      	cmp	r4, #0
 80082e0:	da53      	bge.n	800838a <floor+0xe2>
 80082e2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80082e6:	4325      	orrs	r5, r4
 80082e8:	d052      	beq.n	8008390 <floor+0xe8>
 80082ea:	4c2d      	ldr	r4, [pc, #180]	; (80083a0 <floor+0xf8>)
 80082ec:	2500      	movs	r5, #0
 80082ee:	4621      	mov	r1, r4
 80082f0:	4628      	mov	r0, r5
 80082f2:	e024      	b.n	800833e <floor+0x96>
 80082f4:	4f2b      	ldr	r7, [pc, #172]	; (80083a4 <floor+0xfc>)
 80082f6:	4137      	asrs	r7, r6
 80082f8:	ea01 0307 	and.w	r3, r1, r7
 80082fc:	4303      	orrs	r3, r0
 80082fe:	d01e      	beq.n	800833e <floor+0x96>
 8008300:	a325      	add	r3, pc, #148	; (adr r3, 8008398 <floor+0xf0>)
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	f7f7 ffb9 	bl	800027c <__adddf3>
 800830a:	2200      	movs	r2, #0
 800830c:	2300      	movs	r3, #0
 800830e:	f7f8 fbfb 	bl	8000b08 <__aeabi_dcmpgt>
 8008312:	2800      	cmp	r0, #0
 8008314:	d0eb      	beq.n	80082ee <floor+0x46>
 8008316:	2c00      	cmp	r4, #0
 8008318:	bfbe      	ittt	lt
 800831a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800831e:	4133      	asrlt	r3, r6
 8008320:	18e4      	addlt	r4, r4, r3
 8008322:	ea24 0407 	bic.w	r4, r4, r7
 8008326:	2500      	movs	r5, #0
 8008328:	e7e1      	b.n	80082ee <floor+0x46>
 800832a:	2e33      	cmp	r6, #51	; 0x33
 800832c:	dd0b      	ble.n	8008346 <floor+0x9e>
 800832e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008332:	d104      	bne.n	800833e <floor+0x96>
 8008334:	ee10 2a10 	vmov	r2, s0
 8008338:	460b      	mov	r3, r1
 800833a:	f7f7 ff9f 	bl	800027c <__adddf3>
 800833e:	ec41 0b10 	vmov	d0, r0, r1
 8008342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008346:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800834a:	f04f 37ff 	mov.w	r7, #4294967295
 800834e:	40df      	lsrs	r7, r3
 8008350:	4238      	tst	r0, r7
 8008352:	d0f4      	beq.n	800833e <floor+0x96>
 8008354:	a310      	add	r3, pc, #64	; (adr r3, 8008398 <floor+0xf0>)
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	f7f7 ff8f 	bl	800027c <__adddf3>
 800835e:	2200      	movs	r2, #0
 8008360:	2300      	movs	r3, #0
 8008362:	f7f8 fbd1 	bl	8000b08 <__aeabi_dcmpgt>
 8008366:	2800      	cmp	r0, #0
 8008368:	d0c1      	beq.n	80082ee <floor+0x46>
 800836a:	2c00      	cmp	r4, #0
 800836c:	da0a      	bge.n	8008384 <floor+0xdc>
 800836e:	2e14      	cmp	r6, #20
 8008370:	d101      	bne.n	8008376 <floor+0xce>
 8008372:	3401      	adds	r4, #1
 8008374:	e006      	b.n	8008384 <floor+0xdc>
 8008376:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800837a:	2301      	movs	r3, #1
 800837c:	40b3      	lsls	r3, r6
 800837e:	441d      	add	r5, r3
 8008380:	45a8      	cmp	r8, r5
 8008382:	d8f6      	bhi.n	8008372 <floor+0xca>
 8008384:	ea25 0507 	bic.w	r5, r5, r7
 8008388:	e7b1      	b.n	80082ee <floor+0x46>
 800838a:	2500      	movs	r5, #0
 800838c:	462c      	mov	r4, r5
 800838e:	e7ae      	b.n	80082ee <floor+0x46>
 8008390:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008394:	e7ab      	b.n	80082ee <floor+0x46>
 8008396:	bf00      	nop
 8008398:	8800759c 	.word	0x8800759c
 800839c:	7e37e43c 	.word	0x7e37e43c
 80083a0:	bff00000 	.word	0xbff00000
 80083a4:	000fffff 	.word	0x000fffff

080083a8 <_init>:
 80083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083aa:	bf00      	nop
 80083ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ae:	bc08      	pop	{r3}
 80083b0:	469e      	mov	lr, r3
 80083b2:	4770      	bx	lr

080083b4 <_fini>:
 80083b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b6:	bf00      	nop
 80083b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ba:	bc08      	pop	{r3}
 80083bc:	469e      	mov	lr, r3
 80083be:	4770      	bx	lr
