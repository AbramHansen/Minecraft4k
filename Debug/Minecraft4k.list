
Minecraft4k.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08007788  08007788  00017788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac0  08007ac0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ac8  08007ac8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac8  08007ac8  00017ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007acc  08007acc  00017acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007ad0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012a4  20000078  08007b48  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000131c  08007b48  0002131c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0fa  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000228d  00000000  00000000  0002e1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  00030478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000976  00000000  00000000  000310d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002747b  00000000  00000000  00031a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f5cf  00000000  00000000  00058ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec4de  00000000  00000000  00068490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004010  00000000  00000000  00154970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00158980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007770 	.word	0x08007770

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007770 	.word	0x08007770

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b970 	b.w	8000f30 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	460d      	mov	r5, r1
 8000c70:	4604      	mov	r4, r0
 8000c72:	460f      	mov	r7, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d14a      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4694      	mov	ip, r2
 8000c7c:	d965      	bls.n	8000d4a <__udivmoddi4+0xe2>
 8000c7e:	fab2 f382 	clz	r3, r2
 8000c82:	b143      	cbz	r3, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c88:	f1c3 0220 	rsb	r2, r3, #32
 8000c8c:	409f      	lsls	r7, r3
 8000c8e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c92:	4317      	orrs	r7, r2
 8000c94:	409c      	lsls	r4, r3
 8000c96:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c9a:	fa1f f58c 	uxth.w	r5, ip
 8000c9e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ca2:	0c22      	lsrs	r2, r4, #16
 8000ca4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ca8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cac:	fb01 f005 	mul.w	r0, r1, r5
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x62>
 8000cb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cbc:	f080 811c 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	f240 8119 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cc6:	3902      	subs	r1, #2
 8000cc8:	4462      	add	r2, ip
 8000cca:	1a12      	subs	r2, r2, r0
 8000ccc:	b2a4      	uxth	r4, r4
 8000cce:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cd2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cd6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cda:	fb00 f505 	mul.w	r5, r0, r5
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	d90a      	bls.n	8000cf8 <__udivmoddi4+0x90>
 8000ce2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cea:	f080 8107 	bcs.w	8000efc <__udivmoddi4+0x294>
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	f240 8104 	bls.w	8000efc <__udivmoddi4+0x294>
 8000cf4:	4464      	add	r4, ip
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	2100      	movs	r1, #0
 8000d00:	b11e      	cbz	r6, 8000d0a <__udivmoddi4+0xa2>
 8000d02:	40dc      	lsrs	r4, r3
 8000d04:	2300      	movs	r3, #0
 8000d06:	e9c6 4300 	strd	r4, r3, [r6]
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0xbc>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80ed 	beq.w	8000ef2 <__udivmoddi4+0x28a>
 8000d18:	2100      	movs	r1, #0
 8000d1a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	fab3 f183 	clz	r1, r3
 8000d28:	2900      	cmp	r1, #0
 8000d2a:	d149      	bne.n	8000dc0 <__udivmoddi4+0x158>
 8000d2c:	42ab      	cmp	r3, r5
 8000d2e:	d302      	bcc.n	8000d36 <__udivmoddi4+0xce>
 8000d30:	4282      	cmp	r2, r0
 8000d32:	f200 80f8 	bhi.w	8000f26 <__udivmoddi4+0x2be>
 8000d36:	1a84      	subs	r4, r0, r2
 8000d38:	eb65 0203 	sbc.w	r2, r5, r3
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	2e00      	cmp	r6, #0
 8000d42:	d0e2      	beq.n	8000d0a <__udivmoddi4+0xa2>
 8000d44:	e9c6 4700 	strd	r4, r7, [r6]
 8000d48:	e7df      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d4a:	b902      	cbnz	r2, 8000d4e <__udivmoddi4+0xe6>
 8000d4c:	deff      	udf	#255	; 0xff
 8000d4e:	fab2 f382 	clz	r3, r2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f040 8090 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d58:	1a8a      	subs	r2, r1, r2
 8000d5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	2101      	movs	r1, #1
 8000d64:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d68:	fb07 2015 	mls	r0, r7, r5, r2
 8000d6c:	0c22      	lsrs	r2, r4, #16
 8000d6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d72:	fb0e f005 	mul.w	r0, lr, r5
 8000d76:	4290      	cmp	r0, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d7e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4290      	cmp	r0, r2
 8000d86:	f200 80cb 	bhi.w	8000f20 <__udivmoddi4+0x2b8>
 8000d8a:	4645      	mov	r5, r8
 8000d8c:	1a12      	subs	r2, r2, r0
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d94:	fb07 2210 	mls	r2, r7, r0, r2
 8000d98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x14e>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x14c>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f200 80bb 	bhi.w	8000f2a <__udivmoddi4+0x2c2>
 8000db4:	4610      	mov	r0, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dbe:	e79f      	b.n	8000d00 <__udivmoddi4+0x98>
 8000dc0:	f1c1 0720 	rsb	r7, r1, #32
 8000dc4:	408b      	lsls	r3, r1
 8000dc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dce:	fa05 f401 	lsl.w	r4, r5, r1
 8000dd2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dd6:	40fd      	lsrs	r5, r7
 8000dd8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ddc:	4323      	orrs	r3, r4
 8000dde:	fbb5 f8f9 	udiv	r8, r5, r9
 8000de2:	fa1f fe8c 	uxth.w	lr, ip
 8000de6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dea:	0c1c      	lsrs	r4, r3, #16
 8000dec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000df0:	fb08 f50e 	mul.w	r5, r8, lr
 8000df4:	42a5      	cmp	r5, r4
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e08:	f080 8088 	bcs.w	8000f1c <__udivmoddi4+0x2b4>
 8000e0c:	42a5      	cmp	r5, r4
 8000e0e:	f240 8085 	bls.w	8000f1c <__udivmoddi4+0x2b4>
 8000e12:	f1a8 0802 	sub.w	r8, r8, #2
 8000e16:	4464      	add	r4, ip
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	b29d      	uxth	r5, r3
 8000e1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e20:	fb09 4413 	mls	r4, r9, r3, r4
 8000e24:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e28:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e38:	d26c      	bcs.n	8000f14 <__udivmoddi4+0x2ac>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	d96a      	bls.n	8000f14 <__udivmoddi4+0x2ac>
 8000e3e:	3b02      	subs	r3, #2
 8000e40:	4464      	add	r4, ip
 8000e42:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e46:	fba3 9502 	umull	r9, r5, r3, r2
 8000e4a:	eba4 040e 	sub.w	r4, r4, lr
 8000e4e:	42ac      	cmp	r4, r5
 8000e50:	46c8      	mov	r8, r9
 8000e52:	46ae      	mov	lr, r5
 8000e54:	d356      	bcc.n	8000f04 <__udivmoddi4+0x29c>
 8000e56:	d053      	beq.n	8000f00 <__udivmoddi4+0x298>
 8000e58:	b156      	cbz	r6, 8000e70 <__udivmoddi4+0x208>
 8000e5a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e5e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e62:	fa04 f707 	lsl.w	r7, r4, r7
 8000e66:	40ca      	lsrs	r2, r1
 8000e68:	40cc      	lsrs	r4, r1
 8000e6a:	4317      	orrs	r7, r2
 8000e6c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e70:	4618      	mov	r0, r3
 8000e72:	2100      	movs	r1, #0
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	f1c3 0120 	rsb	r1, r3, #32
 8000e7c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e80:	fa20 f201 	lsr.w	r2, r0, r1
 8000e84:	fa25 f101 	lsr.w	r1, r5, r1
 8000e88:	409d      	lsls	r5, r3
 8000e8a:	432a      	orrs	r2, r5
 8000e8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1510 	mls	r5, r7, r0, r1
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ea2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ea6:	428d      	cmp	r5, r1
 8000ea8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x258>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eb6:	d22f      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eb8:	428d      	cmp	r5, r1
 8000eba:	d92d      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1b49      	subs	r1, r1, r5
 8000ec2:	b292      	uxth	r2, r2
 8000ec4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ec8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ecc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ed4:	4291      	cmp	r1, r2
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x282>
 8000ed8:	eb1c 0202 	adds.w	r2, ip, r2
 8000edc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ee0:	d216      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000ee2:	4291      	cmp	r1, r2
 8000ee4:	d914      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000ee6:	3d02      	subs	r5, #2
 8000ee8:	4462      	add	r2, ip
 8000eea:	1a52      	subs	r2, r2, r1
 8000eec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ef0:	e738      	b.n	8000d64 <__udivmoddi4+0xfc>
 8000ef2:	4631      	mov	r1, r6
 8000ef4:	4630      	mov	r0, r6
 8000ef6:	e708      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000ef8:	4639      	mov	r1, r7
 8000efa:	e6e6      	b.n	8000cca <__udivmoddi4+0x62>
 8000efc:	4610      	mov	r0, r2
 8000efe:	e6fb      	b.n	8000cf8 <__udivmoddi4+0x90>
 8000f00:	4548      	cmp	r0, r9
 8000f02:	d2a9      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f04:	ebb9 0802 	subs.w	r8, r9, r2
 8000f08:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	e7a3      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f10:	4645      	mov	r5, r8
 8000f12:	e7ea      	b.n	8000eea <__udivmoddi4+0x282>
 8000f14:	462b      	mov	r3, r5
 8000f16:	e794      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f18:	4640      	mov	r0, r8
 8000f1a:	e7d1      	b.n	8000ec0 <__udivmoddi4+0x258>
 8000f1c:	46d0      	mov	r8, sl
 8000f1e:	e77b      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f20:	3d02      	subs	r5, #2
 8000f22:	4462      	add	r2, ip
 8000f24:	e732      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f26:	4608      	mov	r0, r1
 8000f28:	e70a      	b.n	8000d40 <__udivmoddi4+0xd8>
 8000f2a:	4464      	add	r4, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e742      	b.n	8000db6 <__udivmoddi4+0x14e>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <ILI9341_Select>:
 *      Author: PC-MAGH
 */

#include "ili9341.h"

static void ILI9341_Select() {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2110      	movs	r1, #16
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f40:	f001 fec2 	bl	8002cc8 <HAL_GPIO_WritePin>
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2110      	movs	r1, #16
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f54:	f001 feb8 	bl	8002cc8 <HAL_GPIO_WritePin>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2102      	movs	r1, #2
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f001 feae 	bl	8002cc8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000f6c:	2005      	movs	r0, #5
 8000f6e:	f001 fa63 	bl	8002438 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2102      	movs	r1, #2
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7a:	f001 fea5 	bl	8002cc8 <HAL_GPIO_WritePin>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f001 fe97 	bl	8002cc8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000f9a:	1df9      	adds	r1, r7, #7
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <ILI9341_WriteCommand+0x2c>)
 8000fa4:	f003 fa6b 	bl	800447e <HAL_SPI_Transmit>

}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20001094 	.word	0x20001094

08000fb4 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2140      	movs	r1, #64	; 0x40
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc6:	f001 fe7f 	bl	8002cc8 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000fca:	e015      	b.n	8000ff8 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fd2:	bf28      	it	cs
 8000fd4:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000fd8:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000fda:	89fa      	ldrh	r2, [r7, #14]
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	4809      	ldr	r0, [pc, #36]	; (8001008 <ILI9341_WriteData+0x54>)
 8000fe4:	f003 fa4b 	bl	800447e <HAL_SPI_Transmit>

        buff += chunk_size;
 8000fe8:	89fb      	ldrh	r3, [r7, #14]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000ff0:	89fb      	ldrh	r3, [r7, #14]
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1e6      	bne.n	8000fcc <ILI9341_WriteData+0x18>
    }
}
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20001094 	.word	0x20001094

0800100c <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	4604      	mov	r4, r0
 8001014:	4608      	mov	r0, r1
 8001016:	4611      	mov	r1, r2
 8001018:	461a      	mov	r2, r3
 800101a:	4623      	mov	r3, r4
 800101c:	80fb      	strh	r3, [r7, #6]
 800101e:	4603      	mov	r3, r0
 8001020:	80bb      	strh	r3, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	807b      	strh	r3, [r7, #2]
 8001026:	4613      	mov	r3, r2
 8001028:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800102a:	202a      	movs	r0, #42	; 0x2a
 800102c:	f7ff ffaa 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	0a1b      	lsrs	r3, r3, #8
 8001034:	b29b      	uxth	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	733b      	strb	r3, [r7, #12]
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	737b      	strb	r3, [r7, #13]
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	b29b      	uxth	r3, r3
 8001046:	b2db      	uxtb	r3, r3
 8001048:	73bb      	strb	r3, [r7, #14]
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2104      	movs	r1, #4
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ffac 	bl	8000fb4 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 800105c:	202b      	movs	r0, #43	; 0x2b
 800105e:	f7ff ff91 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8001062:	88bb      	ldrh	r3, [r7, #4]
 8001064:	0a1b      	lsrs	r3, r3, #8
 8001066:	b29b      	uxth	r3, r3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	723b      	strb	r3, [r7, #8]
 800106c:	88bb      	ldrh	r3, [r7, #4]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	727b      	strb	r3, [r7, #9]
 8001072:	883b      	ldrh	r3, [r7, #0]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	b29b      	uxth	r3, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	72bb      	strb	r3, [r7, #10]
 800107c:	883b      	ldrh	r3, [r7, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	2104      	movs	r1, #4
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff93 	bl	8000fb4 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800108e:	202c      	movs	r0, #44	; 0x2c
 8001090:	f7ff ff78 	bl	8000f84 <ILI9341_WriteCommand>
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bd90      	pop	{r4, r7, pc}

0800109c <ILI9341_Init>:

void ILI9341_Init() {
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b09b      	sub	sp, #108	; 0x6c
 80010a0:	af00      	add	r7, sp, #0
    ILI9341_Select();
 80010a2:	f7ff ff47 	bl	8000f34 <ILI9341_Select>
    ILI9341_Reset();
 80010a6:	f7ff ff59 	bl	8000f5c <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f7ff ff6a 	bl	8000f84 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 80010b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b4:	f001 f9c0 	bl	8002438 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80010b8:	20cb      	movs	r0, #203	; 0xcb
 80010ba:	f7ff ff63 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80010be:	4a87      	ldr	r2, [pc, #540]	; (80012dc <ILI9341_Init+0x240>)
 80010c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c8:	6018      	str	r0, [r3, #0]
 80010ca:	3304      	adds	r3, #4
 80010cc:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80010ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010d2:	2105      	movs	r1, #5
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff6d 	bl	8000fb4 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80010da:	20cf      	movs	r0, #207	; 0xcf
 80010dc:	f7ff ff52 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80010e0:	4a7f      	ldr	r2, [pc, #508]	; (80012e0 <ILI9341_Init+0x244>)
 80010e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010e6:	6812      	ldr	r2, [r2, #0]
 80010e8:	4611      	mov	r1, r2
 80010ea:	8019      	strh	r1, [r3, #0]
 80010ec:	3302      	adds	r3, #2
 80010ee:	0c12      	lsrs	r2, r2, #16
 80010f0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80010f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010f6:	2103      	movs	r1, #3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5b 	bl	8000fb4 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80010fe:	20e8      	movs	r0, #232	; 0xe8
 8001100:	f7ff ff40 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8001104:	4a77      	ldr	r2, [pc, #476]	; (80012e4 <ILI9341_Init+0x248>)
 8001106:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800110a:	6812      	ldr	r2, [r2, #0]
 800110c:	4611      	mov	r1, r2
 800110e:	8019      	strh	r1, [r3, #0]
 8001110:	3302      	adds	r3, #2
 8001112:	0c12      	lsrs	r2, r2, #16
 8001114:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001116:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800111a:	2103      	movs	r1, #3
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff49 	bl	8000fb4 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8001122:	20ea      	movs	r0, #234	; 0xea
 8001124:	f7ff ff2e 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8001128:	2300      	movs	r3, #0
 800112a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 800112e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001132:	2102      	movs	r1, #2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff3d 	bl	8000fb4 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800113a:	20ed      	movs	r0, #237	; 0xed
 800113c:	f7ff ff22 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8001140:	4b69      	ldr	r3, [pc, #420]	; (80012e8 <ILI9341_Init+0x24c>)
 8001142:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 8001144:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001148:	2104      	movs	r1, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff32 	bl	8000fb4 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8001150:	20f7      	movs	r0, #247	; 0xf7
 8001152:	f7ff ff17 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8001156:	2320      	movs	r3, #32
 8001158:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 800115c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001160:	2101      	movs	r1, #1
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff26 	bl	8000fb4 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8001168:	20c0      	movs	r0, #192	; 0xc0
 800116a:	f7ff ff0b 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800116e:	2323      	movs	r3, #35	; 0x23
 8001170:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 8001174:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001178:	2101      	movs	r1, #1
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff1a 	bl	8000fb4 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8001180:	20c1      	movs	r0, #193	; 0xc1
 8001182:	f7ff feff 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8001186:	2310      	movs	r3, #16
 8001188:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 800118c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001190:	2101      	movs	r1, #1
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff0e 	bl	8000fb4 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8001198:	20c5      	movs	r0, #197	; 0xc5
 800119a:	f7ff fef3 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800119e:	f642 033e 	movw	r3, #10302	; 0x283e
 80011a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 80011a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011aa:	2102      	movs	r1, #2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff01 	bl	8000fb4 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80011b2:	20c7      	movs	r0, #199	; 0xc7
 80011b4:	f7ff fee6 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80011b8:	2386      	movs	r3, #134	; 0x86
 80011ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80011be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011c2:	2101      	movs	r1, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fef5 	bl	8000fb4 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80011ca:	2036      	movs	r0, #54	; 0x36
 80011cc:	f7ff feda 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80011d0:	2348      	movs	r3, #72	; 0x48
 80011d2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 80011d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011da:	2101      	movs	r1, #1
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fee9 	bl	8000fb4 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80011e2:	203a      	movs	r0, #58	; 0x3a
 80011e4:	f7ff fece 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80011e8:	2355      	movs	r3, #85	; 0x55
 80011ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 80011ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011f2:	2101      	movs	r1, #1
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fedd 	bl	8000fb4 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80011fa:	20b1      	movs	r0, #177	; 0xb1
 80011fc:	f7ff fec2 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8001200:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001204:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 8001206:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800120a:	2102      	movs	r1, #2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fed1 	bl	8000fb4 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8001212:	20b6      	movs	r0, #182	; 0xb6
 8001214:	f7ff feb6 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8001218:	4a34      	ldr	r2, [pc, #208]	; (80012ec <ILI9341_Init+0x250>)
 800121a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	4611      	mov	r1, r2
 8001222:	8019      	strh	r1, [r3, #0]
 8001224:	3302      	adds	r3, #2
 8001226:	0c12      	lsrs	r2, r2, #16
 8001228:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800122a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800122e:	2103      	movs	r1, #3
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff febf 	bl	8000fb4 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8001236:	20f2      	movs	r0, #242	; 0xf2
 8001238:	f7ff fea4 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 800123c:	2300      	movs	r3, #0
 800123e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 8001242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001246:	2101      	movs	r1, #1
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff feb3 	bl	8000fb4 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800124e:	2026      	movs	r0, #38	; 0x26
 8001250:	f7ff fe98 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8001254:	2301      	movs	r3, #1
 8001256:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	2101      	movs	r1, #1
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fea7 	bl	8000fb4 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8001266:	20e0      	movs	r0, #224	; 0xe0
 8001268:	f7ff fe8c 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 800126c:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <ILI9341_Init+0x254>)
 800126e:	f107 0414 	add.w	r4, r7, #20
 8001272:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001274:	c407      	stmia	r4!, {r0, r1, r2}
 8001276:	8023      	strh	r3, [r4, #0]
 8001278:	3402      	adds	r4, #2
 800127a:	0c1b      	lsrs	r3, r3, #16
 800127c:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	210f      	movs	r1, #15
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fe95 	bl	8000fb4 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 800128a:	20e1      	movs	r0, #225	; 0xe1
 800128c:	f7ff fe7a 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <ILI9341_Init+0x258>)
 8001292:	1d3c      	adds	r4, r7, #4
 8001294:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001296:	c407      	stmia	r4!, {r0, r1, r2}
 8001298:	8023      	strh	r3, [r4, #0]
 800129a:	3402      	adds	r4, #2
 800129c:	0c1b      	lsrs	r3, r3, #16
 800129e:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	210f      	movs	r1, #15
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe85 	bl	8000fb4 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80012aa:	2011      	movs	r0, #17
 80012ac:	f7ff fe6a 	bl	8000f84 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80012b0:	2078      	movs	r0, #120	; 0x78
 80012b2:	f001 f8c1 	bl	8002438 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80012b6:	2029      	movs	r0, #41	; 0x29
 80012b8:	f7ff fe64 	bl	8000f84 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80012bc:	2036      	movs	r0, #54	; 0x36
 80012be:	f7ff fe61 	bl	8000f84 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80012c2:	2348      	movs	r3, #72	; 0x48
 80012c4:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80012c6:	463b      	mov	r3, r7
 80012c8:	2101      	movs	r1, #1
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fe72 	bl	8000fb4 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80012d0:	f7ff fe3a 	bl	8000f48 <ILI9341_Unselect>
}
 80012d4:	bf00      	nop
 80012d6:	376c      	adds	r7, #108	; 0x6c
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd90      	pop	{r4, r7, pc}
 80012dc:	08007788 	.word	0x08007788
 80012e0:	08007790 	.word	0x08007790
 80012e4:	08007794 	.word	0x08007794
 80012e8:	81120364 	.word	0x81120364
 80012ec:	08007798 	.word	0x08007798
 80012f0:	0800779c 	.word	0x0800779c
 80012f4:	080077ac 	.word	0x080077ac

080012f8 <ILI9341_MinecraftInit>:

char map[4096]; //16 * 16 * 16

void ILI9341_MinecraftInit() {
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
    for ( char x = 0; x < 16; x++) {
 80012fe:	2300      	movs	r3, #0
 8001300:	73fb      	strb	r3, [r7, #15]
 8001302:	e0a0      	b.n	8001446 <ILI9341_MinecraftInit+0x14e>
        for ( char y = 0; y < 16; y++) {
 8001304:	2300      	movs	r3, #0
 8001306:	73bb      	strb	r3, [r7, #14]
 8001308:	e096      	b.n	8001438 <ILI9341_MinecraftInit+0x140>
            for ( char z = 0; z < 16; z++) {
 800130a:	2300      	movs	r3, #0
 800130c:	737b      	strb	r3, [r7, #13]
 800130e:	e08c      	b.n	800142a <ILI9341_MinecraftInit+0x132>
                int i = (z * 16 * 16) + (y * 16) + x;
 8001310:	7b7b      	ldrb	r3, [r7, #13]
 8001312:	011a      	lsls	r2, r3, #4
 8001314:	7bbb      	ldrb	r3, [r7, #14]
 8001316:	4413      	add	r3, r2
 8001318:	011a      	lsls	r2, r3, #4
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	4413      	add	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
                float yd = (y - 16) * 0.2;
 8001320:	7bbb      	ldrb	r3, [r7, #14]
 8001322:	3b10      	subs	r3, #16
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f8f5 	bl	8000514 <__aeabi_i2d>
 800132a:	a351      	add	r3, pc, #324	; (adr r3, 8001470 <ILI9341_MinecraftInit+0x178>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f95a 	bl	80005e8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff fc2c 	bl	8000b98 <__aeabi_d2f>
 8001340:	4603      	mov	r3, r0
 8001342:	607b      	str	r3, [r7, #4]
                float zd = (z - 16) * 0.2;
 8001344:	7b7b      	ldrb	r3, [r7, #13]
 8001346:	3b10      	subs	r3, #16
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8e3 	bl	8000514 <__aeabi_i2d>
 800134e:	a348      	add	r3, pc, #288	; (adr r3, 8001470 <ILI9341_MinecraftInit+0x178>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff f948 	bl	80005e8 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fc1a 	bl	8000b98 <__aeabi_d2f>
 8001364:	4603      	mov	r3, r0
 8001366:	603b      	str	r3, [r7, #0]
                if (y < 16) {
 8001368:	7bbb      	ldrb	r3, [r7, #14]
 800136a:	2b0f      	cmp	r3, #15
 800136c:	d813      	bhi.n	8001396 <ILI9341_MinecraftInit+0x9e>
                    map[i] = (rand() % 5) | 0;
 800136e:	f004 f87b 	bl	8005468 <rand>
 8001372:	4602      	mov	r2, r0
 8001374:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <ILI9341_MinecraftInit+0x170>)
 8001376:	fb83 1302 	smull	r1, r3, r3, r2
 800137a:	1059      	asrs	r1, r3, #1
 800137c:	17d3      	asrs	r3, r2, #31
 800137e:	1ac9      	subs	r1, r1, r3
 8001380:	460b      	mov	r3, r1
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	1ad1      	subs	r1, r2, r3
 8001388:	b2c9      	uxtb	r1, r1
 800138a:	4a38      	ldr	r2, [pc, #224]	; (800146c <ILI9341_MinecraftInit+0x174>)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4413      	add	r3, r2
 8001390:	460a      	mov	r2, r1
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	e004      	b.n	80013a0 <ILI9341_MinecraftInit+0xa8>
                }
                else {
                    map[i] = 4 | 0;
 8001396:	4a35      	ldr	r2, [pc, #212]	; (800146c <ILI9341_MinecraftInit+0x174>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4413      	add	r3, r2
 800139c:	2204      	movs	r2, #4
 800139e:	701a      	strb	r2, [r3, #0]
                }

                if ((double)rand() / RAND_MAX > sqrt(sqrt(yd * yd + zd * zd)) - 0.8)
 80013a0:	f004 f862 	bl	8005468 <rand>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8b4 	bl	8000514 <__aeabi_i2d>
 80013ac:	a32a      	add	r3, pc, #168	; (adr r3, 8001458 <ILI9341_MinecraftInit+0x160>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff fa43 	bl	800083c <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4614      	mov	r4, r2
 80013bc:	461d      	mov	r5, r3
 80013be:	edd7 7a01 	vldr	s15, [r7, #4]
 80013c2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013c6:	edd7 7a00 	vldr	s15, [r7]
 80013ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d2:	ee17 0a90 	vmov	r0, s15
 80013d6:	f7ff f8af 	bl	8000538 <__aeabi_f2d>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	ec43 2b10 	vmov	d0, r2, r3
 80013e2:	f005 f827 	bl	8006434 <sqrt>
 80013e6:	eeb0 7a40 	vmov.f32	s14, s0
 80013ea:	eef0 7a60 	vmov.f32	s15, s1
 80013ee:	eeb0 0a47 	vmov.f32	s0, s14
 80013f2:	eef0 0a67 	vmov.f32	s1, s15
 80013f6:	f005 f81d 	bl	8006434 <sqrt>
 80013fa:	ec51 0b10 	vmov	r0, r1, d0
 80013fe:	a318      	add	r3, pc, #96	; (adr r3, 8001460 <ILI9341_MinecraftInit+0x168>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7fe ff38 	bl	8000278 <__aeabi_dsub>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4620      	mov	r0, r4
 800140e:	4629      	mov	r1, r5
 8001410:	f7ff fb7a 	bl	8000b08 <__aeabi_dcmpgt>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d004      	beq.n	8001424 <ILI9341_MinecraftInit+0x12c>
                    map[i] = 0;
 800141a:	4a14      	ldr	r2, [pc, #80]	; (800146c <ILI9341_MinecraftInit+0x174>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4413      	add	r3, r2
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
            for ( char z = 0; z < 16; z++) {
 8001424:	7b7b      	ldrb	r3, [r7, #13]
 8001426:	3301      	adds	r3, #1
 8001428:	737b      	strb	r3, [r7, #13]
 800142a:	7b7b      	ldrb	r3, [r7, #13]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	f67f af6f 	bls.w	8001310 <ILI9341_MinecraftInit+0x18>
        for ( char y = 0; y < 16; y++) {
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	3301      	adds	r3, #1
 8001436:	73bb      	strb	r3, [r7, #14]
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	2b0f      	cmp	r3, #15
 800143c:	f67f af65 	bls.w	800130a <ILI9341_MinecraftInit+0x12>
    for ( char x = 0; x < 16; x++) {
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	3301      	adds	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	f67f af5b 	bls.w	8001304 <ILI9341_MinecraftInit+0xc>
            }
        }
    }
}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bdb0      	pop	{r4, r5, r7, pc}
 8001458:	ffc00000 	.word	0xffc00000
 800145c:	41dfffff 	.word	0x41dfffff
 8001460:	9999999a 	.word	0x9999999a
 8001464:	3fe99999 	.word	0x3fe99999
 8001468:	66666667 	.word	0x66666667
 800146c:	20000094 	.word	0x20000094
 8001470:	9999999a 	.word	0x9999999a
 8001474:	3fc99999 	.word	0x3fc99999

08001478 <ILI9341_renderMinecraft>:

void ILI9341_renderMinecraft(float oy) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b0aa      	sub	sp, #168	; 0xa8
 800147c:	af00      	add	r7, sp, #0
 800147e:	ed87 0a01 	vstr	s0, [r7, #4]

    ILI9341_Select();
 8001482:	f7ff fd57 	bl	8000f34 <ILI9341_Select>
    ILI9341_SetAddressWindow(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT);
 8001486:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800148a:	22f0      	movs	r2, #240	; 0xf0
 800148c:	2100      	movs	r1, #0
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff fdbc 	bl	800100c <ILI9341_SetAddressWindow>

    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001494:	2201      	movs	r2, #1
 8001496:	2140      	movs	r1, #64	; 0x40
 8001498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149c:	f001 fc14 	bl	8002cc8 <HAL_GPIO_WritePin>

    float xRot = 1.5;
 80014a0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80014a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    float yRot = 0.0;
 80014a6:	f04f 0300 	mov.w	r3, #0
 80014aa:	66bb      	str	r3, [r7, #104]	; 0x68

    float ox = 14.5;
 80014ac:	4bd8      	ldr	r3, [pc, #864]	; (8001810 <ILI9341_renderMinecraft+0x398>)
 80014ae:	667b      	str	r3, [r7, #100]	; 0x64
    //float oy = 14.5;
    float oz = 14.5;
 80014b0:	4bd7      	ldr	r3, [pc, #860]	; (8001810 <ILI9341_renderMinecraft+0x398>)
 80014b2:	663b      	str	r3, [r7, #96]	; 0x60

    float yCos = cos(yRot);
 80014b4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80014b6:	f7ff f83f 	bl	8000538 <__aeabi_f2d>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	ec43 2b10 	vmov	d0, r2, r3
 80014c2:	f004 ffe5 	bl	8006490 <cos>
 80014c6:	ec53 2b10 	vmov	r2, r3, d0
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fb63 	bl	8000b98 <__aeabi_d2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	65fb      	str	r3, [r7, #92]	; 0x5c
    float ySin = sin(yRot);
 80014d6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80014d8:	f7ff f82e 	bl	8000538 <__aeabi_f2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	ec43 2b10 	vmov	d0, r2, r3
 80014e4:	f005 f828 	bl	8006538 <sin>
 80014e8:	ec53 2b10 	vmov	r2, r3, d0
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f7ff fb52 	bl	8000b98 <__aeabi_d2f>
 80014f4:	4603      	mov	r3, r0
 80014f6:	65bb      	str	r3, [r7, #88]	; 0x58
    float xCos = cos(xRot);
 80014f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80014fa:	f7ff f81d 	bl	8000538 <__aeabi_f2d>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	ec43 2b10 	vmov	d0, r2, r3
 8001506:	f004 ffc3 	bl	8006490 <cos>
 800150a:	ec53 2b10 	vmov	r2, r3, d0
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff fb41 	bl	8000b98 <__aeabi_d2f>
 8001516:	4603      	mov	r3, r0
 8001518:	657b      	str	r3, [r7, #84]	; 0x54
    float xSin = sin(xRot);
 800151a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800151c:	f7ff f80c 	bl	8000538 <__aeabi_f2d>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	ec43 2b10 	vmov	d0, r2, r3
 8001528:	f005 f806 	bl	8006538 <sin>
 800152c:	ec53 2b10 	vmov	r2, r3, d0
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f7ff fb30 	bl	8000b98 <__aeabi_d2f>
 8001538:	4603      	mov	r3, r0
 800153a:	653b      	str	r3, [r7, #80]	; 0x50

    for (int y = 0; y < ILI9341_HEIGHT; y++) {
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001542:	e2db      	b.n	8001afc <ILI9341_renderMinecraft+0x684>
        float ___yd = (y - ILI9341_HEIGHT / 2) / (float)ILI9341_WIDTH;
 8001544:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001548:	3ba0      	subs	r3, #160	; 0xa0
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001552:	eddf 6ab0 	vldr	s13, [pc, #704]	; 8001814 <ILI9341_renderMinecraft+0x39c>
 8001556:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800155a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        for (int x = 0; x < ILI9341_WIDTH; x++) {
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001564:	e2c0      	b.n	8001ae8 <ILI9341_renderMinecraft+0x670>
            float __xd = (x - ILI9341_WIDTH / 2) / (float)ILI9341_WIDTH;
 8001566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800156a:	3b78      	subs	r3, #120	; 0x78
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001574:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001814 <ILI9341_renderMinecraft+0x39c>
 8001578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800157c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
            float __zd = 1;
 8001580:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001584:	647b      	str	r3, [r7, #68]	; 0x44

            float ___xd = __xd * yCos + ___yd * ySin;
 8001586:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800158a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800158e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001592:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001596:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800159a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float _xd = ___yd * yCos - __xd * ySin;
 80015a6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80015aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80015ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b2:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80015b6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80015ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

            float _yd = ___xd * xCos + __zd * xSin;
 80015c6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80015ca:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80015ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015d2:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80015d6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80015da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            float _zd = __zd * xCos - ___xd * xSin;
 80015e6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80015ea:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80015ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f2:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80015f6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80015fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001602:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

            int col = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            int br = 255;
 800160c:	23ff      	movs	r3, #255	; 0xff
 800160e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            int ddist = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            float closest = 32;
 8001618:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
 800161c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            for (float d = 0; d < 3; d++) {
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001628:	e1d9      	b.n	80019de <ILI9341_renderMinecraft+0x566>
                float dimLength = _yd;
 800162a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800162c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                if (d == 1)
 8001630:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001634:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001638:	eef4 7a47 	vcmp.f32	s15, s14
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	d102      	bne.n	8001648 <ILI9341_renderMinecraft+0x1d0>
                    dimLength = _xd;
 8001642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                if (d == 2)
 8001648:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800164c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001650:	eef4 7a47 	vcmp.f32	s15, s14
 8001654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001658:	d102      	bne.n	8001660 <ILI9341_renderMinecraft+0x1e8>
                    dimLength = _zd;
 800165a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                float ll = 1 / (dimLength < 0 ? -dimLength : dimLength);
 8001660:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001664:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	d504      	bpl.n	8001678 <ILI9341_renderMinecraft+0x200>
 800166e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001672:	eef1 7a67 	vneg.f32	s15, s15
 8001676:	e001      	b.n	800167c <ILI9341_renderMinecraft+0x204>
 8001678:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800167c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001684:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
                float xd = (_yd) * ll;
 8001688:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800168c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001694:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                float yd = (_xd) * ll;
 8001698:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800169c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a4:	edc7 7a08 	vstr	s15, [r7, #32]
                float zd = (_zd) * ll;
 80016a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80016ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b4:	edc7 7a07 	vstr	s15, [r7, #28]

                float initial = oy - (int)oy;
 80016b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80016c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016cc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
                if (d == 1)
 80016d0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80016d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016d8:	eef4 7a47 	vcmp.f32	s15, s14
 80016dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e0:	d10b      	bne.n	80016fa <ILI9341_renderMinecraft+0x282>
                    initial = ox - (int)ox;
 80016e2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80016e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ee:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80016f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
                if (d == 2)
 80016fa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80016fe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001702:	eef4 7a47 	vcmp.f32	s15, s14
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	d10b      	bne.n	8001724 <ILI9341_renderMinecraft+0x2ac>
                    initial = oz - (int)oz;
 800170c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001718:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800171c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001720:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
                if (dimLength > 0)
 8001724:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	dd07      	ble.n	8001742 <ILI9341_renderMinecraft+0x2ca>
                    initial = 1 - initial;
 8001732:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001736:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800173a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

                float dist = ll * initial;
 8001742:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001746:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

                float xp = oy + xd * initial;
 8001752:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001756:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800175a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001766:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
                float yp = ox + yd * initial;
 800176a:	ed97 7a08 	vldr	s14, [r7, #32]
 800176e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001776:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800177a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
                float zp = oz + zd * initial;
 8001782:	ed97 7a07 	vldr	s14, [r7, #28]
 8001786:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800178a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001796:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

                if (dimLength < 0) {
 800179a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800179e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a6:	d531      	bpl.n	800180c <ILI9341_renderMinecraft+0x394>
                    if (d == 0)
 80017a8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80017ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	d107      	bne.n	80017c6 <ILI9341_renderMinecraft+0x34e>
                        yp--;
 80017b6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80017ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017c2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
                    if (d == 1)
 80017c6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80017ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017ce:	eef4 7a47 	vcmp.f32	s15, s14
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	d107      	bne.n	80017e8 <ILI9341_renderMinecraft+0x370>
                        xp--;
 80017d8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80017dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017e4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
                    if (d == 2)
 80017e8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80017ec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80017f0:	eef4 7a47 	vcmp.f32	s15, s14
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	f040 80df 	bne.w	80019ba <ILI9341_renderMinecraft+0x542>
                        zp--;
 80017fc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001800:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001804:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001808:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
                }

                while (dist < closest) {
 800180c:	e0d5      	b.n	80019ba <ILI9341_renderMinecraft+0x542>
 800180e:	bf00      	nop
 8001810:	41680000 	.word	0x41680000
 8001814:	43700000 	.word	0x43700000
                    int tex = map[((int)zp & 15) * 16 * 16 | ((int)yp & 15) * 16 | ((int)xp & 15)];
 8001818:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800181c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001820:	ee17 3a90 	vmov	r3, s15
 8001824:	f003 030f 	and.w	r3, r3, #15
 8001828:	021a      	lsls	r2, r3, #8
 800182a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800182e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001832:	ee17 3a90 	vmov	r3, s15
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	431a      	orrs	r2, r3
 800183e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001846:	ee17 3a90 	vmov	r3, s15
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	4313      	orrs	r3, r2
 8001850:	4ab0      	ldr	r2, [pc, #704]	; (8001b14 <ILI9341_renderMinecraft+0x69c>)
 8001852:	5cd3      	ldrb	r3, [r2, r3]
 8001854:	61bb      	str	r3, [r7, #24]

                    if (tex > 0) {
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b00      	cmp	r3, #0
 800185a:	f340 808e 	ble.w	800197a <ILI9341_renderMinecraft+0x502>
                        int u = ((int)(xp + zp) * 16) & 15;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
                        int v = ((int)(yp * 16) & 15) + 16;
 8001862:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001866:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800186a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800186e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001872:	ee17 3a90 	vmov	r3, s15
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3310      	adds	r3, #16
 800187c:	613b      	str	r3, [r7, #16]
                        if (d == 1) {
 800187e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001886:	eef4 7a47 	vcmp.f32	s15, s14
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	d123      	bne.n	80018d8 <ILI9341_renderMinecraft+0x460>
                            u = ((int)(xp * 16) & 15);
 8001890:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001894:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a0:	ee17 3a90 	vmov	r3, s15
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	617b      	str	r3, [r7, #20]
                            v = ((int)(zp * 16) & 15);
 80018aa:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80018ae:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80018b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ba:	ee17 3a90 	vmov	r3, s15
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	613b      	str	r3, [r7, #16]
                            if (xd < 0)
 80018c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	d502      	bpl.n	80018d8 <ILI9341_renderMinecraft+0x460>
                                u += 32;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3320      	adds	r3, #32
 80018d6:	617b      	str	r3, [r7, #20]
                        case 3: cc = cc = 0xFFFF00FF; break;
                        case 4: cc = cc = 0xFF00FFFF; break;
                        default: cc = 0xFFFFFFFF;
                        }*/

                        switch(tex) {
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d010      	beq.n	8001900 <ILI9341_renderMinecraft+0x488>
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	dc11      	bgt.n	8001908 <ILI9341_renderMinecraft+0x490>
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d003      	beq.n	80018f2 <ILI9341_renderMinecraft+0x47a>
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d003      	beq.n	80018f8 <ILI9341_renderMinecraft+0x480>
 80018f0:	e00a      	b.n	8001908 <ILI9341_renderMinecraft+0x490>
                        case 2: cc = cc = 0x000000FF; break;
 80018f2:	23ff      	movs	r3, #255	; 0xff
 80018f4:	673b      	str	r3, [r7, #112]	; 0x70
 80018f6:	e00a      	b.n	800190e <ILI9341_renderMinecraft+0x496>
                        case 3: cc = cc = 0x0000FF00; break;
 80018f8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80018fc:	673b      	str	r3, [r7, #112]	; 0x70
 80018fe:	e006      	b.n	800190e <ILI9341_renderMinecraft+0x496>
                        case 4: cc = cc = 0x00FF0000; break;
 8001900:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001904:	673b      	str	r3, [r7, #112]	; 0x70
 8001906:	e002      	b.n	800190e <ILI9341_renderMinecraft+0x496>
                        default: cc = 0xFFFFFFFF;
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
 800190c:	673b      	str	r3, [r7, #112]	; 0x70
                        }

                        if (cc > 0) {
 800190e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001910:	2b00      	cmp	r3, #0
 8001912:	d032      	beq.n	800197a <ILI9341_renderMinecraft+0x502>
                            col = cc;
 8001914:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001916:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                            ddist = 255 - (int)((dist / 32 * 255));
 800191a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800191e:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8001b18 <ILI9341_renderMinecraft+0x6a0>
 8001922:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001926:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001b1c <ILI9341_renderMinecraft+0x6a4>
 800192a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800192e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001932:	ee17 3a90 	vmov	r3, s15
 8001936:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800193a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                            br = 255 * (255 - ((int)(d + 2) % 3) * 50) / 255;
 800193e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001942:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001946:	ee77 7a87 	vadd.f32	s15, s15, s14
 800194a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800194e:	ee17 1a90 	vmov	r1, s15
 8001952:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <ILI9341_renderMinecraft+0x6a8>)
 8001954:	fb83 3201 	smull	r3, r2, r3, r1
 8001958:	17cb      	asrs	r3, r1, #31
 800195a:	1ad2      	subs	r2, r2, r3
 800195c:	4613      	mov	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4413      	add	r3, r2
 8001962:	1aca      	subs	r2, r1, r3
 8001964:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001968:	fb02 f303 	mul.w	r3, r2, r3
 800196c:	33ff      	adds	r3, #255	; 0xff
 800196e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                            closest = dist;
 8001972:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        }
                    }
                    xp += xd;
 800197a:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800197e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001986:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
                    yp += yd;
 800198a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800198e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001996:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
                    zp += zd;
 800199a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800199e:	edd7 7a07 	vldr	s15, [r7, #28]
 80019a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
                    dist += ll;
 80019aa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80019ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
                while (dist < closest) {
 80019ba:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80019be:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80019c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	f53f af25 	bmi.w	8001818 <ILI9341_renderMinecraft+0x3a0>
            for (float d = 0; d < 3; d++) {
 80019ce:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80019d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019da:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 80019de:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80019e2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80019e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	f53f ae1c 	bmi.w	800162a <ILI9341_renderMinecraft+0x1b2>
                }
            }

            char r = ((col >> 16) & 0xff) * br * ddist / (255 * 255);
 80019f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019f6:	141b      	asrs	r3, r3, #16
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	4a46      	ldr	r2, [pc, #280]	; (8001b24 <ILI9341_renderMinecraft+0x6ac>)
 8001a0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a10:	441a      	add	r2, r3
 8001a12:	13d2      	asrs	r2, r2, #15
 8001a14:	17db      	asrs	r3, r3, #31
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            char g = ((col >> 8) & 0xff) * br * ddist / (255 * 255);
 8001a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a20:	121b      	asrs	r3, r3, #8
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a30:	fb02 f303 	mul.w	r3, r2, r3
 8001a34:	4a3b      	ldr	r2, [pc, #236]	; (8001b24 <ILI9341_renderMinecraft+0x6ac>)
 8001a36:	fb82 1203 	smull	r1, r2, r2, r3
 8001a3a:	441a      	add	r2, r3
 8001a3c:	13d2      	asrs	r2, r2, #15
 8001a3e:	17db      	asrs	r3, r3, #31
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
            char b = ((col) & 0xff) * br * ddist / (255 * 255);
 8001a46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a50:	fb02 f303 	mul.w	r3, r2, r3
 8001a54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	4a31      	ldr	r2, [pc, #196]	; (8001b24 <ILI9341_renderMinecraft+0x6ac>)
 8001a5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001a62:	441a      	add	r2, r3
 8001a64:	13d2      	asrs	r2, r2, #15
 8001a66:	17db      	asrs	r3, r3, #31
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

            unsigned short result = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	85fb      	strh	r3, [r7, #46]	; 0x2e
            // Extract and map red component (5 bits)
            result |= ((r >> 3) & 0x1F) << 11;
 8001a72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a76:	08db      	lsrs	r3, r3, #3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	02db      	lsls	r3, r3, #11
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001a82:	4313      	orrs	r3, r2
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	85fb      	strh	r3, [r7, #46]	; 0x2e

            // Extract and map green component (6 bits)
            result |= ((g >> 2) & 0x3F) << 5;
 8001a88:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	015b      	lsls	r3, r3, #5
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001a98:	b21a      	sxth	r2, r3
 8001a9a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	85fb      	strh	r3, [r7, #46]	; 0x2e

            // Extract and map blue component (5 bits)
            result |= (b >> 3) & 0x1F;
 8001aa4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001aa8:	08db      	lsrs	r3, r3, #3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	85fb      	strh	r3, [r7, #46]	; 0x2e

            uint8_t data[] = {(char)((result >> 8) & 0xFF), (char)(result & 0xFF)};
 8001abe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ac0:	0a1b      	lsrs	r3, r3, #8
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	733b      	strb	r3, [r7, #12]
 8001ac8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	737b      	strb	r3, [r7, #13]

            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001ace:	f107 010c 	add.w	r1, r7, #12
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	4813      	ldr	r0, [pc, #76]	; (8001b28 <ILI9341_renderMinecraft+0x6b0>)
 8001ada:	f002 fcd0 	bl	800447e <HAL_SPI_Transmit>
        for (int x = 0; x < ILI9341_WIDTH; x++) {
 8001ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ae8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001aec:	2bef      	cmp	r3, #239	; 0xef
 8001aee:	f77f ad3a 	ble.w	8001566 <ILI9341_renderMinecraft+0xee>
    for (int y = 0; y < ILI9341_HEIGHT; y++) {
 8001af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001af6:	3301      	adds	r3, #1
 8001af8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001afc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b00:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001b04:	f6ff ad1e 	blt.w	8001544 <ILI9341_renderMinecraft+0xcc>
        }
    }

    ILI9341_Unselect();
 8001b08:	f7ff fa1e 	bl	8000f48 <ILI9341_Unselect>
}
 8001b0c:	bf00      	nop
 8001b0e:	37a8      	adds	r7, #168	; 0xa8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000094 	.word	0x20000094
 8001b18:	42000000 	.word	0x42000000
 8001b1c:	437f0000 	.word	0x437f0000
 8001b20:	55555556 	.word	0x55555556
 8001b24:	81018203 	.word	0x81018203
 8001b28:	20001094 	.word	0x20001094

08001b2c <ILI9341_FillRectangle>:


void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4604      	mov	r4, r0
 8001b34:	4608      	mov	r0, r1
 8001b36:	4611      	mov	r1, r2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4623      	mov	r3, r4
 8001b3c:	80fb      	strh	r3, [r7, #6]
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80bb      	strh	r3, [r7, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	807b      	strh	r3, [r7, #2]
 8001b46:	4613      	mov	r3, r2
 8001b48:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	2bef      	cmp	r3, #239	; 0xef
 8001b4e:	d854      	bhi.n	8001bfa <ILI9341_FillRectangle+0xce>
 8001b50:	88bb      	ldrh	r3, [r7, #4]
 8001b52:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001b56:	d250      	bcs.n	8001bfa <ILI9341_FillRectangle+0xce>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8001b58:	88fa      	ldrh	r2, [r7, #6]
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	2bf0      	cmp	r3, #240	; 0xf0
 8001b60:	dd03      	ble.n	8001b6a <ILI9341_FillRectangle+0x3e>
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001b68:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8001b6a:	88ba      	ldrh	r2, [r7, #4]
 8001b6c:	883b      	ldrh	r3, [r7, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001b74:	dd03      	ble.n	8001b7e <ILI9341_FillRectangle+0x52>
 8001b76:	88bb      	ldrh	r3, [r7, #4]
 8001b78:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001b7c:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8001b7e:	f7ff f9d9 	bl	8000f34 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001b82:	88fa      	ldrh	r2, [r7, #6]
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	4413      	add	r3, r2
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29c      	uxth	r4, r3
 8001b8e:	88ba      	ldrh	r2, [r7, #4]
 8001b90:	883b      	ldrh	r3, [r7, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	88b9      	ldrh	r1, [r7, #4]
 8001b9c:	88f8      	ldrh	r0, [r7, #6]
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	f7ff fa34 	bl	800100c <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001ba4:	8c3b      	ldrh	r3, [r7, #32]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	733b      	strb	r3, [r7, #12]
 8001bae:	8c3b      	ldrh	r3, [r7, #32]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2140      	movs	r1, #64	; 0x40
 8001bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bbc:	f001 f884 	bl	8002cc8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001bc0:	883b      	ldrh	r3, [r7, #0]
 8001bc2:	80bb      	strh	r3, [r7, #4]
 8001bc4:	e013      	b.n	8001bee <ILI9341_FillRectangle+0xc2>
        for(x = w; x > 0; x--) {
 8001bc6:	887b      	ldrh	r3, [r7, #2]
 8001bc8:	80fb      	strh	r3, [r7, #6]
 8001bca:	e00a      	b.n	8001be2 <ILI9341_FillRectangle+0xb6>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001bcc:	f107 010c 	add.w	r1, r7, #12
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	480b      	ldr	r0, [pc, #44]	; (8001c04 <ILI9341_FillRectangle+0xd8>)
 8001bd8:	f002 fc51 	bl	800447e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	80fb      	strh	r3, [r7, #6]
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f1      	bne.n	8001bcc <ILI9341_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	80bb      	strh	r3, [r7, #4]
 8001bee:	88bb      	ldrh	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1e8      	bne.n	8001bc6 <ILI9341_FillRectangle+0x9a>

        }
    }

    ILI9341_Unselect();
 8001bf4:	f7ff f9a8 	bl	8000f48 <ILI9341_Unselect>
 8001bf8:	e000      	b.n	8001bfc <ILI9341_FillRectangle+0xd0>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8001bfa:	bf00      	nop
}
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd90      	pop	{r4, r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20001094 	.word	0x20001094

08001c08 <ILI9341_FillScreen>:

    // Deselect display
    ILI9341_Unselect();
}*/

void ILI9341_FillScreen(uint16_t color) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c1a:	22f0      	movs	r2, #240	; 0xf0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f7ff ff84 	bl	8001b2c <ILI9341_FillRectangle>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c32:	f000 fb85 	bl	8002340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c36:	f000 f823 	bl	8001c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c3a:	f000 f8ff 	bl	8001e3c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c3e:	f000 f8df 	bl	8001e00 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001c42:	f000 f8ad 	bl	8001da0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001c46:	f000 f86d 	bl	8001d24 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Unselect();
 8001c4a:	f7ff f97d 	bl	8000f48 <ILI9341_Unselect>
  ILI9341_Init();
 8001c4e:	f7ff fa25 	bl	800109c <ILI9341_Init>

  ILI9341_FillScreen(ILI9341_BLACK);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff ffd8 	bl	8001c08 <ILI9341_FillScreen>
  ILI9341_MinecraftInit();
 8001c58:	f7ff fb4e 	bl	80012f8 <ILI9341_MinecraftInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float ox = 16.5;
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <main+0x50>)
 8001c5e:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	ILI9341_renderMinecraft(ox);
 8001c60:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c64:	f7ff fc08 	bl	8001478 <ILI9341_renderMinecraft>
	  	ox++;
 8001c68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c74:	edc7 7a01 	vstr	s15, [r7, #4]
	  	ILI9341_renderMinecraft(ox);
 8001c78:	e7f2      	b.n	8001c60 <main+0x34>
 8001c7a:	bf00      	nop
 8001c7c:	41840000 	.word	0x41840000

08001c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b096      	sub	sp, #88	; 0x58
 8001c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	2244      	movs	r2, #68	; 0x44
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f003 fd2d 	bl	80056ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c94:	463b      	mov	r3, r7
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ca2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ca6:	f001 f835 	bl	8002d14 <HAL_PWREx_ControlVoltageScaling>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001cb0:	f000 f91a 	bl	8001ee8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cbc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cbe:	2310      	movs	r3, #16
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001cce:	230a      	movs	r3, #10
 8001cd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001cd2:	2307      	movs	r3, #7
 8001cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 f86c 	bl	8002dc0 <HAL_RCC_OscConfig>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001cee:	f000 f8fb 	bl	8001ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf2:	230f      	movs	r3, #15
 8001cf4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d06:	463b      	mov	r3, r7
 8001d08:	2104      	movs	r1, #4
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f001 fc34 	bl	8003578 <HAL_RCC_ClockConfig>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d16:	f000 f8e7 	bl	8001ee8 <Error_Handler>
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	3758      	adds	r7, #88	; 0x58
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d2a:	4a1c      	ldr	r2, [pc, #112]	; (8001d9c <MX_SPI1_Init+0x78>)
 8001d2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d36:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d3e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d42:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d56:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d72:	2207      	movs	r2, #7
 8001d74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_SPI1_Init+0x74>)
 8001d84:	f002 fad8 	bl	8004338 <HAL_SPI_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d8e:	f000 f8ab 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20001094 	.word	0x20001094
 8001d9c:	40013000 	.word	0x40013000

08001da0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <MX_USART2_UART_Init+0x58>)
 8001da6:	4a15      	ldr	r2, [pc, #84]	; (8001dfc <MX_USART2_UART_Init+0x5c>)
 8001da8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <MX_USART2_UART_Init+0x58>)
 8001dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001db0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <MX_USART2_UART_Init+0x58>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <MX_USART2_UART_Init+0x58>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <MX_USART2_UART_Init+0x58>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <MX_USART2_UART_Init+0x58>)
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <MX_USART2_UART_Init+0x58>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <MX_USART2_UART_Init+0x58>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <MX_USART2_UART_Init+0x58>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <MX_USART2_UART_Init+0x58>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001de2:	4805      	ldr	r0, [pc, #20]	; (8001df8 <MX_USART2_UART_Init+0x58>)
 8001de4:	f002 fe24 	bl	8004a30 <HAL_UART_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001dee:	f000 f87b 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20001140 	.word	0x20001140
 8001dfc:	40004400 	.word	0x40004400

08001e00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <MX_DMA_Init+0x38>)
 8001e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0a:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <MX_DMA_Init+0x38>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6493      	str	r3, [r2, #72]	; 0x48
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <MX_DMA_Init+0x38>)
 8001e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	200d      	movs	r0, #13
 8001e24:	f000 fc07 	bl	8002636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001e28:	200d      	movs	r0, #13
 8001e2a:	f000 fc20 	bl	800266e <HAL_NVIC_EnableIRQ>

}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000

08001e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e52:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <MX_GPIO_Init+0xa8>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	4a23      	ldr	r2, [pc, #140]	; (8001ee4 <MX_GPIO_Init+0xa8>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <MX_GPIO_Init+0xa8>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <MX_GPIO_Init+0xa8>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ee4 <MX_GPIO_Init+0xa8>)
 8001e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <MX_GPIO_Init+0xa8>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <MX_GPIO_Init+0xa8>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	4a17      	ldr	r2, [pc, #92]	; (8001ee4 <MX_GPIO_Init+0xa8>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <MX_GPIO_Init+0xa8>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <MX_GPIO_Init+0xa8>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	4a11      	ldr	r2, [pc, #68]	; (8001ee4 <MX_GPIO_Init+0xa8>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MX_GPIO_Init+0xa8>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Reset_Pin|Chip_Select_Pin|DC_Pin, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2152      	movs	r1, #82	; 0x52
 8001eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eba:	f000 ff05 	bl	8002cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Reset_Pin Chip_Select_Pin DC_Pin */
  GPIO_InitStruct.Pin = Reset_Pin|Chip_Select_Pin|DC_Pin;
 8001ebe:	2352      	movs	r3, #82	; 0x52
 8001ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed8:	f000 fd4c 	bl	8002974 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001edc:	bf00      	nop
 8001ede:	3728      	adds	r7, #40	; 0x28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eec:	b672      	cpsid	i
}
 8001eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <Error_Handler+0x8>
	...

08001ef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <HAL_MspInit+0x44>)
 8001efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efe:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <HAL_MspInit+0x44>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6613      	str	r3, [r2, #96]	; 0x60
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <HAL_MspInit+0x44>)
 8001f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_MspInit+0x44>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <HAL_MspInit+0x44>)
 8001f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_MspInit+0x44>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000

08001f3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a2c      	ldr	r2, [pc, #176]	; (800200c <HAL_SPI_MspInit+0xd0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d151      	bne.n	8002002 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <HAL_SPI_MspInit+0xd4>)
 8001f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f62:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <HAL_SPI_MspInit+0xd4>)
 8001f64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f68:	6613      	str	r3, [r2, #96]	; 0x60
 8001f6a:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_SPI_MspInit+0xd4>)
 8001f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <HAL_SPI_MspInit+0xd4>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	4a25      	ldr	r2, [pc, #148]	; (8002010 <HAL_SPI_MspInit+0xd4>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f82:	4b23      	ldr	r3, [pc, #140]	; (8002010 <HAL_SPI_MspInit+0xd4>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f8e:	23a0      	movs	r3, #160	; 0xa0
 8001f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f92:	2302      	movs	r3, #2
 8001f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f9e:	2305      	movs	r3, #5
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fac:	f000 fce2 	bl	8002974 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_SPI_MspInit+0xd8>)
 8001fb2:	4a19      	ldr	r2, [pc, #100]	; (8002018 <HAL_SPI_MspInit+0xdc>)
 8001fb4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_SPI_MspInit+0xd8>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_SPI_MspInit+0xd8>)
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <HAL_SPI_MspInit+0xd8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_SPI_MspInit+0xd8>)
 8001fca:	2280      	movs	r2, #128	; 0x80
 8001fcc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_SPI_MspInit+0xd8>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_SPI_MspInit+0xd8>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_SPI_MspInit+0xd8>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <HAL_SPI_MspInit+0xd8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001fe6:	480b      	ldr	r0, [pc, #44]	; (8002014 <HAL_SPI_MspInit+0xd8>)
 8001fe8:	f000 fb5c 	bl	80026a4 <HAL_DMA_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8001ff2:	f7ff ff79 	bl	8001ee8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a06      	ldr	r2, [pc, #24]	; (8002014 <HAL_SPI_MspInit+0xd8>)
 8001ffa:	655a      	str	r2, [r3, #84]	; 0x54
 8001ffc:	4a05      	ldr	r2, [pc, #20]	; (8002014 <HAL_SPI_MspInit+0xd8>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002002:	bf00      	nop
 8002004:	3728      	adds	r7, #40	; 0x28
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40013000 	.word	0x40013000
 8002010:	40021000 	.word	0x40021000
 8002014:	200010f8 	.word	0x200010f8
 8002018:	40020030 	.word	0x40020030

0800201c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b0ac      	sub	sp, #176	; 0xb0
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2288      	movs	r2, #136	; 0x88
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f003 fb56 	bl	80056ee <memset>
  if(huart->Instance==USART2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a21      	ldr	r2, [pc, #132]	; (80020cc <HAL_UART_MspInit+0xb0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d13b      	bne.n	80020c4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800204c:	2302      	movs	r3, #2
 800204e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002050:	2300      	movs	r3, #0
 8002052:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	4618      	mov	r0, r3
 800205a:	f001 fcb1 	bl	80039c0 <HAL_RCCEx_PeriphCLKConfig>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002064:	f7ff ff40 	bl	8001ee8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_UART_MspInit+0xb4>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <HAL_UART_MspInit+0xb4>)
 800206e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002072:	6593      	str	r3, [r2, #88]	; 0x58
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <HAL_UART_MspInit+0xb4>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002080:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <HAL_UART_MspInit+0xb4>)
 8002082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002084:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <HAL_UART_MspInit+0xb4>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800208c:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <HAL_UART_MspInit+0xb4>)
 800208e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002098:	230c      	movs	r3, #12
 800209a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020b0:	2307      	movs	r3, #7
 80020b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020ba:	4619      	mov	r1, r3
 80020bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c0:	f000 fc58 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020c4:	bf00      	nop
 80020c6:	37b0      	adds	r7, #176	; 0xb0
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40004400 	.word	0x40004400
 80020d0:	40021000 	.word	0x40021000

080020d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <NMI_Handler+0x4>

080020da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020de:	e7fe      	b.n	80020de <HardFault_Handler+0x4>

080020e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <MemManage_Handler+0x4>

080020e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ea:	e7fe      	b.n	80020ea <BusFault_Handler+0x4>

080020ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <UsageFault_Handler+0x4>

080020f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002120:	f000 f96a 	bl	80023f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <DMA1_Channel3_IRQHandler+0x10>)
 800212e:	f000 fb71 	bl	8002814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200010f8 	.word	0x200010f8

0800213c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return 1;
 8002140:	2301      	movs	r3, #1
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <_kill>:

int _kill(int pid, int sig)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002156:	f003 fb19 	bl	800578c <__errno>
 800215a:	4603      	mov	r3, r0
 800215c:	2216      	movs	r2, #22
 800215e:	601a      	str	r2, [r3, #0]
  return -1;
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <_exit>:

void _exit (int status)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002174:	f04f 31ff 	mov.w	r1, #4294967295
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ffe7 	bl	800214c <_kill>
  while (1) {}    /* Make sure we hang here */
 800217e:	e7fe      	b.n	800217e <_exit+0x12>

08002180 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	e00a      	b.n	80021a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002192:	f3af 8000 	nop.w
 8002196:	4601      	mov	r1, r0
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	60ba      	str	r2, [r7, #8]
 800219e:	b2ca      	uxtb	r2, r1
 80021a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3301      	adds	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	dbf0      	blt.n	8002192 <_read+0x12>
  }

  return len;
 80021b0:	687b      	ldr	r3, [r7, #4]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	e009      	b.n	80021e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	60ba      	str	r2, [r7, #8]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dbf1      	blt.n	80021cc <_write+0x12>
  }
  return len;
 80021e8:	687b      	ldr	r3, [r7, #4]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_close>:

int _close(int file)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800221a:	605a      	str	r2, [r3, #4]
  return 0;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <_isatty>:

int _isatty(int file)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002264:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <_sbrk+0x5c>)
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <_sbrk+0x60>)
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <_sbrk+0x64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <_sbrk+0x64>)
 800227a:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <_sbrk+0x68>)
 800227c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	429a      	cmp	r2, r3
 800228a:	d207      	bcs.n	800229c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800228c:	f003 fa7e 	bl	800578c <__errno>
 8002290:	4603      	mov	r3, r0
 8002292:	220c      	movs	r2, #12
 8002294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	e009      	b.n	80022b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <_sbrk+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <_sbrk+0x64>)
 80022ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ae:	68fb      	ldr	r3, [r7, #12]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20018000 	.word	0x20018000
 80022bc:	00000400 	.word	0x00000400
 80022c0:	200011c8 	.word	0x200011c8
 80022c4:	20001320 	.word	0x20001320

080022c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <SystemInit+0x20>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <SystemInit+0x20>)
 80022d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002324 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022f0:	f7ff ffea 	bl	80022c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f4:	480c      	ldr	r0, [pc, #48]	; (8002328 <LoopForever+0x6>)
  ldr r1, =_edata
 80022f6:	490d      	ldr	r1, [pc, #52]	; (800232c <LoopForever+0xa>)
  ldr r2, =_sidata
 80022f8:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <LoopForever+0xe>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022fc:	e002      	b.n	8002304 <LoopCopyDataInit>

080022fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002302:	3304      	adds	r3, #4

08002304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002308:	d3f9      	bcc.n	80022fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230a:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <LoopForever+0x12>)
  ldr r4, =_ebss
 800230c:	4c0a      	ldr	r4, [pc, #40]	; (8002338 <LoopForever+0x16>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002310:	e001      	b.n	8002316 <LoopFillZerobss>

08002312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002314:	3204      	adds	r2, #4

08002316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002318:	d3fb      	bcc.n	8002312 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800231a:	f003 fa3d 	bl	8005798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800231e:	f7ff fc85 	bl	8001c2c <main>

08002322 <LoopForever>:

LoopForever:
    b LoopForever
 8002322:	e7fe      	b.n	8002322 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002324:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800232c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002330:	08007ad0 	.word	0x08007ad0
  ldr r2, =_sbss
 8002334:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002338:	2000131c 	.word	0x2000131c

0800233c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800233c:	e7fe      	b.n	800233c <ADC1_2_IRQHandler>
	...

08002340 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800234a:	4b0c      	ldr	r3, [pc, #48]	; (800237c <HAL_Init+0x3c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a0b      	ldr	r2, [pc, #44]	; (800237c <HAL_Init+0x3c>)
 8002350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002354:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002356:	2003      	movs	r0, #3
 8002358:	f000 f962 	bl	8002620 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800235c:	2000      	movs	r0, #0
 800235e:	f000 f80f 	bl	8002380 <HAL_InitTick>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	71fb      	strb	r3, [r7, #7]
 800236c:	e001      	b.n	8002372 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800236e:	f7ff fdc1 	bl	8001ef4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002372:	79fb      	ldrb	r3, [r7, #7]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40022000 	.word	0x40022000

08002380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800238c:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_InitTick+0x6c>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d023      	beq.n	80023dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002394:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <HAL_InitTick+0x70>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_InitTick+0x6c>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f96d 	bl	800268a <HAL_SYSTICK_Config>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10f      	bne.n	80023d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b0f      	cmp	r3, #15
 80023ba:	d809      	bhi.n	80023d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023bc:	2200      	movs	r2, #0
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	f04f 30ff 	mov.w	r0, #4294967295
 80023c4:	f000 f937 	bl	8002636 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023c8:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <HAL_InitTick+0x74>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e007      	b.n	80023e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	e004      	b.n	80023e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	e001      	b.n	80023e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000008 	.word	0x20000008
 80023f0:	20000000 	.word	0x20000000
 80023f4:	20000004 	.word	0x20000004

080023f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_IncTick+0x20>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_IncTick+0x24>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4413      	add	r3, r2
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_IncTick+0x24>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000008 	.word	0x20000008
 800241c:	200011cc 	.word	0x200011cc

08002420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return uwTick;
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <HAL_GetTick+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	200011cc 	.word	0x200011cc

08002438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002440:	f7ff ffee 	bl	8002420 <HAL_GetTick>
 8002444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d005      	beq.n	800245e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_Delay+0x44>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800245e:	bf00      	nop
 8002460:	f7ff ffde 	bl	8002420 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	429a      	cmp	r2, r3
 800246e:	d8f7      	bhi.n	8002460 <HAL_Delay+0x28>
  {
  }
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000008 	.word	0x20000008

08002480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800249c:	4013      	ands	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b2:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <__NVIC_SetPriorityGrouping+0x44>)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	60d3      	str	r3, [r2, #12]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024cc:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <__NVIC_GetPriorityGrouping+0x18>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	f003 0307 	and.w	r3, r3, #7
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	db0b      	blt.n	800250e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	f003 021f 	and.w	r2, r3, #31
 80024fc:	4907      	ldr	r1, [pc, #28]	; (800251c <__NVIC_EnableIRQ+0x38>)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	2001      	movs	r0, #1
 8002506:	fa00 f202 	lsl.w	r2, r0, r2
 800250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000e100 	.word	0xe000e100

08002520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	db0a      	blt.n	800254a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	490c      	ldr	r1, [pc, #48]	; (800256c <__NVIC_SetPriority+0x4c>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	440b      	add	r3, r1
 8002544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002548:	e00a      	b.n	8002560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4908      	ldr	r1, [pc, #32]	; (8002570 <__NVIC_SetPriority+0x50>)
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3b04      	subs	r3, #4
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	440b      	add	r3, r1
 800255e:	761a      	strb	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000e100 	.word	0xe000e100
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f1c3 0307 	rsb	r3, r3, #7
 800258e:	2b04      	cmp	r3, #4
 8002590:	bf28      	it	cs
 8002592:	2304      	movcs	r3, #4
 8002594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3304      	adds	r3, #4
 800259a:	2b06      	cmp	r3, #6
 800259c:	d902      	bls.n	80025a4 <NVIC_EncodePriority+0x30>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3b03      	subs	r3, #3
 80025a2:	e000      	b.n	80025a6 <NVIC_EncodePriority+0x32>
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	401a      	ands	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	43d9      	mvns	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	4313      	orrs	r3, r2
         );
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ec:	d301      	bcc.n	80025f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00f      	b.n	8002612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <SysTick_Config+0x40>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fa:	210f      	movs	r1, #15
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	f7ff ff8e 	bl	8002520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <SysTick_Config+0x40>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <SysTick_Config+0x40>)
 800260c:	2207      	movs	r2, #7
 800260e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	e000e010 	.word	0xe000e010

08002620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff29 	bl	8002480 <__NVIC_SetPriorityGrouping>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002648:	f7ff ff3e 	bl	80024c8 <__NVIC_GetPriorityGrouping>
 800264c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	f7ff ff8e 	bl	8002574 <NVIC_EncodePriority>
 8002658:	4602      	mov	r2, r0
 800265a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff5d 	bl	8002520 <__NVIC_SetPriority>
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff31 	bl	80024e4 <__NVIC_EnableIRQ>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ffa2 	bl	80025dc <SysTick_Config>
 8002698:	4603      	mov	r3, r0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e098      	b.n	80027e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	4b4d      	ldr	r3, [pc, #308]	; (80027f4 <HAL_DMA_Init+0x150>)
 80026be:	429a      	cmp	r2, r3
 80026c0:	d80f      	bhi.n	80026e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	4b4b      	ldr	r3, [pc, #300]	; (80027f8 <HAL_DMA_Init+0x154>)
 80026ca:	4413      	add	r3, r2
 80026cc:	4a4b      	ldr	r2, [pc, #300]	; (80027fc <HAL_DMA_Init+0x158>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	009a      	lsls	r2, r3, #2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a48      	ldr	r2, [pc, #288]	; (8002800 <HAL_DMA_Init+0x15c>)
 80026de:	641a      	str	r2, [r3, #64]	; 0x40
 80026e0:	e00e      	b.n	8002700 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	4b46      	ldr	r3, [pc, #280]	; (8002804 <HAL_DMA_Init+0x160>)
 80026ea:	4413      	add	r3, r2
 80026ec:	4a43      	ldr	r2, [pc, #268]	; (80027fc <HAL_DMA_Init+0x158>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	009a      	lsls	r2, r3, #2
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a42      	ldr	r2, [pc, #264]	; (8002808 <HAL_DMA_Init+0x164>)
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002724:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002730:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800273c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800275a:	d039      	beq.n	80027d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	4a27      	ldr	r2, [pc, #156]	; (8002800 <HAL_DMA_Init+0x15c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d11a      	bne.n	800279c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002766:	4b29      	ldr	r3, [pc, #164]	; (800280c <HAL_DMA_Init+0x168>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f003 031c 	and.w	r3, r3, #28
 8002772:	210f      	movs	r1, #15
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	4924      	ldr	r1, [pc, #144]	; (800280c <HAL_DMA_Init+0x168>)
 800277c:	4013      	ands	r3, r2
 800277e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <HAL_DMA_Init+0x168>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6859      	ldr	r1, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	f003 031c 	and.w	r3, r3, #28
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	491d      	ldr	r1, [pc, #116]	; (800280c <HAL_DMA_Init+0x168>)
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]
 800279a:	e019      	b.n	80027d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800279c:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <HAL_DMA_Init+0x16c>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	f003 031c 	and.w	r3, r3, #28
 80027a8:	210f      	movs	r1, #15
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	4917      	ldr	r1, [pc, #92]	; (8002810 <HAL_DMA_Init+0x16c>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027b6:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_DMA_Init+0x16c>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6859      	ldr	r1, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f003 031c 	and.w	r3, r3, #28
 80027c6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ca:	4911      	ldr	r1, [pc, #68]	; (8002810 <HAL_DMA_Init+0x16c>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	40020407 	.word	0x40020407
 80027f8:	bffdfff8 	.word	0xbffdfff8
 80027fc:	cccccccd 	.word	0xcccccccd
 8002800:	40020000 	.word	0x40020000
 8002804:	bffdfbf8 	.word	0xbffdfbf8
 8002808:	40020400 	.word	0x40020400
 800280c:	400200a8 	.word	0x400200a8
 8002810:	400204a8 	.word	0x400204a8

08002814 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	f003 031c 	and.w	r3, r3, #28
 8002834:	2204      	movs	r2, #4
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d026      	beq.n	800288e <HAL_DMA_IRQHandler+0x7a>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	d021      	beq.n	800288e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b00      	cmp	r3, #0
 8002856:	d107      	bne.n	8002868 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0204 	bic.w	r2, r2, #4
 8002866:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286c:	f003 021c 	and.w	r2, r3, #28
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	2104      	movs	r1, #4
 8002876:	fa01 f202 	lsl.w	r2, r1, r2
 800287a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	2b00      	cmp	r3, #0
 8002882:	d071      	beq.n	8002968 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800288c:	e06c      	b.n	8002968 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f003 031c 	and.w	r3, r3, #28
 8002896:	2202      	movs	r2, #2
 8002898:	409a      	lsls	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d02e      	beq.n	8002900 <HAL_DMA_IRQHandler+0xec>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d029      	beq.n	8002900 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10b      	bne.n	80028d2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 020a 	bic.w	r2, r2, #10
 80028c8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f003 021c 	and.w	r2, r3, #28
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	2102      	movs	r1, #2
 80028e0:	fa01 f202 	lsl.w	r2, r1, r2
 80028e4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d038      	beq.n	8002968 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80028fe:	e033      	b.n	8002968 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	f003 031c 	and.w	r3, r3, #28
 8002908:	2208      	movs	r2, #8
 800290a:	409a      	lsls	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d02a      	beq.n	800296a <HAL_DMA_IRQHandler+0x156>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d025      	beq.n	800296a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 020e 	bic.w	r2, r2, #14
 800292c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f003 021c 	and.w	r2, r3, #28
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2101      	movs	r1, #1
 800293c:	fa01 f202 	lsl.w	r2, r1, r2
 8002940:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295c:	2b00      	cmp	r3, #0
 800295e:	d004      	beq.n	800296a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002968:	bf00      	nop
 800296a:	bf00      	nop
}
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002982:	e17f      	b.n	8002c84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2101      	movs	r1, #1
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	fa01 f303 	lsl.w	r3, r1, r3
 8002990:	4013      	ands	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 8171 	beq.w	8002c7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d005      	beq.n	80029b4 <HAL_GPIO_Init+0x40>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d130      	bne.n	8002a16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	2203      	movs	r2, #3
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029ea:	2201      	movs	r2, #1
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	f003 0201 	and.w	r2, r3, #1
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d118      	bne.n	8002a54 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a28:	2201      	movs	r2, #1
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	08db      	lsrs	r3, r3, #3
 8002a3e:	f003 0201 	and.w	r2, r3, #1
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d017      	beq.n	8002a90 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d123      	bne.n	8002ae4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	08da      	lsrs	r2, r3, #3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3208      	adds	r2, #8
 8002aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	220f      	movs	r2, #15
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	08da      	lsrs	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3208      	adds	r2, #8
 8002ade:	6939      	ldr	r1, [r7, #16]
 8002ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0203 	and.w	r2, r3, #3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80ac 	beq.w	8002c7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b26:	4b5f      	ldr	r3, [pc, #380]	; (8002ca4 <HAL_GPIO_Init+0x330>)
 8002b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2a:	4a5e      	ldr	r2, [pc, #376]	; (8002ca4 <HAL_GPIO_Init+0x330>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6613      	str	r3, [r2, #96]	; 0x60
 8002b32:	4b5c      	ldr	r3, [pc, #368]	; (8002ca4 <HAL_GPIO_Init+0x330>)
 8002b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b3e:	4a5a      	ldr	r2, [pc, #360]	; (8002ca8 <HAL_GPIO_Init+0x334>)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	3302      	adds	r3, #2
 8002b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	220f      	movs	r2, #15
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b68:	d025      	beq.n	8002bb6 <HAL_GPIO_Init+0x242>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4f      	ldr	r2, [pc, #316]	; (8002cac <HAL_GPIO_Init+0x338>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01f      	beq.n	8002bb2 <HAL_GPIO_Init+0x23e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4e      	ldr	r2, [pc, #312]	; (8002cb0 <HAL_GPIO_Init+0x33c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d019      	beq.n	8002bae <HAL_GPIO_Init+0x23a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4d      	ldr	r2, [pc, #308]	; (8002cb4 <HAL_GPIO_Init+0x340>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d013      	beq.n	8002baa <HAL_GPIO_Init+0x236>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4c      	ldr	r2, [pc, #304]	; (8002cb8 <HAL_GPIO_Init+0x344>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00d      	beq.n	8002ba6 <HAL_GPIO_Init+0x232>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4b      	ldr	r2, [pc, #300]	; (8002cbc <HAL_GPIO_Init+0x348>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d007      	beq.n	8002ba2 <HAL_GPIO_Init+0x22e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4a      	ldr	r2, [pc, #296]	; (8002cc0 <HAL_GPIO_Init+0x34c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d101      	bne.n	8002b9e <HAL_GPIO_Init+0x22a>
 8002b9a:	2306      	movs	r3, #6
 8002b9c:	e00c      	b.n	8002bb8 <HAL_GPIO_Init+0x244>
 8002b9e:	2307      	movs	r3, #7
 8002ba0:	e00a      	b.n	8002bb8 <HAL_GPIO_Init+0x244>
 8002ba2:	2305      	movs	r3, #5
 8002ba4:	e008      	b.n	8002bb8 <HAL_GPIO_Init+0x244>
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x244>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e004      	b.n	8002bb8 <HAL_GPIO_Init+0x244>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e002      	b.n	8002bb8 <HAL_GPIO_Init+0x244>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_GPIO_Init+0x244>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	f002 0203 	and.w	r2, r2, #3
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	4093      	lsls	r3, r2
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bc8:	4937      	ldr	r1, [pc, #220]	; (8002ca8 <HAL_GPIO_Init+0x334>)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4013      	ands	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bfa:	4a32      	ldr	r2, [pc, #200]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c00:	4b30      	ldr	r3, [pc, #192]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c24:	4a27      	ldr	r2, [pc, #156]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c2a:	4b26      	ldr	r3, [pc, #152]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c4e:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c54:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c78:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <HAL_GPIO_Init+0x350>)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	3301      	adds	r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f47f ae78 	bne.w	8002984 <HAL_GPIO_Init+0x10>
  }
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40010000 	.word	0x40010000
 8002cac:	48000400 	.word	0x48000400
 8002cb0:	48000800 	.word	0x48000800
 8002cb4:	48000c00 	.word	0x48000c00
 8002cb8:	48001000 	.word	0x48001000
 8002cbc:	48001400 	.word	0x48001400
 8002cc0:	48001800 	.word	0x48001800
 8002cc4:	40010400 	.word	0x40010400

08002cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	807b      	strh	r3, [r7, #2]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cd8:	787b      	ldrb	r3, [r7, #1]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cde:	887a      	ldrh	r2, [r7, #2]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ce4:	e002      	b.n	8002cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40007000 	.word	0x40007000

08002d14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d22:	d130      	bne.n	8002d86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d24:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d30:	d038      	beq.n	8002da4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d32:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d3a:	4a1e      	ldr	r2, [pc, #120]	; (8002db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d42:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2232      	movs	r2, #50	; 0x32
 8002d48:	fb02 f303 	mul.w	r3, r2, r3
 8002d4c:	4a1b      	ldr	r2, [pc, #108]	; (8002dbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	0c9b      	lsrs	r3, r3, #18
 8002d54:	3301      	adds	r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d58:	e002      	b.n	8002d60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d60:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6c:	d102      	bne.n	8002d74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f2      	bne.n	8002d5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d74:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d80:	d110      	bne.n	8002da4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e00f      	b.n	8002da6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d92:	d007      	beq.n	8002da4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d94:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d9c:	4a05      	ldr	r2, [pc, #20]	; (8002db4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40007000 	.word	0x40007000
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	431bde83 	.word	0x431bde83

08002dc0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e3ca      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd2:	4b97      	ldr	r3, [pc, #604]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ddc:	4b94      	ldr	r3, [pc, #592]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80e4 	beq.w	8002fbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <HAL_RCC_OscConfig+0x4a>
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2b0c      	cmp	r3, #12
 8002dfe:	f040 808b 	bne.w	8002f18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	f040 8087 	bne.w	8002f18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e0a:	4b89      	ldr	r3, [pc, #548]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_RCC_OscConfig+0x62>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e3a2      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1a      	ldr	r2, [r3, #32]
 8002e26:	4b82      	ldr	r3, [pc, #520]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d004      	beq.n	8002e3c <HAL_RCC_OscConfig+0x7c>
 8002e32:	4b7f      	ldr	r3, [pc, #508]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e3a:	e005      	b.n	8002e48 <HAL_RCC_OscConfig+0x88>
 8002e3c:	4b7c      	ldr	r3, [pc, #496]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d223      	bcs.n	8002e94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fd55 	bl	8003900 <RCC_SetFlashLatencyFromMSIRange>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e383      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e60:	4b73      	ldr	r3, [pc, #460]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a72      	ldr	r2, [pc, #456]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002e66:	f043 0308 	orr.w	r3, r3, #8
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	4b70      	ldr	r3, [pc, #448]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	496d      	ldr	r1, [pc, #436]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e7e:	4b6c      	ldr	r3, [pc, #432]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	4968      	ldr	r1, [pc, #416]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]
 8002e92:	e025      	b.n	8002ee0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e94:	4b66      	ldr	r3, [pc, #408]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a65      	ldr	r2, [pc, #404]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002e9a:	f043 0308 	orr.w	r3, r3, #8
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b63      	ldr	r3, [pc, #396]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	4960      	ldr	r1, [pc, #384]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eb2:	4b5f      	ldr	r3, [pc, #380]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	495b      	ldr	r1, [pc, #364]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d109      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fd15 	bl	8003900 <RCC_SetFlashLatencyFromMSIRange>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e343      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ee0:	f000 fc4a 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b52      	ldr	r3, [pc, #328]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	4950      	ldr	r1, [pc, #320]	; (8003034 <HAL_RCC_OscConfig+0x274>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8002efc:	4a4e      	ldr	r2, [pc, #312]	; (8003038 <HAL_RCC_OscConfig+0x278>)
 8002efe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f00:	4b4e      	ldr	r3, [pc, #312]	; (800303c <HAL_RCC_OscConfig+0x27c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fa3b 	bl	8002380 <HAL_InitTick>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d052      	beq.n	8002fba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	e327      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d032      	beq.n	8002f86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f20:	4b43      	ldr	r3, [pc, #268]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a42      	ldr	r2, [pc, #264]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f2c:	f7ff fa78 	bl	8002420 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f34:	f7ff fa74 	bl	8002420 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e310      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f46:	4b3a      	ldr	r3, [pc, #232]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f52:	4b37      	ldr	r3, [pc, #220]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a36      	ldr	r2, [pc, #216]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f58:	f043 0308 	orr.w	r3, r3, #8
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	4b34      	ldr	r3, [pc, #208]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	4931      	ldr	r1, [pc, #196]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f70:	4b2f      	ldr	r3, [pc, #188]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	492c      	ldr	r1, [pc, #176]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	604b      	str	r3, [r1, #4]
 8002f84:	e01a      	b.n	8002fbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f86:	4b2a      	ldr	r3, [pc, #168]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a29      	ldr	r2, [pc, #164]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f92:	f7ff fa45 	bl	8002420 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f9a:	f7ff fa41 	bl	8002420 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e2dd      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fac:	4b20      	ldr	r3, [pc, #128]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f0      	bne.n	8002f9a <HAL_RCC_OscConfig+0x1da>
 8002fb8:	e000      	b.n	8002fbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d074      	beq.n	80030b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d005      	beq.n	8002fda <HAL_RCC_OscConfig+0x21a>
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b0c      	cmp	r3, #12
 8002fd2:	d10e      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fda:	4b15      	ldr	r3, [pc, #84]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d064      	beq.n	80030b0 <HAL_RCC_OscConfig+0x2f0>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d160      	bne.n	80030b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e2ba      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_OscConfig+0x24a>
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a0b      	ldr	r2, [pc, #44]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8003002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e026      	b.n	8003058 <HAL_RCC_OscConfig+0x298>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003012:	d115      	bne.n	8003040 <HAL_RCC_OscConfig+0x280>
 8003014:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a05      	ldr	r2, [pc, #20]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 800301a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a02      	ldr	r2, [pc, #8]	; (8003030 <HAL_RCC_OscConfig+0x270>)
 8003026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	e014      	b.n	8003058 <HAL_RCC_OscConfig+0x298>
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000
 8003034:	080077bc 	.word	0x080077bc
 8003038:	20000000 	.word	0x20000000
 800303c:	20000004 	.word	0x20000004
 8003040:	4ba0      	ldr	r3, [pc, #640]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a9f      	ldr	r2, [pc, #636]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 8003046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b9d      	ldr	r3, [pc, #628]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a9c      	ldr	r2, [pc, #624]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 8003052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7ff f9de 	bl	8002420 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003068:	f7ff f9da 	bl	8002420 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e276      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800307a:	4b92      	ldr	r3, [pc, #584]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x2a8>
 8003086:	e014      	b.n	80030b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7ff f9ca 	bl	8002420 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003090:	f7ff f9c6 	bl	8002420 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	; 0x64
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e262      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030a2:	4b88      	ldr	r3, [pc, #544]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x2d0>
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d060      	beq.n	8003180 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_OscConfig+0x310>
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b0c      	cmp	r3, #12
 80030c8:	d119      	bne.n	80030fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d116      	bne.n	80030fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d0:	4b7c      	ldr	r3, [pc, #496]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_OscConfig+0x328>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e23f      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e8:	4b76      	ldr	r3, [pc, #472]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	4973      	ldr	r1, [pc, #460]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030fc:	e040      	b.n	8003180 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d023      	beq.n	800314e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003106:	4b6f      	ldr	r3, [pc, #444]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a6e      	ldr	r2, [pc, #440]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 800310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003112:	f7ff f985 	bl	8002420 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311a:	f7ff f981 	bl	8002420 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e21d      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800312c:	4b65      	ldr	r3, [pc, #404]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003138:	4b62      	ldr	r3, [pc, #392]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	061b      	lsls	r3, r3, #24
 8003146:	495f      	ldr	r1, [pc, #380]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 8003148:	4313      	orrs	r3, r2
 800314a:	604b      	str	r3, [r1, #4]
 800314c:	e018      	b.n	8003180 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800314e:	4b5d      	ldr	r3, [pc, #372]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a5c      	ldr	r2, [pc, #368]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 8003154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7ff f961 	bl	8002420 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003162:	f7ff f95d 	bl	8002420 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e1f9      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003174:	4b53      	ldr	r3, [pc, #332]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f0      	bne.n	8003162 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b00      	cmp	r3, #0
 800318a:	d03c      	beq.n	8003206 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01c      	beq.n	80031ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003194:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 8003196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319a:	4a4a      	ldr	r2, [pc, #296]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7ff f93c 	bl	8002420 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ac:	f7ff f938 	bl	8002420 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e1d4      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031be:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 80031c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0ef      	beq.n	80031ac <HAL_RCC_OscConfig+0x3ec>
 80031cc:	e01b      	b.n	8003206 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ce:	4b3d      	ldr	r3, [pc, #244]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 80031d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d4:	4a3b      	ldr	r2, [pc, #236]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 80031d6:	f023 0301 	bic.w	r3, r3, #1
 80031da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031de:	f7ff f91f 	bl	8002420 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e6:	f7ff f91b 	bl	8002420 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e1b7      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031f8:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 80031fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1ef      	bne.n	80031e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 80a6 	beq.w	8003360 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003214:	2300      	movs	r3, #0
 8003216:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003218:	4b2a      	ldr	r3, [pc, #168]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10d      	bne.n	8003240 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003224:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	4a26      	ldr	r2, [pc, #152]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 800322a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322e:	6593      	str	r3, [r2, #88]	; 0x58
 8003230:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323c:	2301      	movs	r3, #1
 800323e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003240:	4b21      	ldr	r3, [pc, #132]	; (80032c8 <HAL_RCC_OscConfig+0x508>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d118      	bne.n	800327e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800324c:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <HAL_RCC_OscConfig+0x508>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1d      	ldr	r2, [pc, #116]	; (80032c8 <HAL_RCC_OscConfig+0x508>)
 8003252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003256:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003258:	f7ff f8e2 	bl	8002420 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003260:	f7ff f8de 	bl	8002420 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e17a      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003272:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <HAL_RCC_OscConfig+0x508>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d108      	bne.n	8003298 <HAL_RCC_OscConfig+0x4d8>
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	4a0d      	ldr	r2, [pc, #52]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003296:	e029      	b.n	80032ec <HAL_RCC_OscConfig+0x52c>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b05      	cmp	r3, #5
 800329e:	d115      	bne.n	80032cc <HAL_RCC_OscConfig+0x50c>
 80032a0:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a6:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 80032a8:	f043 0304 	orr.w	r3, r3, #4
 80032ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	4a03      	ldr	r2, [pc, #12]	; (80032c4 <HAL_RCC_OscConfig+0x504>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032c0:	e014      	b.n	80032ec <HAL_RCC_OscConfig+0x52c>
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40007000 	.word	0x40007000
 80032cc:	4b9c      	ldr	r3, [pc, #624]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	4a9b      	ldr	r2, [pc, #620]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032dc:	4b98      	ldr	r3, [pc, #608]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	4a97      	ldr	r2, [pc, #604]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 80032e4:	f023 0304 	bic.w	r3, r3, #4
 80032e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d016      	beq.n	8003322 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7ff f894 	bl	8002420 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7ff f890 	bl	8002420 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	; 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e12a      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003312:	4b8b      	ldr	r3, [pc, #556]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 8003314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ed      	beq.n	80032fc <HAL_RCC_OscConfig+0x53c>
 8003320:	e015      	b.n	800334e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003322:	f7ff f87d 	bl	8002420 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003328:	e00a      	b.n	8003340 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332a:	f7ff f879 	bl	8002420 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	f241 3288 	movw	r2, #5000	; 0x1388
 8003338:	4293      	cmp	r3, r2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e113      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003340:	4b7f      	ldr	r3, [pc, #508]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1ed      	bne.n	800332a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800334e:	7ffb      	ldrb	r3, [r7, #31]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d105      	bne.n	8003360 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003354:	4b7a      	ldr	r3, [pc, #488]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	4a79      	ldr	r2, [pc, #484]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 800335a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80fe 	beq.w	8003566 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	2b02      	cmp	r3, #2
 8003370:	f040 80d0 	bne.w	8003514 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003374:	4b72      	ldr	r3, [pc, #456]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f003 0203 	and.w	r2, r3, #3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	429a      	cmp	r2, r3
 8003386:	d130      	bne.n	80033ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	3b01      	subs	r3, #1
 8003394:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d127      	bne.n	80033ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d11f      	bne.n	80033ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033b4:	2a07      	cmp	r2, #7
 80033b6:	bf14      	ite	ne
 80033b8:	2201      	movne	r2, #1
 80033ba:	2200      	moveq	r2, #0
 80033bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033be:	4293      	cmp	r3, r2
 80033c0:	d113      	bne.n	80033ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	085b      	lsrs	r3, r3, #1
 80033ce:	3b01      	subs	r3, #1
 80033d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d109      	bne.n	80033ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	085b      	lsrs	r3, r3, #1
 80033e2:	3b01      	subs	r3, #1
 80033e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d06e      	beq.n	80034c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d069      	beq.n	80034c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033f0:	4b53      	ldr	r3, [pc, #332]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d105      	bne.n	8003408 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033fc:	4b50      	ldr	r3, [pc, #320]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0ad      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800340c:	4b4c      	ldr	r3, [pc, #304]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a4b      	ldr	r2, [pc, #300]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 8003412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003416:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003418:	f7ff f802 	bl	8002420 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003420:	f7fe fffe 	bl	8002420 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e09a      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003432:	4b43      	ldr	r3, [pc, #268]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800343e:	4b40      	ldr	r3, [pc, #256]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	4b40      	ldr	r3, [pc, #256]	; (8003544 <HAL_RCC_OscConfig+0x784>)
 8003444:	4013      	ands	r3, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800344e:	3a01      	subs	r2, #1
 8003450:	0112      	lsls	r2, r2, #4
 8003452:	4311      	orrs	r1, r2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003458:	0212      	lsls	r2, r2, #8
 800345a:	4311      	orrs	r1, r2
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003460:	0852      	lsrs	r2, r2, #1
 8003462:	3a01      	subs	r2, #1
 8003464:	0552      	lsls	r2, r2, #21
 8003466:	4311      	orrs	r1, r2
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800346c:	0852      	lsrs	r2, r2, #1
 800346e:	3a01      	subs	r2, #1
 8003470:	0652      	lsls	r2, r2, #25
 8003472:	4311      	orrs	r1, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003478:	0912      	lsrs	r2, r2, #4
 800347a:	0452      	lsls	r2, r2, #17
 800347c:	430a      	orrs	r2, r1
 800347e:	4930      	ldr	r1, [pc, #192]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 8003480:	4313      	orrs	r3, r2
 8003482:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003484:	4b2e      	ldr	r3, [pc, #184]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a2d      	ldr	r2, [pc, #180]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 800348a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800348e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003490:	4b2b      	ldr	r3, [pc, #172]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4a2a      	ldr	r2, [pc, #168]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 8003496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800349a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800349c:	f7fe ffc0 	bl	8002420 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fe ffbc 	bl	8002420 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e058      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b6:	4b22      	ldr	r3, [pc, #136]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034c2:	e050      	b.n	8003566 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e04f      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c8:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d148      	bne.n	8003566 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034d4:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a19      	ldr	r2, [pc, #100]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 80034da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034e0:	4b17      	ldr	r3, [pc, #92]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a16      	ldr	r2, [pc, #88]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 80034e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034ec:	f7fe ff98 	bl	8002420 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fe ff94 	bl	8002420 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e030      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003506:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x734>
 8003512:	e028      	b.n	8003566 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b0c      	cmp	r3, #12
 8003518:	d023      	beq.n	8003562 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <HAL_RCC_OscConfig+0x780>)
 8003520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003526:	f7fe ff7b 	bl	8002420 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800352c:	e00c      	b.n	8003548 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352e:	f7fe ff77 	bl	8002420 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d905      	bls.n	8003548 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e013      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
 8003540:	40021000 	.word	0x40021000
 8003544:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCC_OscConfig+0x7b0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ec      	bne.n	800352e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_RCC_OscConfig+0x7b0>)
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	4905      	ldr	r1, [pc, #20]	; (8003570 <HAL_RCC_OscConfig+0x7b0>)
 800355a:	4b06      	ldr	r3, [pc, #24]	; (8003574 <HAL_RCC_OscConfig+0x7b4>)
 800355c:	4013      	ands	r3, r2
 800355e:	60cb      	str	r3, [r1, #12]
 8003560:	e001      	b.n	8003566 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3720      	adds	r7, #32
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000
 8003574:	feeefffc 	.word	0xfeeefffc

08003578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0e7      	b.n	800375c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b75      	ldr	r3, [pc, #468]	; (8003764 <HAL_RCC_ClockConfig+0x1ec>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d910      	bls.n	80035bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b72      	ldr	r3, [pc, #456]	; (8003764 <HAL_RCC_ClockConfig+0x1ec>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 0207 	bic.w	r2, r3, #7
 80035a2:	4970      	ldr	r1, [pc, #448]	; (8003764 <HAL_RCC_ClockConfig+0x1ec>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b6e      	ldr	r3, [pc, #440]	; (8003764 <HAL_RCC_ClockConfig+0x1ec>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0cf      	b.n	800375c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d010      	beq.n	80035ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	4b66      	ldr	r3, [pc, #408]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d908      	bls.n	80035ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d8:	4b63      	ldr	r3, [pc, #396]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4960      	ldr	r1, [pc, #384]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d04c      	beq.n	8003690 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fe:	4b5a      	ldr	r3, [pc, #360]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d121      	bne.n	800364e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e0a6      	b.n	800375c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003616:	4b54      	ldr	r3, [pc, #336]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d115      	bne.n	800364e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e09a      	b.n	800375c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800362e:	4b4e      	ldr	r3, [pc, #312]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e08e      	b.n	800375c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800363e:	4b4a      	ldr	r3, [pc, #296]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e086      	b.n	800375c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800364e:	4b46      	ldr	r3, [pc, #280]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f023 0203 	bic.w	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	4943      	ldr	r1, [pc, #268]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 800365c:	4313      	orrs	r3, r2
 800365e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003660:	f7fe fede 	bl	8002420 <HAL_GetTick>
 8003664:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	e00a      	b.n	800367e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003668:	f7fe feda 	bl	8002420 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e06e      	b.n	800375c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	4b3a      	ldr	r3, [pc, #232]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 020c 	and.w	r2, r3, #12
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	429a      	cmp	r2, r3
 800368e:	d1eb      	bne.n	8003668 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d010      	beq.n	80036be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	4b31      	ldr	r3, [pc, #196]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d208      	bcs.n	80036be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ac:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	492b      	ldr	r1, [pc, #172]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036be:	4b29      	ldr	r3, [pc, #164]	; (8003764 <HAL_RCC_ClockConfig+0x1ec>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d210      	bcs.n	80036ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036cc:	4b25      	ldr	r3, [pc, #148]	; (8003764 <HAL_RCC_ClockConfig+0x1ec>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f023 0207 	bic.w	r2, r3, #7
 80036d4:	4923      	ldr	r1, [pc, #140]	; (8003764 <HAL_RCC_ClockConfig+0x1ec>)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	4313      	orrs	r3, r2
 80036da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036dc:	4b21      	ldr	r3, [pc, #132]	; (8003764 <HAL_RCC_ClockConfig+0x1ec>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d001      	beq.n	80036ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e036      	b.n	800375c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fa:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	4918      	ldr	r1, [pc, #96]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 8003708:	4313      	orrs	r3, r2
 800370a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d009      	beq.n	800372c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003718:	4b13      	ldr	r3, [pc, #76]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4910      	ldr	r1, [pc, #64]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 8003728:	4313      	orrs	r3, r2
 800372a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800372c:	f000 f824 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8003730:	4602      	mov	r2, r0
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <HAL_RCC_ClockConfig+0x1f0>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	091b      	lsrs	r3, r3, #4
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	490b      	ldr	r1, [pc, #44]	; (800376c <HAL_RCC_ClockConfig+0x1f4>)
 800373e:	5ccb      	ldrb	r3, [r1, r3]
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
 8003748:	4a09      	ldr	r2, [pc, #36]	; (8003770 <HAL_RCC_ClockConfig+0x1f8>)
 800374a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_RCC_ClockConfig+0x1fc>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7fe fe15 	bl	8002380 <HAL_InitTick>
 8003756:	4603      	mov	r3, r0
 8003758:	72fb      	strb	r3, [r7, #11]

  return status;
 800375a:	7afb      	ldrb	r3, [r7, #11]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40022000 	.word	0x40022000
 8003768:	40021000 	.word	0x40021000
 800376c:	080077bc 	.word	0x080077bc
 8003770:	20000000 	.word	0x20000000
 8003774:	20000004 	.word	0x20000004

08003778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003778:	b480      	push	{r7}
 800377a:	b089      	sub	sp, #36	; 0x24
 800377c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003786:	4b3e      	ldr	r3, [pc, #248]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003790:	4b3b      	ldr	r3, [pc, #236]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x34>
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	d121      	bne.n	80037ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d11e      	bne.n	80037ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037ac:	4b34      	ldr	r3, [pc, #208]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d107      	bne.n	80037c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037b8:	4b31      	ldr	r3, [pc, #196]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037be:	0a1b      	lsrs	r3, r3, #8
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	e005      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037c8:	4b2d      	ldr	r3, [pc, #180]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037d4:	4a2b      	ldr	r2, [pc, #172]	; (8003884 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10d      	bne.n	8003800 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d102      	bne.n	80037f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_RCC_GetSysClockFreq+0x110>)
 80037f2:	61bb      	str	r3, [r7, #24]
 80037f4:	e004      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037fc:	4b23      	ldr	r3, [pc, #140]	; (800388c <HAL_RCC_GetSysClockFreq+0x114>)
 80037fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	2b0c      	cmp	r3, #12
 8003804:	d134      	bne.n	8003870 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003806:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d003      	beq.n	800381e <HAL_RCC_GetSysClockFreq+0xa6>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d003      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0xac>
 800381c:	e005      	b.n	800382a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800381e:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <HAL_RCC_GetSysClockFreq+0x110>)
 8003820:	617b      	str	r3, [r7, #20]
      break;
 8003822:	e005      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_RCC_GetSysClockFreq+0x114>)
 8003826:	617b      	str	r3, [r7, #20]
      break;
 8003828:	e002      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	617b      	str	r3, [r7, #20]
      break;
 800382e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003830:	4b13      	ldr	r3, [pc, #76]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	3301      	adds	r3, #1
 800383c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800383e:	4b10      	ldr	r3, [pc, #64]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	fb03 f202 	mul.w	r2, r3, r2
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	fbb2 f3f3 	udiv	r3, r2, r3
 8003854:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	0e5b      	lsrs	r3, r3, #25
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	3301      	adds	r3, #1
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	fbb2 f3f3 	udiv	r3, r2, r3
 800386e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003870:	69bb      	ldr	r3, [r7, #24]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3724      	adds	r7, #36	; 0x24
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	080077d4 	.word	0x080077d4
 8003888:	00f42400 	.word	0x00f42400
 800388c:	007a1200 	.word	0x007a1200

08003890 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003894:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000000 	.word	0x20000000

080038a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038ac:	f7ff fff0 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4904      	ldr	r1, [pc, #16]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40021000 	.word	0x40021000
 80038d0:	080077cc 	.word	0x080077cc

080038d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038d8:	f7ff ffda 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0adb      	lsrs	r3, r3, #11
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4904      	ldr	r1, [pc, #16]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	080077cc 	.word	0x080077cc

08003900 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003908:	2300      	movs	r3, #0
 800390a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800390c:	4b2a      	ldr	r3, [pc, #168]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003918:	f7ff f9ee 	bl	8002cf8 <HAL_PWREx_GetVoltageRange>
 800391c:	6178      	str	r0, [r7, #20]
 800391e:	e014      	b.n	800394a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003920:	4b25      	ldr	r3, [pc, #148]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	4a24      	ldr	r2, [pc, #144]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392a:	6593      	str	r3, [r2, #88]	; 0x58
 800392c:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003938:	f7ff f9de 	bl	8002cf8 <HAL_PWREx_GetVoltageRange>
 800393c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800393e:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	4a1d      	ldr	r2, [pc, #116]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003948:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003950:	d10b      	bne.n	800396a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b80      	cmp	r3, #128	; 0x80
 8003956:	d919      	bls.n	800398c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2ba0      	cmp	r3, #160	; 0xa0
 800395c:	d902      	bls.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800395e:	2302      	movs	r3, #2
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	e013      	b.n	800398c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003964:	2301      	movs	r3, #1
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	e010      	b.n	800398c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b80      	cmp	r3, #128	; 0x80
 800396e:	d902      	bls.n	8003976 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003970:	2303      	movs	r3, #3
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	e00a      	b.n	800398c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b80      	cmp	r3, #128	; 0x80
 800397a:	d102      	bne.n	8003982 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800397c:	2302      	movs	r3, #2
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	e004      	b.n	800398c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b70      	cmp	r3, #112	; 0x70
 8003986:	d101      	bne.n	800398c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003988:	2301      	movs	r3, #1
 800398a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f023 0207 	bic.w	r2, r3, #7
 8003994:	4909      	ldr	r1, [pc, #36]	; (80039bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800399c:	4b07      	ldr	r3, [pc, #28]	; (80039bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d001      	beq.n	80039ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40022000 	.word	0x40022000

080039c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039c8:	2300      	movs	r3, #0
 80039ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039cc:	2300      	movs	r3, #0
 80039ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d041      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039e4:	d02a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039ea:	d824      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039f0:	d008      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039f6:	d81e      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a00:	d010      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a02:	e018      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a04:	4b86      	ldr	r3, [pc, #536]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a85      	ldr	r2, [pc, #532]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a10:	e015      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3304      	adds	r3, #4
 8003a16:	2100      	movs	r1, #0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fabb 	bl	8003f94 <RCCEx_PLLSAI1_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a22:	e00c      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3320      	adds	r3, #32
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fba6 	bl	800417c <RCCEx_PLLSAI2_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a34:	e003      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	74fb      	strb	r3, [r7, #19]
      break;
 8003a3a:	e000      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10b      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a44:	4b76      	ldr	r3, [pc, #472]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a52:	4973      	ldr	r1, [pc, #460]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a5a:	e001      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d041      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a74:	d02a      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a7a:	d824      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a80:	d008      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a86:	d81e      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a90:	d010      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a92:	e018      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a94:	4b62      	ldr	r3, [pc, #392]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a61      	ldr	r2, [pc, #388]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aa0:	e015      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fa73 	bl	8003f94 <RCCEx_PLLSAI1_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ab2:	e00c      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3320      	adds	r3, #32
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fb5e 	bl	800417c <RCCEx_PLLSAI2_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ac4:	e003      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	74fb      	strb	r3, [r7, #19]
      break;
 8003aca:	e000      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ace:	7cfb      	ldrb	r3, [r7, #19]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10b      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ad4:	4b52      	ldr	r3, [pc, #328]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ada:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ae2:	494f      	ldr	r1, [pc, #316]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003aea:	e001      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aec:	7cfb      	ldrb	r3, [r7, #19]
 8003aee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80a0 	beq.w	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afe:	2300      	movs	r3, #0
 8003b00:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b02:	4b47      	ldr	r3, [pc, #284]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b12:	2300      	movs	r3, #0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00d      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b18:	4b41      	ldr	r3, [pc, #260]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1c:	4a40      	ldr	r2, [pc, #256]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b22:	6593      	str	r3, [r2, #88]	; 0x58
 8003b24:	4b3e      	ldr	r3, [pc, #248]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b30:	2301      	movs	r3, #1
 8003b32:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b34:	4b3b      	ldr	r3, [pc, #236]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a3a      	ldr	r2, [pc, #232]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b40:	f7fe fc6e 	bl	8002420 <HAL_GetTick>
 8003b44:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b46:	e009      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b48:	f7fe fc6a 	bl	8002420 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d902      	bls.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	74fb      	strb	r3, [r7, #19]
        break;
 8003b5a:	e005      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b5c:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ef      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d15c      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b6e:	4b2c      	ldr	r3, [pc, #176]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b78:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01f      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d019      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b8c:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b98:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	4a20      	ldr	r2, [pc, #128]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bae:	4a1c      	ldr	r2, [pc, #112]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bb8:	4a19      	ldr	r2, [pc, #100]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d016      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bca:	f7fe fc29 	bl	8002420 <HAL_GetTick>
 8003bce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd0:	e00b      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd2:	f7fe fc25 	bl	8002420 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d902      	bls.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	74fb      	strb	r3, [r7, #19]
            break;
 8003be8:	e006      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bea:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0ec      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bfe:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c0e:	4904      	ldr	r1, [pc, #16]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c16:	e009      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	74bb      	strb	r3, [r7, #18]
 8003c1c:	e006      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c2c:	7c7b      	ldrb	r3, [r7, #17]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d105      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c32:	4b9e      	ldr	r3, [pc, #632]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	4a9d      	ldr	r2, [pc, #628]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c4a:	4b98      	ldr	r3, [pc, #608]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	f023 0203 	bic.w	r2, r3, #3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	4994      	ldr	r1, [pc, #592]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c6c:	4b8f      	ldr	r3, [pc, #572]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	f023 020c 	bic.w	r2, r3, #12
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	498c      	ldr	r1, [pc, #560]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c8e:	4b87      	ldr	r3, [pc, #540]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	4983      	ldr	r1, [pc, #524]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cb0:	4b7e      	ldr	r3, [pc, #504]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	497b      	ldr	r1, [pc, #492]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cd2:	4b76      	ldr	r3, [pc, #472]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce0:	4972      	ldr	r1, [pc, #456]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cf4:	4b6d      	ldr	r3, [pc, #436]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d02:	496a      	ldr	r1, [pc, #424]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d16:	4b65      	ldr	r3, [pc, #404]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	4961      	ldr	r1, [pc, #388]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d38:	4b5c      	ldr	r3, [pc, #368]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d46:	4959      	ldr	r1, [pc, #356]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d5a:	4b54      	ldr	r3, [pc, #336]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d68:	4950      	ldr	r1, [pc, #320]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d7c:	4b4b      	ldr	r3, [pc, #300]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	4948      	ldr	r1, [pc, #288]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d9e:	4b43      	ldr	r3, [pc, #268]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dac:	493f      	ldr	r1, [pc, #252]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d028      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dc0:	4b3a      	ldr	r3, [pc, #232]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dce:	4937      	ldr	r1, [pc, #220]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dde:	d106      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de0:	4b32      	ldr	r3, [pc, #200]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4a31      	ldr	r2, [pc, #196]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dea:	60d3      	str	r3, [r2, #12]
 8003dec:	e011      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df6:	d10c      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f8c8 	bl	8003f94 <RCCEx_PLLSAI1_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e0e:	7cfb      	ldrb	r3, [r7, #19]
 8003e10:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d028      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e1e:	4b23      	ldr	r3, [pc, #140]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	491f      	ldr	r1, [pc, #124]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e3c:	d106      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e3e:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	4a1a      	ldr	r2, [pc, #104]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e48:	60d3      	str	r3, [r2, #12]
 8003e4a:	e011      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e54:	d10c      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f899 	bl	8003f94 <RCCEx_PLLSAI1_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e66:	7cfb      	ldrb	r3, [r7, #19]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e6c:	7cfb      	ldrb	r3, [r7, #19]
 8003e6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d02b      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8a:	4908      	ldr	r1, [pc, #32]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e9a:	d109      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e9c:	4b03      	ldr	r3, [pc, #12]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a02      	ldr	r2, [pc, #8]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ea6:	60d3      	str	r3, [r2, #12]
 8003ea8:	e014      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 f867 	bl	8003f94 <RCCEx_PLLSAI1_Config>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eca:	7cfb      	ldrb	r3, [r7, #19]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d02f      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ee0:	4b2b      	ldr	r3, [pc, #172]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eee:	4928      	ldr	r1, [pc, #160]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003efe:	d10d      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3304      	adds	r3, #4
 8003f04:	2102      	movs	r1, #2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 f844 	bl	8003f94 <RCCEx_PLLSAI1_Config>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f10:	7cfb      	ldrb	r3, [r7, #19]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d014      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f16:	7cfb      	ldrb	r3, [r7, #19]
 8003f18:	74bb      	strb	r3, [r7, #18]
 8003f1a:	e011      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f24:	d10c      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3320      	adds	r3, #32
 8003f2a:	2102      	movs	r1, #2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 f925 	bl	800417c <RCCEx_PLLSAI2_Config>
 8003f32:	4603      	mov	r3, r0
 8003f34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f36:	7cfb      	ldrb	r3, [r7, #19]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f3c:	7cfb      	ldrb	r3, [r7, #19]
 8003f3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f4c:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f5a:	490d      	ldr	r1, [pc, #52]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f6e:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f7e:	4904      	ldr	r1, [pc, #16]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f86:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40021000 	.word	0x40021000

08003f94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fa2:	4b75      	ldr	r3, [pc, #468]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d018      	beq.n	8003fe0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fae:	4b72      	ldr	r3, [pc, #456]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f003 0203 	and.w	r2, r3, #3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d10d      	bne.n	8003fda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
       ||
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fc6:	4b6c      	ldr	r3, [pc, #432]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	091b      	lsrs	r3, r3, #4
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
       ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d047      	beq.n	800406a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
 8003fde:	e044      	b.n	800406a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d018      	beq.n	800401a <RCCEx_PLLSAI1_Config+0x86>
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d825      	bhi.n	8004038 <RCCEx_PLLSAI1_Config+0xa4>
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d002      	beq.n	8003ff6 <RCCEx_PLLSAI1_Config+0x62>
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d009      	beq.n	8004008 <RCCEx_PLLSAI1_Config+0x74>
 8003ff4:	e020      	b.n	8004038 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ff6:	4b60      	ldr	r3, [pc, #384]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d11d      	bne.n	800403e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004006:	e01a      	b.n	800403e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004008:	4b5b      	ldr	r3, [pc, #364]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004010:	2b00      	cmp	r3, #0
 8004012:	d116      	bne.n	8004042 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004018:	e013      	b.n	8004042 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800401a:	4b57      	ldr	r3, [pc, #348]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10f      	bne.n	8004046 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004026:	4b54      	ldr	r3, [pc, #336]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d109      	bne.n	8004046 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004036:	e006      	b.n	8004046 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
      break;
 800403c:	e004      	b.n	8004048 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800403e:	bf00      	nop
 8004040:	e002      	b.n	8004048 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004042:	bf00      	nop
 8004044:	e000      	b.n	8004048 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004046:	bf00      	nop
    }

    if(status == HAL_OK)
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10d      	bne.n	800406a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800404e:	4b4a      	ldr	r3, [pc, #296]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6819      	ldr	r1, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	3b01      	subs	r3, #1
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	430b      	orrs	r3, r1
 8004064:	4944      	ldr	r1, [pc, #272]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004066:	4313      	orrs	r3, r2
 8004068:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d17d      	bne.n	800416c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004070:	4b41      	ldr	r3, [pc, #260]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a40      	ldr	r2, [pc, #256]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004076:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800407a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407c:	f7fe f9d0 	bl	8002420 <HAL_GetTick>
 8004080:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004082:	e009      	b.n	8004098 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004084:	f7fe f9cc 	bl	8002420 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d902      	bls.n	8004098 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	73fb      	strb	r3, [r7, #15]
        break;
 8004096:	e005      	b.n	80040a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004098:	4b37      	ldr	r3, [pc, #220]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1ef      	bne.n	8004084 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d160      	bne.n	800416c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d111      	bne.n	80040d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040b0:	4b31      	ldr	r3, [pc, #196]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6892      	ldr	r2, [r2, #8]
 80040c0:	0211      	lsls	r1, r2, #8
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	68d2      	ldr	r2, [r2, #12]
 80040c6:	0912      	lsrs	r2, r2, #4
 80040c8:	0452      	lsls	r2, r2, #17
 80040ca:	430a      	orrs	r2, r1
 80040cc:	492a      	ldr	r1, [pc, #168]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	610b      	str	r3, [r1, #16]
 80040d2:	e027      	b.n	8004124 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d112      	bne.n	8004100 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040da:	4b27      	ldr	r3, [pc, #156]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6892      	ldr	r2, [r2, #8]
 80040ea:	0211      	lsls	r1, r2, #8
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6912      	ldr	r2, [r2, #16]
 80040f0:	0852      	lsrs	r2, r2, #1
 80040f2:	3a01      	subs	r2, #1
 80040f4:	0552      	lsls	r2, r2, #21
 80040f6:	430a      	orrs	r2, r1
 80040f8:	491f      	ldr	r1, [pc, #124]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	610b      	str	r3, [r1, #16]
 80040fe:	e011      	b.n	8004124 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004100:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004108:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6892      	ldr	r2, [r2, #8]
 8004110:	0211      	lsls	r1, r2, #8
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6952      	ldr	r2, [r2, #20]
 8004116:	0852      	lsrs	r2, r2, #1
 8004118:	3a01      	subs	r2, #1
 800411a:	0652      	lsls	r2, r2, #25
 800411c:	430a      	orrs	r2, r1
 800411e:	4916      	ldr	r1, [pc, #88]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004120:	4313      	orrs	r3, r2
 8004122:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004124:	4b14      	ldr	r3, [pc, #80]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a13      	ldr	r2, [pc, #76]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 800412a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800412e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004130:	f7fe f976 	bl	8002420 <HAL_GetTick>
 8004134:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004136:	e009      	b.n	800414c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004138:	f7fe f972 	bl	8002420 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d902      	bls.n	800414c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	73fb      	strb	r3, [r7, #15]
          break;
 800414a:	e005      	b.n	8004158 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0ef      	beq.n	8004138 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	4904      	ldr	r1, [pc, #16]	; (8004178 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004168:	4313      	orrs	r3, r2
 800416a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800416c:	7bfb      	ldrb	r3, [r7, #15]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40021000 	.word	0x40021000

0800417c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800418a:	4b6a      	ldr	r3, [pc, #424]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d018      	beq.n	80041c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004196:	4b67      	ldr	r3, [pc, #412]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0203 	and.w	r2, r3, #3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d10d      	bne.n	80041c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
       ||
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041ae:	4b61      	ldr	r3, [pc, #388]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
       ||
 80041be:	429a      	cmp	r2, r3
 80041c0:	d047      	beq.n	8004252 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
 80041c6:	e044      	b.n	8004252 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d018      	beq.n	8004202 <RCCEx_PLLSAI2_Config+0x86>
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d825      	bhi.n	8004220 <RCCEx_PLLSAI2_Config+0xa4>
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d002      	beq.n	80041de <RCCEx_PLLSAI2_Config+0x62>
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d009      	beq.n	80041f0 <RCCEx_PLLSAI2_Config+0x74>
 80041dc:	e020      	b.n	8004220 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041de:	4b55      	ldr	r3, [pc, #340]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d11d      	bne.n	8004226 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ee:	e01a      	b.n	8004226 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041f0:	4b50      	ldr	r3, [pc, #320]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d116      	bne.n	800422a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004200:	e013      	b.n	800422a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004202:	4b4c      	ldr	r3, [pc, #304]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10f      	bne.n	800422e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800420e:	4b49      	ldr	r3, [pc, #292]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800421e:	e006      	b.n	800422e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	73fb      	strb	r3, [r7, #15]
      break;
 8004224:	e004      	b.n	8004230 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004226:	bf00      	nop
 8004228:	e002      	b.n	8004230 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800422a:	bf00      	nop
 800422c:	e000      	b.n	8004230 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800422e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10d      	bne.n	8004252 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004236:	4b3f      	ldr	r3, [pc, #252]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6819      	ldr	r1, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	3b01      	subs	r3, #1
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	430b      	orrs	r3, r1
 800424c:	4939      	ldr	r1, [pc, #228]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424e:	4313      	orrs	r3, r2
 8004250:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d167      	bne.n	8004328 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004258:	4b36      	ldr	r3, [pc, #216]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a35      	ldr	r2, [pc, #212]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004262:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004264:	f7fe f8dc 	bl	8002420 <HAL_GetTick>
 8004268:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800426a:	e009      	b.n	8004280 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800426c:	f7fe f8d8 	bl	8002420 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d902      	bls.n	8004280 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	73fb      	strb	r3, [r7, #15]
        break;
 800427e:	e005      	b.n	800428c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004280:	4b2c      	ldr	r3, [pc, #176]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1ef      	bne.n	800426c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d14a      	bne.n	8004328 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d111      	bne.n	80042bc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004298:	4b26      	ldr	r3, [pc, #152]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6892      	ldr	r2, [r2, #8]
 80042a8:	0211      	lsls	r1, r2, #8
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68d2      	ldr	r2, [r2, #12]
 80042ae:	0912      	lsrs	r2, r2, #4
 80042b0:	0452      	lsls	r2, r2, #17
 80042b2:	430a      	orrs	r2, r1
 80042b4:	491f      	ldr	r1, [pc, #124]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	614b      	str	r3, [r1, #20]
 80042ba:	e011      	b.n	80042e0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042bc:	4b1d      	ldr	r3, [pc, #116]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6892      	ldr	r2, [r2, #8]
 80042cc:	0211      	lsls	r1, r2, #8
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6912      	ldr	r2, [r2, #16]
 80042d2:	0852      	lsrs	r2, r2, #1
 80042d4:	3a01      	subs	r2, #1
 80042d6:	0652      	lsls	r2, r2, #25
 80042d8:	430a      	orrs	r2, r1
 80042da:	4916      	ldr	r1, [pc, #88]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042e0:	4b14      	ldr	r3, [pc, #80]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a13      	ldr	r2, [pc, #76]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ec:	f7fe f898 	bl	8002420 <HAL_GetTick>
 80042f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042f2:	e009      	b.n	8004308 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042f4:	f7fe f894 	bl	8002420 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d902      	bls.n	8004308 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	73fb      	strb	r3, [r7, #15]
          break;
 8004306:	e005      	b.n	8004314 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ef      	beq.n	80042f4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	4904      	ldr	r1, [pc, #16]	; (8004334 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004324:	4313      	orrs	r3, r2
 8004326:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004328:	7bfb      	ldrb	r3, [r7, #15]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000

08004338 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e095      	b.n	8004476 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	2b00      	cmp	r3, #0
 8004350:	d108      	bne.n	8004364 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435a:	d009      	beq.n	8004370 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	61da      	str	r2, [r3, #28]
 8004362:	e005      	b.n	8004370 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fd fdd6 	bl	8001f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043b0:	d902      	bls.n	80043b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	e002      	b.n	80043be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043c6:	d007      	beq.n	80043d8 <HAL_SPI_Init+0xa0>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043d0:	d002      	beq.n	80043d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441a:	ea42 0103 	orr.w	r1, r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	0c1b      	lsrs	r3, r3, #16
 8004434:	f003 0204 	and.w	r2, r3, #4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004454:	ea42 0103 	orr.w	r1, r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b088      	sub	sp, #32
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	603b      	str	r3, [r7, #0]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <HAL_SPI_Transmit+0x22>
 800449c:	2302      	movs	r3, #2
 800449e:	e15f      	b.n	8004760 <HAL_SPI_Transmit+0x2e2>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044a8:	f7fd ffba 	bl	8002420 <HAL_GetTick>
 80044ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d002      	beq.n	80044c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80044be:	2302      	movs	r3, #2
 80044c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044c2:	e148      	b.n	8004756 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_SPI_Transmit+0x52>
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044d4:	e13f      	b.n	8004756 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2203      	movs	r2, #3
 80044da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	88fa      	ldrh	r2, [r7, #6]
 80044ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	88fa      	ldrh	r2, [r7, #6]
 80044f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004520:	d10f      	bne.n	8004542 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004530:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004540:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454c:	2b40      	cmp	r3, #64	; 0x40
 800454e:	d007      	beq.n	8004560 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800455e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004568:	d94f      	bls.n	800460a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_SPI_Transmit+0xfa>
 8004572:	8afb      	ldrh	r3, [r7, #22]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d142      	bne.n	80045fe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	881a      	ldrh	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	1c9a      	adds	r2, r3, #2
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800459c:	e02f      	b.n	80045fe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d112      	bne.n	80045d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	881a      	ldrh	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	1c9a      	adds	r2, r3, #2
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045d0:	e015      	b.n	80045fe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045d2:	f7fd ff25 	bl	8002420 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d803      	bhi.n	80045ea <HAL_SPI_Transmit+0x16c>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d102      	bne.n	80045f0 <HAL_SPI_Transmit+0x172>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d106      	bne.n	80045fe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80045fc:	e0ab      	b.n	8004756 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ca      	bne.n	800459e <HAL_SPI_Transmit+0x120>
 8004608:	e080      	b.n	800470c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_SPI_Transmit+0x19a>
 8004612:	8afb      	ldrh	r3, [r7, #22]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d174      	bne.n	8004702 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d912      	bls.n	8004648 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	881a      	ldrh	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	1c9a      	adds	r2, r3, #2
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b02      	subs	r3, #2
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004646:	e05c      	b.n	8004702 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	330c      	adds	r3, #12
 8004652:	7812      	ldrb	r2, [r2, #0]
 8004654:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800466e:	e048      	b.n	8004702 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b02      	cmp	r3, #2
 800467c:	d12b      	bne.n	80046d6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	d912      	bls.n	80046ae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	881a      	ldrh	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	1c9a      	adds	r2, r3, #2
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b02      	subs	r3, #2
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046ac:	e029      	b.n	8004702 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	330c      	adds	r3, #12
 80046b8:	7812      	ldrb	r2, [r2, #0]
 80046ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046d4:	e015      	b.n	8004702 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046d6:	f7fd fea3 	bl	8002420 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d803      	bhi.n	80046ee <HAL_SPI_Transmit+0x270>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ec:	d102      	bne.n	80046f4 <HAL_SPI_Transmit+0x276>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d106      	bne.n	8004702 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004700:	e029      	b.n	8004756 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1b1      	bne.n	8004670 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	6839      	ldr	r1, [r7, #0]
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f947 	bl	80049a4 <SPI_EndRxTxTransaction>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10a      	bne.n	8004740 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800472a:	2300      	movs	r3, #0
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e003      	b.n	8004756 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800475e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3720      	adds	r7, #32
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	4613      	mov	r3, r2
 8004776:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004778:	f7fd fe52 	bl	8002420 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	4413      	add	r3, r2
 8004786:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004788:	f7fd fe4a 	bl	8002420 <HAL_GetTick>
 800478c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800478e:	4b39      	ldr	r3, [pc, #228]	; (8004874 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	015b      	lsls	r3, r3, #5
 8004794:	0d1b      	lsrs	r3, r3, #20
 8004796:	69fa      	ldr	r2, [r7, #28]
 8004798:	fb02 f303 	mul.w	r3, r2, r3
 800479c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800479e:	e054      	b.n	800484a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	d050      	beq.n	800484a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047a8:	f7fd fe3a 	bl	8002420 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d902      	bls.n	80047be <SPI_WaitFlagStateUntilTimeout+0x56>
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d13d      	bne.n	800483a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d6:	d111      	bne.n	80047fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e0:	d004      	beq.n	80047ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ea:	d107      	bne.n	80047fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004804:	d10f      	bne.n	8004826 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004824:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e017      	b.n	800486a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	3b01      	subs	r3, #1
 8004848:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4013      	ands	r3, r2
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	429a      	cmp	r2, r3
 8004858:	bf0c      	ite	eq
 800485a:	2301      	moveq	r3, #1
 800485c:	2300      	movne	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	429a      	cmp	r2, r3
 8004866:	d19b      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000000 	.word	0x20000000

08004878 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800488a:	f7fd fdc9 	bl	8002420 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	4413      	add	r3, r2
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800489a:	f7fd fdc1 	bl	8002420 <HAL_GetTick>
 800489e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	330c      	adds	r3, #12
 80048a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048a8:	4b3d      	ldr	r3, [pc, #244]	; (80049a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	00da      	lsls	r2, r3, #3
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	0d1b      	lsrs	r3, r3, #20
 80048b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ba:	fb02 f303 	mul.w	r3, r2, r3
 80048be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048c0:	e060      	b.n	8004984 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048c8:	d107      	bne.n	80048da <SPI_WaitFifoStateUntilTimeout+0x62>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d104      	bne.n	80048da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d050      	beq.n	8004984 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048e2:	f7fd fd9d 	bl	8002420 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d902      	bls.n	80048f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d13d      	bne.n	8004974 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004906:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004910:	d111      	bne.n	8004936 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800491a:	d004      	beq.n	8004926 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004924:	d107      	bne.n	8004936 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004934:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800493e:	d10f      	bne.n	8004960 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800495e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e010      	b.n	8004996 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	3b01      	subs	r3, #1
 8004982:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4013      	ands	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	429a      	cmp	r2, r3
 8004992:	d196      	bne.n	80048c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3728      	adds	r7, #40	; 0x28
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000000 	.word	0x20000000

080049a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7ff ff5b 	bl	8004878 <SPI_WaitFifoStateUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d007      	beq.n	80049d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e027      	b.n	8004a28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2200      	movs	r2, #0
 80049e0:	2180      	movs	r1, #128	; 0x80
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff fec0 	bl	8004768 <SPI_WaitFlagStateUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f2:	f043 0220 	orr.w	r2, r3, #32
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e014      	b.n	8004a28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7ff ff34 	bl	8004878 <SPI_WaitFifoStateUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1a:	f043 0220 	orr.w	r2, r3, #32
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e000      	b.n	8004a28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e040      	b.n	8004ac4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fd fae2 	bl	800201c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2224      	movs	r2, #36	; 0x24
 8004a5c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0201 	bic.w	r2, r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fae0 	bl	800503c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f825 	bl	8004acc <UART_SetConfig>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e01b      	b.n	8004ac4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fb5f 	bl	8005180 <UART_CheckIdleState>
 8004ac2:	4603      	mov	r3, r0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad0:	b08a      	sub	sp, #40	; 0x28
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4ba4      	ldr	r3, [pc, #656]	; (8004d8c <UART_SetConfig+0x2c0>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a99      	ldr	r2, [pc, #612]	; (8004d90 <UART_SetConfig+0x2c4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b34:	4313      	orrs	r3, r2
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a90      	ldr	r2, [pc, #576]	; (8004d94 <UART_SetConfig+0x2c8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d126      	bne.n	8004ba4 <UART_SetConfig+0xd8>
 8004b56:	4b90      	ldr	r3, [pc, #576]	; (8004d98 <UART_SetConfig+0x2cc>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d81b      	bhi.n	8004b9c <UART_SetConfig+0xd0>
 8004b64:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <UART_SetConfig+0xa0>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004b7d 	.word	0x08004b7d
 8004b70:	08004b8d 	.word	0x08004b8d
 8004b74:	08004b85 	.word	0x08004b85
 8004b78:	08004b95 	.word	0x08004b95
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b82:	e116      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004b84:	2302      	movs	r3, #2
 8004b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8a:	e112      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b92:	e10e      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004b94:	2308      	movs	r3, #8
 8004b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9a:	e10a      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba2:	e106      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a7c      	ldr	r2, [pc, #496]	; (8004d9c <UART_SetConfig+0x2d0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d138      	bne.n	8004c20 <UART_SetConfig+0x154>
 8004bae:	4b7a      	ldr	r3, [pc, #488]	; (8004d98 <UART_SetConfig+0x2cc>)
 8004bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb4:	f003 030c 	and.w	r3, r3, #12
 8004bb8:	2b0c      	cmp	r3, #12
 8004bba:	d82d      	bhi.n	8004c18 <UART_SetConfig+0x14c>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <UART_SetConfig+0xf8>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004c19 	.word	0x08004c19
 8004bcc:	08004c19 	.word	0x08004c19
 8004bd0:	08004c19 	.word	0x08004c19
 8004bd4:	08004c09 	.word	0x08004c09
 8004bd8:	08004c19 	.word	0x08004c19
 8004bdc:	08004c19 	.word	0x08004c19
 8004be0:	08004c19 	.word	0x08004c19
 8004be4:	08004c01 	.word	0x08004c01
 8004be8:	08004c19 	.word	0x08004c19
 8004bec:	08004c19 	.word	0x08004c19
 8004bf0:	08004c19 	.word	0x08004c19
 8004bf4:	08004c11 	.word	0x08004c11
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfe:	e0d8      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c00:	2302      	movs	r3, #2
 8004c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c06:	e0d4      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c08:	2304      	movs	r3, #4
 8004c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0e:	e0d0      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c10:	2308      	movs	r3, #8
 8004c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c16:	e0cc      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c18:	2310      	movs	r3, #16
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1e:	e0c8      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5e      	ldr	r2, [pc, #376]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d125      	bne.n	8004c76 <UART_SetConfig+0x1aa>
 8004c2a:	4b5b      	ldr	r3, [pc, #364]	; (8004d98 <UART_SetConfig+0x2cc>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c34:	2b30      	cmp	r3, #48	; 0x30
 8004c36:	d016      	beq.n	8004c66 <UART_SetConfig+0x19a>
 8004c38:	2b30      	cmp	r3, #48	; 0x30
 8004c3a:	d818      	bhi.n	8004c6e <UART_SetConfig+0x1a2>
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d00a      	beq.n	8004c56 <UART_SetConfig+0x18a>
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d814      	bhi.n	8004c6e <UART_SetConfig+0x1a2>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <UART_SetConfig+0x182>
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d008      	beq.n	8004c5e <UART_SetConfig+0x192>
 8004c4c:	e00f      	b.n	8004c6e <UART_SetConfig+0x1a2>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c54:	e0ad      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c56:	2302      	movs	r3, #2
 8004c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5c:	e0a9      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c5e:	2304      	movs	r3, #4
 8004c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c64:	e0a5      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c66:	2308      	movs	r3, #8
 8004c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6c:	e0a1      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c6e:	2310      	movs	r3, #16
 8004c70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c74:	e09d      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a4a      	ldr	r2, [pc, #296]	; (8004da4 <UART_SetConfig+0x2d8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d125      	bne.n	8004ccc <UART_SetConfig+0x200>
 8004c80:	4b45      	ldr	r3, [pc, #276]	; (8004d98 <UART_SetConfig+0x2cc>)
 8004c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c8c:	d016      	beq.n	8004cbc <UART_SetConfig+0x1f0>
 8004c8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c90:	d818      	bhi.n	8004cc4 <UART_SetConfig+0x1f8>
 8004c92:	2b80      	cmp	r3, #128	; 0x80
 8004c94:	d00a      	beq.n	8004cac <UART_SetConfig+0x1e0>
 8004c96:	2b80      	cmp	r3, #128	; 0x80
 8004c98:	d814      	bhi.n	8004cc4 <UART_SetConfig+0x1f8>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <UART_SetConfig+0x1d8>
 8004c9e:	2b40      	cmp	r3, #64	; 0x40
 8004ca0:	d008      	beq.n	8004cb4 <UART_SetConfig+0x1e8>
 8004ca2:	e00f      	b.n	8004cc4 <UART_SetConfig+0x1f8>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004caa:	e082      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004cac:	2302      	movs	r3, #2
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb2:	e07e      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cba:	e07a      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004cbc:	2308      	movs	r3, #8
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e076      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e072      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a35      	ldr	r2, [pc, #212]	; (8004da8 <UART_SetConfig+0x2dc>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d12a      	bne.n	8004d2c <UART_SetConfig+0x260>
 8004cd6:	4b30      	ldr	r3, [pc, #192]	; (8004d98 <UART_SetConfig+0x2cc>)
 8004cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ce4:	d01a      	beq.n	8004d1c <UART_SetConfig+0x250>
 8004ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cea:	d81b      	bhi.n	8004d24 <UART_SetConfig+0x258>
 8004cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf0:	d00c      	beq.n	8004d0c <UART_SetConfig+0x240>
 8004cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf6:	d815      	bhi.n	8004d24 <UART_SetConfig+0x258>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <UART_SetConfig+0x238>
 8004cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d00:	d008      	beq.n	8004d14 <UART_SetConfig+0x248>
 8004d02:	e00f      	b.n	8004d24 <UART_SetConfig+0x258>
 8004d04:	2300      	movs	r3, #0
 8004d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0a:	e052      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d12:	e04e      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d14:	2304      	movs	r3, #4
 8004d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1a:	e04a      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d22:	e046      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d24:	2310      	movs	r3, #16
 8004d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2a:	e042      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <UART_SetConfig+0x2c4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d13a      	bne.n	8004dac <UART_SetConfig+0x2e0>
 8004d36:	4b18      	ldr	r3, [pc, #96]	; (8004d98 <UART_SetConfig+0x2cc>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d44:	d01a      	beq.n	8004d7c <UART_SetConfig+0x2b0>
 8004d46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d4a:	d81b      	bhi.n	8004d84 <UART_SetConfig+0x2b8>
 8004d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d50:	d00c      	beq.n	8004d6c <UART_SetConfig+0x2a0>
 8004d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d56:	d815      	bhi.n	8004d84 <UART_SetConfig+0x2b8>
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <UART_SetConfig+0x298>
 8004d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d60:	d008      	beq.n	8004d74 <UART_SetConfig+0x2a8>
 8004d62:	e00f      	b.n	8004d84 <UART_SetConfig+0x2b8>
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6a:	e022      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d72:	e01e      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d74:	2304      	movs	r3, #4
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7a:	e01a      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d7c:	2308      	movs	r3, #8
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d82:	e016      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d84:	2310      	movs	r3, #16
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8a:	e012      	b.n	8004db2 <UART_SetConfig+0x2e6>
 8004d8c:	efff69f3 	.word	0xefff69f3
 8004d90:	40008000 	.word	0x40008000
 8004d94:	40013800 	.word	0x40013800
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40004400 	.word	0x40004400
 8004da0:	40004800 	.word	0x40004800
 8004da4:	40004c00 	.word	0x40004c00
 8004da8:	40005000 	.word	0x40005000
 8004dac:	2310      	movs	r3, #16
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a9f      	ldr	r2, [pc, #636]	; (8005034 <UART_SetConfig+0x568>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d17a      	bne.n	8004eb2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d824      	bhi.n	8004e0e <UART_SetConfig+0x342>
 8004dc4:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <UART_SetConfig+0x300>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004df1 	.word	0x08004df1
 8004dd0:	08004e0f 	.word	0x08004e0f
 8004dd4:	08004df9 	.word	0x08004df9
 8004dd8:	08004e0f 	.word	0x08004e0f
 8004ddc:	08004dff 	.word	0x08004dff
 8004de0:	08004e0f 	.word	0x08004e0f
 8004de4:	08004e0f 	.word	0x08004e0f
 8004de8:	08004e0f 	.word	0x08004e0f
 8004dec:	08004e07 	.word	0x08004e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df0:	f7fe fd5a 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8004df4:	61f8      	str	r0, [r7, #28]
        break;
 8004df6:	e010      	b.n	8004e1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df8:	4b8f      	ldr	r3, [pc, #572]	; (8005038 <UART_SetConfig+0x56c>)
 8004dfa:	61fb      	str	r3, [r7, #28]
        break;
 8004dfc:	e00d      	b.n	8004e1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfe:	f7fe fcbb 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8004e02:	61f8      	str	r0, [r7, #28]
        break;
 8004e04:	e009      	b.n	8004e1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0a:	61fb      	str	r3, [r7, #28]
        break;
 8004e0c:	e005      	b.n	8004e1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 80fb 	beq.w	8005018 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d305      	bcc.n	8004e3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d903      	bls.n	8004e46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e44:	e0e8      	b.n	8005018 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	461c      	mov	r4, r3
 8004e4c:	4615      	mov	r5, r2
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	022b      	lsls	r3, r5, #8
 8004e58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e5c:	0222      	lsls	r2, r4, #8
 8004e5e:	68f9      	ldr	r1, [r7, #12]
 8004e60:	6849      	ldr	r1, [r1, #4]
 8004e62:	0849      	lsrs	r1, r1, #1
 8004e64:	2000      	movs	r0, #0
 8004e66:	4688      	mov	r8, r1
 8004e68:	4681      	mov	r9, r0
 8004e6a:	eb12 0a08 	adds.w	sl, r2, r8
 8004e6e:	eb43 0b09 	adc.w	fp, r3, r9
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	603b      	str	r3, [r7, #0]
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e80:	4650      	mov	r0, sl
 8004e82:	4659      	mov	r1, fp
 8004e84:	f7fb fed8 	bl	8000c38 <__aeabi_uldivmod>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e96:	d308      	bcc.n	8004eaa <UART_SetConfig+0x3de>
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e9e:	d204      	bcs.n	8004eaa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	60da      	str	r2, [r3, #12]
 8004ea8:	e0b6      	b.n	8005018 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004eb0:	e0b2      	b.n	8005018 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eba:	d15e      	bne.n	8004f7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d828      	bhi.n	8004f16 <UART_SetConfig+0x44a>
 8004ec4:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <UART_SetConfig+0x400>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004ef1 	.word	0x08004ef1
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	08004f01 	.word	0x08004f01
 8004ed8:	08004f17 	.word	0x08004f17
 8004edc:	08004f07 	.word	0x08004f07
 8004ee0:	08004f17 	.word	0x08004f17
 8004ee4:	08004f17 	.word	0x08004f17
 8004ee8:	08004f17 	.word	0x08004f17
 8004eec:	08004f0f 	.word	0x08004f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef0:	f7fe fcda 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8004ef4:	61f8      	str	r0, [r7, #28]
        break;
 8004ef6:	e014      	b.n	8004f22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef8:	f7fe fcec 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8004efc:	61f8      	str	r0, [r7, #28]
        break;
 8004efe:	e010      	b.n	8004f22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f00:	4b4d      	ldr	r3, [pc, #308]	; (8005038 <UART_SetConfig+0x56c>)
 8004f02:	61fb      	str	r3, [r7, #28]
        break;
 8004f04:	e00d      	b.n	8004f22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f06:	f7fe fc37 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8004f0a:	61f8      	str	r0, [r7, #28]
        break;
 8004f0c:	e009      	b.n	8004f22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f12:	61fb      	str	r3, [r7, #28]
        break;
 8004f14:	e005      	b.n	8004f22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d077      	beq.n	8005018 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	005a      	lsls	r2, r3, #1
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	085b      	lsrs	r3, r3, #1
 8004f32:	441a      	add	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b0f      	cmp	r3, #15
 8004f42:	d916      	bls.n	8004f72 <UART_SetConfig+0x4a6>
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f4a:	d212      	bcs.n	8004f72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f023 030f 	bic.w	r3, r3, #15
 8004f54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	085b      	lsrs	r3, r3, #1
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	8afb      	ldrh	r3, [r7, #22]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	8afa      	ldrh	r2, [r7, #22]
 8004f6e:	60da      	str	r2, [r3, #12]
 8004f70:	e052      	b.n	8005018 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f78:	e04e      	b.n	8005018 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d827      	bhi.n	8004fd2 <UART_SetConfig+0x506>
 8004f82:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <UART_SetConfig+0x4bc>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	08004fad 	.word	0x08004fad
 8004f8c:	08004fb5 	.word	0x08004fb5
 8004f90:	08004fbd 	.word	0x08004fbd
 8004f94:	08004fd3 	.word	0x08004fd3
 8004f98:	08004fc3 	.word	0x08004fc3
 8004f9c:	08004fd3 	.word	0x08004fd3
 8004fa0:	08004fd3 	.word	0x08004fd3
 8004fa4:	08004fd3 	.word	0x08004fd3
 8004fa8:	08004fcb 	.word	0x08004fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fac:	f7fe fc7c 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8004fb0:	61f8      	str	r0, [r7, #28]
        break;
 8004fb2:	e014      	b.n	8004fde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb4:	f7fe fc8e 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8004fb8:	61f8      	str	r0, [r7, #28]
        break;
 8004fba:	e010      	b.n	8004fde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fbc:	4b1e      	ldr	r3, [pc, #120]	; (8005038 <UART_SetConfig+0x56c>)
 8004fbe:	61fb      	str	r3, [r7, #28]
        break;
 8004fc0:	e00d      	b.n	8004fde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fc2:	f7fe fbd9 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8004fc6:	61f8      	str	r0, [r7, #28]
        break;
 8004fc8:	e009      	b.n	8004fde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fce:	61fb      	str	r3, [r7, #28]
        break;
 8004fd0:	e005      	b.n	8004fde <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fdc:	bf00      	nop
    }

    if (pclk != 0U)
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d019      	beq.n	8005018 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	085a      	lsrs	r2, r3, #1
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	441a      	add	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2b0f      	cmp	r3, #15
 8004ffc:	d909      	bls.n	8005012 <UART_SetConfig+0x546>
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005004:	d205      	bcs.n	8005012 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60da      	str	r2, [r3, #12]
 8005010:	e002      	b.n	8005018 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005024:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005028:	4618      	mov	r0, r3
 800502a:	3728      	adds	r7, #40	; 0x28
 800502c:	46bd      	mov	sp, r7
 800502e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005032:	bf00      	nop
 8005034:	40008000 	.word	0x40008000
 8005038:	00f42400 	.word	0x00f42400

0800503c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01a      	beq.n	8005152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800513a:	d10a      	bne.n	8005152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	605a      	str	r2, [r3, #4]
  }
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b098      	sub	sp, #96	; 0x60
 8005184:	af02      	add	r7, sp, #8
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005190:	f7fd f946 	bl	8002420 <HAL_GetTick>
 8005194:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d12e      	bne.n	8005202 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ac:	2200      	movs	r2, #0
 80051ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f88c 	bl	80052d0 <UART_WaitOnFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d021      	beq.n	8005202 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d2:	653b      	str	r3, [r7, #80]	; 0x50
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051dc:	647b      	str	r3, [r7, #68]	; 0x44
 80051de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e6      	bne.n	80051be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e062      	b.n	80052c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b04      	cmp	r3, #4
 800520e:	d149      	bne.n	80052a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005218:	2200      	movs	r2, #0
 800521a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f856 	bl	80052d0 <UART_WaitOnFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d03c      	beq.n	80052a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	e853 3f00 	ldrex	r3, [r3]
 8005236:	623b      	str	r3, [r7, #32]
   return(result);
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800523e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005248:	633b      	str	r3, [r7, #48]	; 0x30
 800524a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800524e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e6      	bne.n	800522a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3308      	adds	r3, #8
 8005262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	60fb      	str	r3, [r7, #12]
   return(result);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0301 	bic.w	r3, r3, #1
 8005272:	64bb      	str	r3, [r7, #72]	; 0x48
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3308      	adds	r3, #8
 800527a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800527c:	61fa      	str	r2, [r7, #28]
 800527e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	69b9      	ldr	r1, [r7, #24]
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	e841 2300 	strex	r3, r2, [r1]
 8005288:	617b      	str	r3, [r7, #20]
   return(result);
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e5      	bne.n	800525c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e011      	b.n	80052c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3758      	adds	r7, #88	; 0x58
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	4613      	mov	r3, r2
 80052de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e0:	e049      	b.n	8005376 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e8:	d045      	beq.n	8005376 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ea:	f7fd f899 	bl	8002420 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d302      	bcc.n	8005300 <UART_WaitOnFlagUntilTimeout+0x30>
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e048      	b.n	8005396 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b00      	cmp	r3, #0
 8005310:	d031      	beq.n	8005376 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b08      	cmp	r3, #8
 800531e:	d110      	bne.n	8005342 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2208      	movs	r2, #8
 8005326:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f838 	bl	800539e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2208      	movs	r2, #8
 8005332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e029      	b.n	8005396 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800534c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005350:	d111      	bne.n	8005376 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800535a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f81e 	bl	800539e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e00f      	b.n	8005396 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69da      	ldr	r2, [r3, #28]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4013      	ands	r3, r2
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	429a      	cmp	r2, r3
 8005384:	bf0c      	ite	eq
 8005386:	2301      	moveq	r3, #1
 8005388:	2300      	movne	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	461a      	mov	r2, r3
 800538e:	79fb      	ldrb	r3, [r7, #7]
 8005390:	429a      	cmp	r2, r3
 8005392:	d0a6      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800539e:	b480      	push	{r7}
 80053a0:	b095      	sub	sp, #84	; 0x54
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c4:	643b      	str	r3, [r7, #64]	; 0x40
 80053c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e6      	bne.n	80053a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3308      	adds	r3, #8
 80053de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	e853 3f00 	ldrex	r3, [r3]
 80053e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	f023 0301 	bic.w	r3, r3, #1
 80053ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3308      	adds	r3, #8
 80053f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005400:	e841 2300 	strex	r3, r2, [r1]
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e5      	bne.n	80053d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005410:	2b01      	cmp	r3, #1
 8005412:	d118      	bne.n	8005446 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	60bb      	str	r3, [r7, #8]
   return(result);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f023 0310 	bic.w	r3, r3, #16
 8005428:	647b      	str	r3, [r7, #68]	; 0x44
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005432:	61bb      	str	r3, [r7, #24]
 8005434:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6979      	ldr	r1, [r7, #20]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	613b      	str	r3, [r7, #16]
   return(result);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e6      	bne.n	8005414 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	669a      	str	r2, [r3, #104]	; 0x68
}
 800545a:	bf00      	nop
 800545c:	3754      	adds	r7, #84	; 0x54
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <rand>:
 8005468:	4b16      	ldr	r3, [pc, #88]	; (80054c4 <rand+0x5c>)
 800546a:	b510      	push	{r4, lr}
 800546c:	681c      	ldr	r4, [r3, #0]
 800546e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005470:	b9b3      	cbnz	r3, 80054a0 <rand+0x38>
 8005472:	2018      	movs	r0, #24
 8005474:	f000 fa22 	bl	80058bc <malloc>
 8005478:	4602      	mov	r2, r0
 800547a:	6320      	str	r0, [r4, #48]	; 0x30
 800547c:	b920      	cbnz	r0, 8005488 <rand+0x20>
 800547e:	4b12      	ldr	r3, [pc, #72]	; (80054c8 <rand+0x60>)
 8005480:	4812      	ldr	r0, [pc, #72]	; (80054cc <rand+0x64>)
 8005482:	2152      	movs	r1, #82	; 0x52
 8005484:	f000 f9b0 	bl	80057e8 <__assert_func>
 8005488:	4911      	ldr	r1, [pc, #68]	; (80054d0 <rand+0x68>)
 800548a:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <rand+0x6c>)
 800548c:	e9c0 1300 	strd	r1, r3, [r0]
 8005490:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <rand+0x70>)
 8005492:	6083      	str	r3, [r0, #8]
 8005494:	230b      	movs	r3, #11
 8005496:	8183      	strh	r3, [r0, #12]
 8005498:	2100      	movs	r1, #0
 800549a:	2001      	movs	r0, #1
 800549c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80054a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80054a2:	480e      	ldr	r0, [pc, #56]	; (80054dc <rand+0x74>)
 80054a4:	690b      	ldr	r3, [r1, #16]
 80054a6:	694c      	ldr	r4, [r1, #20]
 80054a8:	4a0d      	ldr	r2, [pc, #52]	; (80054e0 <rand+0x78>)
 80054aa:	4358      	muls	r0, r3
 80054ac:	fb02 0004 	mla	r0, r2, r4, r0
 80054b0:	fba3 3202 	umull	r3, r2, r3, r2
 80054b4:	3301      	adds	r3, #1
 80054b6:	eb40 0002 	adc.w	r0, r0, r2
 80054ba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80054be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80054c2:	bd10      	pop	{r4, pc}
 80054c4:	20000064 	.word	0x20000064
 80054c8:	08007804 	.word	0x08007804
 80054cc:	0800781b 	.word	0x0800781b
 80054d0:	abcd330e 	.word	0xabcd330e
 80054d4:	e66d1234 	.word	0xe66d1234
 80054d8:	0005deec 	.word	0x0005deec
 80054dc:	5851f42d 	.word	0x5851f42d
 80054e0:	4c957f2d 	.word	0x4c957f2d

080054e4 <std>:
 80054e4:	2300      	movs	r3, #0
 80054e6:	b510      	push	{r4, lr}
 80054e8:	4604      	mov	r4, r0
 80054ea:	e9c0 3300 	strd	r3, r3, [r0]
 80054ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054f2:	6083      	str	r3, [r0, #8]
 80054f4:	8181      	strh	r1, [r0, #12]
 80054f6:	6643      	str	r3, [r0, #100]	; 0x64
 80054f8:	81c2      	strh	r2, [r0, #14]
 80054fa:	6183      	str	r3, [r0, #24]
 80054fc:	4619      	mov	r1, r3
 80054fe:	2208      	movs	r2, #8
 8005500:	305c      	adds	r0, #92	; 0x5c
 8005502:	f000 f8f4 	bl	80056ee <memset>
 8005506:	4b0d      	ldr	r3, [pc, #52]	; (800553c <std+0x58>)
 8005508:	6263      	str	r3, [r4, #36]	; 0x24
 800550a:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <std+0x5c>)
 800550c:	62a3      	str	r3, [r4, #40]	; 0x28
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <std+0x60>)
 8005510:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005512:	4b0d      	ldr	r3, [pc, #52]	; (8005548 <std+0x64>)
 8005514:	6323      	str	r3, [r4, #48]	; 0x30
 8005516:	4b0d      	ldr	r3, [pc, #52]	; (800554c <std+0x68>)
 8005518:	6224      	str	r4, [r4, #32]
 800551a:	429c      	cmp	r4, r3
 800551c:	d006      	beq.n	800552c <std+0x48>
 800551e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005522:	4294      	cmp	r4, r2
 8005524:	d002      	beq.n	800552c <std+0x48>
 8005526:	33d0      	adds	r3, #208	; 0xd0
 8005528:	429c      	cmp	r4, r3
 800552a:	d105      	bne.n	8005538 <std+0x54>
 800552c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005534:	f000 b954 	b.w	80057e0 <__retarget_lock_init_recursive>
 8005538:	bd10      	pop	{r4, pc}
 800553a:	bf00      	nop
 800553c:	08005669 	.word	0x08005669
 8005540:	0800568b 	.word	0x0800568b
 8005544:	080056c3 	.word	0x080056c3
 8005548:	080056e7 	.word	0x080056e7
 800554c:	200011d0 	.word	0x200011d0

08005550 <stdio_exit_handler>:
 8005550:	4a02      	ldr	r2, [pc, #8]	; (800555c <stdio_exit_handler+0xc>)
 8005552:	4903      	ldr	r1, [pc, #12]	; (8005560 <stdio_exit_handler+0x10>)
 8005554:	4803      	ldr	r0, [pc, #12]	; (8005564 <stdio_exit_handler+0x14>)
 8005556:	f000 b869 	b.w	800562c <_fwalk_sglue>
 800555a:	bf00      	nop
 800555c:	2000000c 	.word	0x2000000c
 8005560:	08005b31 	.word	0x08005b31
 8005564:	20000018 	.word	0x20000018

08005568 <cleanup_stdio>:
 8005568:	6841      	ldr	r1, [r0, #4]
 800556a:	4b0c      	ldr	r3, [pc, #48]	; (800559c <cleanup_stdio+0x34>)
 800556c:	4299      	cmp	r1, r3
 800556e:	b510      	push	{r4, lr}
 8005570:	4604      	mov	r4, r0
 8005572:	d001      	beq.n	8005578 <cleanup_stdio+0x10>
 8005574:	f000 fadc 	bl	8005b30 <_fflush_r>
 8005578:	68a1      	ldr	r1, [r4, #8]
 800557a:	4b09      	ldr	r3, [pc, #36]	; (80055a0 <cleanup_stdio+0x38>)
 800557c:	4299      	cmp	r1, r3
 800557e:	d002      	beq.n	8005586 <cleanup_stdio+0x1e>
 8005580:	4620      	mov	r0, r4
 8005582:	f000 fad5 	bl	8005b30 <_fflush_r>
 8005586:	68e1      	ldr	r1, [r4, #12]
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <cleanup_stdio+0x3c>)
 800558a:	4299      	cmp	r1, r3
 800558c:	d004      	beq.n	8005598 <cleanup_stdio+0x30>
 800558e:	4620      	mov	r0, r4
 8005590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005594:	f000 bacc 	b.w	8005b30 <_fflush_r>
 8005598:	bd10      	pop	{r4, pc}
 800559a:	bf00      	nop
 800559c:	200011d0 	.word	0x200011d0
 80055a0:	20001238 	.word	0x20001238
 80055a4:	200012a0 	.word	0x200012a0

080055a8 <global_stdio_init.part.0>:
 80055a8:	b510      	push	{r4, lr}
 80055aa:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <global_stdio_init.part.0+0x30>)
 80055ac:	4c0b      	ldr	r4, [pc, #44]	; (80055dc <global_stdio_init.part.0+0x34>)
 80055ae:	4a0c      	ldr	r2, [pc, #48]	; (80055e0 <global_stdio_init.part.0+0x38>)
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	4620      	mov	r0, r4
 80055b4:	2200      	movs	r2, #0
 80055b6:	2104      	movs	r1, #4
 80055b8:	f7ff ff94 	bl	80054e4 <std>
 80055bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80055c0:	2201      	movs	r2, #1
 80055c2:	2109      	movs	r1, #9
 80055c4:	f7ff ff8e 	bl	80054e4 <std>
 80055c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80055cc:	2202      	movs	r2, #2
 80055ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d2:	2112      	movs	r1, #18
 80055d4:	f7ff bf86 	b.w	80054e4 <std>
 80055d8:	20001308 	.word	0x20001308
 80055dc:	200011d0 	.word	0x200011d0
 80055e0:	08005551 	.word	0x08005551

080055e4 <__sfp_lock_acquire>:
 80055e4:	4801      	ldr	r0, [pc, #4]	; (80055ec <__sfp_lock_acquire+0x8>)
 80055e6:	f000 b8fc 	b.w	80057e2 <__retarget_lock_acquire_recursive>
 80055ea:	bf00      	nop
 80055ec:	20001311 	.word	0x20001311

080055f0 <__sfp_lock_release>:
 80055f0:	4801      	ldr	r0, [pc, #4]	; (80055f8 <__sfp_lock_release+0x8>)
 80055f2:	f000 b8f7 	b.w	80057e4 <__retarget_lock_release_recursive>
 80055f6:	bf00      	nop
 80055f8:	20001311 	.word	0x20001311

080055fc <__sinit>:
 80055fc:	b510      	push	{r4, lr}
 80055fe:	4604      	mov	r4, r0
 8005600:	f7ff fff0 	bl	80055e4 <__sfp_lock_acquire>
 8005604:	6a23      	ldr	r3, [r4, #32]
 8005606:	b11b      	cbz	r3, 8005610 <__sinit+0x14>
 8005608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800560c:	f7ff bff0 	b.w	80055f0 <__sfp_lock_release>
 8005610:	4b04      	ldr	r3, [pc, #16]	; (8005624 <__sinit+0x28>)
 8005612:	6223      	str	r3, [r4, #32]
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <__sinit+0x2c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1f5      	bne.n	8005608 <__sinit+0xc>
 800561c:	f7ff ffc4 	bl	80055a8 <global_stdio_init.part.0>
 8005620:	e7f2      	b.n	8005608 <__sinit+0xc>
 8005622:	bf00      	nop
 8005624:	08005569 	.word	0x08005569
 8005628:	20001308 	.word	0x20001308

0800562c <_fwalk_sglue>:
 800562c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005630:	4607      	mov	r7, r0
 8005632:	4688      	mov	r8, r1
 8005634:	4614      	mov	r4, r2
 8005636:	2600      	movs	r6, #0
 8005638:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800563c:	f1b9 0901 	subs.w	r9, r9, #1
 8005640:	d505      	bpl.n	800564e <_fwalk_sglue+0x22>
 8005642:	6824      	ldr	r4, [r4, #0]
 8005644:	2c00      	cmp	r4, #0
 8005646:	d1f7      	bne.n	8005638 <_fwalk_sglue+0xc>
 8005648:	4630      	mov	r0, r6
 800564a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800564e:	89ab      	ldrh	r3, [r5, #12]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d907      	bls.n	8005664 <_fwalk_sglue+0x38>
 8005654:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005658:	3301      	adds	r3, #1
 800565a:	d003      	beq.n	8005664 <_fwalk_sglue+0x38>
 800565c:	4629      	mov	r1, r5
 800565e:	4638      	mov	r0, r7
 8005660:	47c0      	blx	r8
 8005662:	4306      	orrs	r6, r0
 8005664:	3568      	adds	r5, #104	; 0x68
 8005666:	e7e9      	b.n	800563c <_fwalk_sglue+0x10>

08005668 <__sread>:
 8005668:	b510      	push	{r4, lr}
 800566a:	460c      	mov	r4, r1
 800566c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005670:	f000 f868 	bl	8005744 <_read_r>
 8005674:	2800      	cmp	r0, #0
 8005676:	bfab      	itete	ge
 8005678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800567a:	89a3      	ldrhlt	r3, [r4, #12]
 800567c:	181b      	addge	r3, r3, r0
 800567e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005682:	bfac      	ite	ge
 8005684:	6563      	strge	r3, [r4, #84]	; 0x54
 8005686:	81a3      	strhlt	r3, [r4, #12]
 8005688:	bd10      	pop	{r4, pc}

0800568a <__swrite>:
 800568a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800568e:	461f      	mov	r7, r3
 8005690:	898b      	ldrh	r3, [r1, #12]
 8005692:	05db      	lsls	r3, r3, #23
 8005694:	4605      	mov	r5, r0
 8005696:	460c      	mov	r4, r1
 8005698:	4616      	mov	r6, r2
 800569a:	d505      	bpl.n	80056a8 <__swrite+0x1e>
 800569c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a0:	2302      	movs	r3, #2
 80056a2:	2200      	movs	r2, #0
 80056a4:	f000 f83c 	bl	8005720 <_lseek_r>
 80056a8:	89a3      	ldrh	r3, [r4, #12]
 80056aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056b2:	81a3      	strh	r3, [r4, #12]
 80056b4:	4632      	mov	r2, r6
 80056b6:	463b      	mov	r3, r7
 80056b8:	4628      	mov	r0, r5
 80056ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056be:	f000 b853 	b.w	8005768 <_write_r>

080056c2 <__sseek>:
 80056c2:	b510      	push	{r4, lr}
 80056c4:	460c      	mov	r4, r1
 80056c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ca:	f000 f829 	bl	8005720 <_lseek_r>
 80056ce:	1c43      	adds	r3, r0, #1
 80056d0:	89a3      	ldrh	r3, [r4, #12]
 80056d2:	bf15      	itete	ne
 80056d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80056d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056de:	81a3      	strheq	r3, [r4, #12]
 80056e0:	bf18      	it	ne
 80056e2:	81a3      	strhne	r3, [r4, #12]
 80056e4:	bd10      	pop	{r4, pc}

080056e6 <__sclose>:
 80056e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ea:	f000 b809 	b.w	8005700 <_close_r>

080056ee <memset>:
 80056ee:	4402      	add	r2, r0
 80056f0:	4603      	mov	r3, r0
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d100      	bne.n	80056f8 <memset+0xa>
 80056f6:	4770      	bx	lr
 80056f8:	f803 1b01 	strb.w	r1, [r3], #1
 80056fc:	e7f9      	b.n	80056f2 <memset+0x4>
	...

08005700 <_close_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4d06      	ldr	r5, [pc, #24]	; (800571c <_close_r+0x1c>)
 8005704:	2300      	movs	r3, #0
 8005706:	4604      	mov	r4, r0
 8005708:	4608      	mov	r0, r1
 800570a:	602b      	str	r3, [r5, #0]
 800570c:	f7fc fd71 	bl	80021f2 <_close>
 8005710:	1c43      	adds	r3, r0, #1
 8005712:	d102      	bne.n	800571a <_close_r+0x1a>
 8005714:	682b      	ldr	r3, [r5, #0]
 8005716:	b103      	cbz	r3, 800571a <_close_r+0x1a>
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	bd38      	pop	{r3, r4, r5, pc}
 800571c:	2000130c 	.word	0x2000130c

08005720 <_lseek_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	4d07      	ldr	r5, [pc, #28]	; (8005740 <_lseek_r+0x20>)
 8005724:	4604      	mov	r4, r0
 8005726:	4608      	mov	r0, r1
 8005728:	4611      	mov	r1, r2
 800572a:	2200      	movs	r2, #0
 800572c:	602a      	str	r2, [r5, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	f7fc fd86 	bl	8002240 <_lseek>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d102      	bne.n	800573e <_lseek_r+0x1e>
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	b103      	cbz	r3, 800573e <_lseek_r+0x1e>
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	2000130c 	.word	0x2000130c

08005744 <_read_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4d07      	ldr	r5, [pc, #28]	; (8005764 <_read_r+0x20>)
 8005748:	4604      	mov	r4, r0
 800574a:	4608      	mov	r0, r1
 800574c:	4611      	mov	r1, r2
 800574e:	2200      	movs	r2, #0
 8005750:	602a      	str	r2, [r5, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	f7fc fd14 	bl	8002180 <_read>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d102      	bne.n	8005762 <_read_r+0x1e>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	b103      	cbz	r3, 8005762 <_read_r+0x1e>
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	2000130c 	.word	0x2000130c

08005768 <_write_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4d07      	ldr	r5, [pc, #28]	; (8005788 <_write_r+0x20>)
 800576c:	4604      	mov	r4, r0
 800576e:	4608      	mov	r0, r1
 8005770:	4611      	mov	r1, r2
 8005772:	2200      	movs	r2, #0
 8005774:	602a      	str	r2, [r5, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	f7fc fd1f 	bl	80021ba <_write>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d102      	bne.n	8005786 <_write_r+0x1e>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	b103      	cbz	r3, 8005786 <_write_r+0x1e>
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	bd38      	pop	{r3, r4, r5, pc}
 8005788:	2000130c 	.word	0x2000130c

0800578c <__errno>:
 800578c:	4b01      	ldr	r3, [pc, #4]	; (8005794 <__errno+0x8>)
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	20000064 	.word	0x20000064

08005798 <__libc_init_array>:
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	4d0d      	ldr	r5, [pc, #52]	; (80057d0 <__libc_init_array+0x38>)
 800579c:	4c0d      	ldr	r4, [pc, #52]	; (80057d4 <__libc_init_array+0x3c>)
 800579e:	1b64      	subs	r4, r4, r5
 80057a0:	10a4      	asrs	r4, r4, #2
 80057a2:	2600      	movs	r6, #0
 80057a4:	42a6      	cmp	r6, r4
 80057a6:	d109      	bne.n	80057bc <__libc_init_array+0x24>
 80057a8:	4d0b      	ldr	r5, [pc, #44]	; (80057d8 <__libc_init_array+0x40>)
 80057aa:	4c0c      	ldr	r4, [pc, #48]	; (80057dc <__libc_init_array+0x44>)
 80057ac:	f001 ffe0 	bl	8007770 <_init>
 80057b0:	1b64      	subs	r4, r4, r5
 80057b2:	10a4      	asrs	r4, r4, #2
 80057b4:	2600      	movs	r6, #0
 80057b6:	42a6      	cmp	r6, r4
 80057b8:	d105      	bne.n	80057c6 <__libc_init_array+0x2e>
 80057ba:	bd70      	pop	{r4, r5, r6, pc}
 80057bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c0:	4798      	blx	r3
 80057c2:	3601      	adds	r6, #1
 80057c4:	e7ee      	b.n	80057a4 <__libc_init_array+0xc>
 80057c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ca:	4798      	blx	r3
 80057cc:	3601      	adds	r6, #1
 80057ce:	e7f2      	b.n	80057b6 <__libc_init_array+0x1e>
 80057d0:	08007ac8 	.word	0x08007ac8
 80057d4:	08007ac8 	.word	0x08007ac8
 80057d8:	08007ac8 	.word	0x08007ac8
 80057dc:	08007acc 	.word	0x08007acc

080057e0 <__retarget_lock_init_recursive>:
 80057e0:	4770      	bx	lr

080057e2 <__retarget_lock_acquire_recursive>:
 80057e2:	4770      	bx	lr

080057e4 <__retarget_lock_release_recursive>:
 80057e4:	4770      	bx	lr
	...

080057e8 <__assert_func>:
 80057e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057ea:	4614      	mov	r4, r2
 80057ec:	461a      	mov	r2, r3
 80057ee:	4b09      	ldr	r3, [pc, #36]	; (8005814 <__assert_func+0x2c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4605      	mov	r5, r0
 80057f4:	68d8      	ldr	r0, [r3, #12]
 80057f6:	b14c      	cbz	r4, 800580c <__assert_func+0x24>
 80057f8:	4b07      	ldr	r3, [pc, #28]	; (8005818 <__assert_func+0x30>)
 80057fa:	9100      	str	r1, [sp, #0]
 80057fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005800:	4906      	ldr	r1, [pc, #24]	; (800581c <__assert_func+0x34>)
 8005802:	462b      	mov	r3, r5
 8005804:	f000 f9bc 	bl	8005b80 <fiprintf>
 8005808:	f000 f9dc 	bl	8005bc4 <abort>
 800580c:	4b04      	ldr	r3, [pc, #16]	; (8005820 <__assert_func+0x38>)
 800580e:	461c      	mov	r4, r3
 8005810:	e7f3      	b.n	80057fa <__assert_func+0x12>
 8005812:	bf00      	nop
 8005814:	20000064 	.word	0x20000064
 8005818:	08007873 	.word	0x08007873
 800581c:	08007880 	.word	0x08007880
 8005820:	080078ae 	.word	0x080078ae

08005824 <_free_r>:
 8005824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005826:	2900      	cmp	r1, #0
 8005828:	d044      	beq.n	80058b4 <_free_r+0x90>
 800582a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800582e:	9001      	str	r0, [sp, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f1a1 0404 	sub.w	r4, r1, #4
 8005836:	bfb8      	it	lt
 8005838:	18e4      	addlt	r4, r4, r3
 800583a:	f000 f8e7 	bl	8005a0c <__malloc_lock>
 800583e:	4a1e      	ldr	r2, [pc, #120]	; (80058b8 <_free_r+0x94>)
 8005840:	9801      	ldr	r0, [sp, #4]
 8005842:	6813      	ldr	r3, [r2, #0]
 8005844:	b933      	cbnz	r3, 8005854 <_free_r+0x30>
 8005846:	6063      	str	r3, [r4, #4]
 8005848:	6014      	str	r4, [r2, #0]
 800584a:	b003      	add	sp, #12
 800584c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005850:	f000 b8e2 	b.w	8005a18 <__malloc_unlock>
 8005854:	42a3      	cmp	r3, r4
 8005856:	d908      	bls.n	800586a <_free_r+0x46>
 8005858:	6825      	ldr	r5, [r4, #0]
 800585a:	1961      	adds	r1, r4, r5
 800585c:	428b      	cmp	r3, r1
 800585e:	bf01      	itttt	eq
 8005860:	6819      	ldreq	r1, [r3, #0]
 8005862:	685b      	ldreq	r3, [r3, #4]
 8005864:	1949      	addeq	r1, r1, r5
 8005866:	6021      	streq	r1, [r4, #0]
 8005868:	e7ed      	b.n	8005846 <_free_r+0x22>
 800586a:	461a      	mov	r2, r3
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	b10b      	cbz	r3, 8005874 <_free_r+0x50>
 8005870:	42a3      	cmp	r3, r4
 8005872:	d9fa      	bls.n	800586a <_free_r+0x46>
 8005874:	6811      	ldr	r1, [r2, #0]
 8005876:	1855      	adds	r5, r2, r1
 8005878:	42a5      	cmp	r5, r4
 800587a:	d10b      	bne.n	8005894 <_free_r+0x70>
 800587c:	6824      	ldr	r4, [r4, #0]
 800587e:	4421      	add	r1, r4
 8005880:	1854      	adds	r4, r2, r1
 8005882:	42a3      	cmp	r3, r4
 8005884:	6011      	str	r1, [r2, #0]
 8005886:	d1e0      	bne.n	800584a <_free_r+0x26>
 8005888:	681c      	ldr	r4, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	6053      	str	r3, [r2, #4]
 800588e:	440c      	add	r4, r1
 8005890:	6014      	str	r4, [r2, #0]
 8005892:	e7da      	b.n	800584a <_free_r+0x26>
 8005894:	d902      	bls.n	800589c <_free_r+0x78>
 8005896:	230c      	movs	r3, #12
 8005898:	6003      	str	r3, [r0, #0]
 800589a:	e7d6      	b.n	800584a <_free_r+0x26>
 800589c:	6825      	ldr	r5, [r4, #0]
 800589e:	1961      	adds	r1, r4, r5
 80058a0:	428b      	cmp	r3, r1
 80058a2:	bf04      	itt	eq
 80058a4:	6819      	ldreq	r1, [r3, #0]
 80058a6:	685b      	ldreq	r3, [r3, #4]
 80058a8:	6063      	str	r3, [r4, #4]
 80058aa:	bf04      	itt	eq
 80058ac:	1949      	addeq	r1, r1, r5
 80058ae:	6021      	streq	r1, [r4, #0]
 80058b0:	6054      	str	r4, [r2, #4]
 80058b2:	e7ca      	b.n	800584a <_free_r+0x26>
 80058b4:	b003      	add	sp, #12
 80058b6:	bd30      	pop	{r4, r5, pc}
 80058b8:	20001314 	.word	0x20001314

080058bc <malloc>:
 80058bc:	4b02      	ldr	r3, [pc, #8]	; (80058c8 <malloc+0xc>)
 80058be:	4601      	mov	r1, r0
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	f000 b823 	b.w	800590c <_malloc_r>
 80058c6:	bf00      	nop
 80058c8:	20000064 	.word	0x20000064

080058cc <sbrk_aligned>:
 80058cc:	b570      	push	{r4, r5, r6, lr}
 80058ce:	4e0e      	ldr	r6, [pc, #56]	; (8005908 <sbrk_aligned+0x3c>)
 80058d0:	460c      	mov	r4, r1
 80058d2:	6831      	ldr	r1, [r6, #0]
 80058d4:	4605      	mov	r5, r0
 80058d6:	b911      	cbnz	r1, 80058de <sbrk_aligned+0x12>
 80058d8:	f000 f964 	bl	8005ba4 <_sbrk_r>
 80058dc:	6030      	str	r0, [r6, #0]
 80058de:	4621      	mov	r1, r4
 80058e0:	4628      	mov	r0, r5
 80058e2:	f000 f95f 	bl	8005ba4 <_sbrk_r>
 80058e6:	1c43      	adds	r3, r0, #1
 80058e8:	d00a      	beq.n	8005900 <sbrk_aligned+0x34>
 80058ea:	1cc4      	adds	r4, r0, #3
 80058ec:	f024 0403 	bic.w	r4, r4, #3
 80058f0:	42a0      	cmp	r0, r4
 80058f2:	d007      	beq.n	8005904 <sbrk_aligned+0x38>
 80058f4:	1a21      	subs	r1, r4, r0
 80058f6:	4628      	mov	r0, r5
 80058f8:	f000 f954 	bl	8005ba4 <_sbrk_r>
 80058fc:	3001      	adds	r0, #1
 80058fe:	d101      	bne.n	8005904 <sbrk_aligned+0x38>
 8005900:	f04f 34ff 	mov.w	r4, #4294967295
 8005904:	4620      	mov	r0, r4
 8005906:	bd70      	pop	{r4, r5, r6, pc}
 8005908:	20001318 	.word	0x20001318

0800590c <_malloc_r>:
 800590c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005910:	1ccd      	adds	r5, r1, #3
 8005912:	f025 0503 	bic.w	r5, r5, #3
 8005916:	3508      	adds	r5, #8
 8005918:	2d0c      	cmp	r5, #12
 800591a:	bf38      	it	cc
 800591c:	250c      	movcc	r5, #12
 800591e:	2d00      	cmp	r5, #0
 8005920:	4607      	mov	r7, r0
 8005922:	db01      	blt.n	8005928 <_malloc_r+0x1c>
 8005924:	42a9      	cmp	r1, r5
 8005926:	d905      	bls.n	8005934 <_malloc_r+0x28>
 8005928:	230c      	movs	r3, #12
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	2600      	movs	r6, #0
 800592e:	4630      	mov	r0, r6
 8005930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005934:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a08 <_malloc_r+0xfc>
 8005938:	f000 f868 	bl	8005a0c <__malloc_lock>
 800593c:	f8d8 3000 	ldr.w	r3, [r8]
 8005940:	461c      	mov	r4, r3
 8005942:	bb5c      	cbnz	r4, 800599c <_malloc_r+0x90>
 8005944:	4629      	mov	r1, r5
 8005946:	4638      	mov	r0, r7
 8005948:	f7ff ffc0 	bl	80058cc <sbrk_aligned>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	4604      	mov	r4, r0
 8005950:	d155      	bne.n	80059fe <_malloc_r+0xf2>
 8005952:	f8d8 4000 	ldr.w	r4, [r8]
 8005956:	4626      	mov	r6, r4
 8005958:	2e00      	cmp	r6, #0
 800595a:	d145      	bne.n	80059e8 <_malloc_r+0xdc>
 800595c:	2c00      	cmp	r4, #0
 800595e:	d048      	beq.n	80059f2 <_malloc_r+0xe6>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	4631      	mov	r1, r6
 8005964:	4638      	mov	r0, r7
 8005966:	eb04 0903 	add.w	r9, r4, r3
 800596a:	f000 f91b 	bl	8005ba4 <_sbrk_r>
 800596e:	4581      	cmp	r9, r0
 8005970:	d13f      	bne.n	80059f2 <_malloc_r+0xe6>
 8005972:	6821      	ldr	r1, [r4, #0]
 8005974:	1a6d      	subs	r5, r5, r1
 8005976:	4629      	mov	r1, r5
 8005978:	4638      	mov	r0, r7
 800597a:	f7ff ffa7 	bl	80058cc <sbrk_aligned>
 800597e:	3001      	adds	r0, #1
 8005980:	d037      	beq.n	80059f2 <_malloc_r+0xe6>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	442b      	add	r3, r5
 8005986:	6023      	str	r3, [r4, #0]
 8005988:	f8d8 3000 	ldr.w	r3, [r8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d038      	beq.n	8005a02 <_malloc_r+0xf6>
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	42a2      	cmp	r2, r4
 8005994:	d12b      	bne.n	80059ee <_malloc_r+0xe2>
 8005996:	2200      	movs	r2, #0
 8005998:	605a      	str	r2, [r3, #4]
 800599a:	e00f      	b.n	80059bc <_malloc_r+0xb0>
 800599c:	6822      	ldr	r2, [r4, #0]
 800599e:	1b52      	subs	r2, r2, r5
 80059a0:	d41f      	bmi.n	80059e2 <_malloc_r+0xd6>
 80059a2:	2a0b      	cmp	r2, #11
 80059a4:	d917      	bls.n	80059d6 <_malloc_r+0xca>
 80059a6:	1961      	adds	r1, r4, r5
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	6025      	str	r5, [r4, #0]
 80059ac:	bf18      	it	ne
 80059ae:	6059      	strne	r1, [r3, #4]
 80059b0:	6863      	ldr	r3, [r4, #4]
 80059b2:	bf08      	it	eq
 80059b4:	f8c8 1000 	streq.w	r1, [r8]
 80059b8:	5162      	str	r2, [r4, r5]
 80059ba:	604b      	str	r3, [r1, #4]
 80059bc:	4638      	mov	r0, r7
 80059be:	f104 060b 	add.w	r6, r4, #11
 80059c2:	f000 f829 	bl	8005a18 <__malloc_unlock>
 80059c6:	f026 0607 	bic.w	r6, r6, #7
 80059ca:	1d23      	adds	r3, r4, #4
 80059cc:	1af2      	subs	r2, r6, r3
 80059ce:	d0ae      	beq.n	800592e <_malloc_r+0x22>
 80059d0:	1b9b      	subs	r3, r3, r6
 80059d2:	50a3      	str	r3, [r4, r2]
 80059d4:	e7ab      	b.n	800592e <_malloc_r+0x22>
 80059d6:	42a3      	cmp	r3, r4
 80059d8:	6862      	ldr	r2, [r4, #4]
 80059da:	d1dd      	bne.n	8005998 <_malloc_r+0x8c>
 80059dc:	f8c8 2000 	str.w	r2, [r8]
 80059e0:	e7ec      	b.n	80059bc <_malloc_r+0xb0>
 80059e2:	4623      	mov	r3, r4
 80059e4:	6864      	ldr	r4, [r4, #4]
 80059e6:	e7ac      	b.n	8005942 <_malloc_r+0x36>
 80059e8:	4634      	mov	r4, r6
 80059ea:	6876      	ldr	r6, [r6, #4]
 80059ec:	e7b4      	b.n	8005958 <_malloc_r+0x4c>
 80059ee:	4613      	mov	r3, r2
 80059f0:	e7cc      	b.n	800598c <_malloc_r+0x80>
 80059f2:	230c      	movs	r3, #12
 80059f4:	603b      	str	r3, [r7, #0]
 80059f6:	4638      	mov	r0, r7
 80059f8:	f000 f80e 	bl	8005a18 <__malloc_unlock>
 80059fc:	e797      	b.n	800592e <_malloc_r+0x22>
 80059fe:	6025      	str	r5, [r4, #0]
 8005a00:	e7dc      	b.n	80059bc <_malloc_r+0xb0>
 8005a02:	605b      	str	r3, [r3, #4]
 8005a04:	deff      	udf	#255	; 0xff
 8005a06:	bf00      	nop
 8005a08:	20001314 	.word	0x20001314

08005a0c <__malloc_lock>:
 8005a0c:	4801      	ldr	r0, [pc, #4]	; (8005a14 <__malloc_lock+0x8>)
 8005a0e:	f7ff bee8 	b.w	80057e2 <__retarget_lock_acquire_recursive>
 8005a12:	bf00      	nop
 8005a14:	20001310 	.word	0x20001310

08005a18 <__malloc_unlock>:
 8005a18:	4801      	ldr	r0, [pc, #4]	; (8005a20 <__malloc_unlock+0x8>)
 8005a1a:	f7ff bee3 	b.w	80057e4 <__retarget_lock_release_recursive>
 8005a1e:	bf00      	nop
 8005a20:	20001310 	.word	0x20001310

08005a24 <__sflush_r>:
 8005a24:	898a      	ldrh	r2, [r1, #12]
 8005a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	0710      	lsls	r0, r2, #28
 8005a2e:	460c      	mov	r4, r1
 8005a30:	d458      	bmi.n	8005ae4 <__sflush_r+0xc0>
 8005a32:	684b      	ldr	r3, [r1, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	dc05      	bgt.n	8005a44 <__sflush_r+0x20>
 8005a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	dc02      	bgt.n	8005a44 <__sflush_r+0x20>
 8005a3e:	2000      	movs	r0, #0
 8005a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a46:	2e00      	cmp	r6, #0
 8005a48:	d0f9      	beq.n	8005a3e <__sflush_r+0x1a>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a50:	682f      	ldr	r7, [r5, #0]
 8005a52:	6a21      	ldr	r1, [r4, #32]
 8005a54:	602b      	str	r3, [r5, #0]
 8005a56:	d032      	beq.n	8005abe <__sflush_r+0x9a>
 8005a58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	075a      	lsls	r2, r3, #29
 8005a5e:	d505      	bpl.n	8005a6c <__sflush_r+0x48>
 8005a60:	6863      	ldr	r3, [r4, #4]
 8005a62:	1ac0      	subs	r0, r0, r3
 8005a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a66:	b10b      	cbz	r3, 8005a6c <__sflush_r+0x48>
 8005a68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a6a:	1ac0      	subs	r0, r0, r3
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	4602      	mov	r2, r0
 8005a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a72:	6a21      	ldr	r1, [r4, #32]
 8005a74:	4628      	mov	r0, r5
 8005a76:	47b0      	blx	r6
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	89a3      	ldrh	r3, [r4, #12]
 8005a7c:	d106      	bne.n	8005a8c <__sflush_r+0x68>
 8005a7e:	6829      	ldr	r1, [r5, #0]
 8005a80:	291d      	cmp	r1, #29
 8005a82:	d82b      	bhi.n	8005adc <__sflush_r+0xb8>
 8005a84:	4a29      	ldr	r2, [pc, #164]	; (8005b2c <__sflush_r+0x108>)
 8005a86:	410a      	asrs	r2, r1
 8005a88:	07d6      	lsls	r6, r2, #31
 8005a8a:	d427      	bmi.n	8005adc <__sflush_r+0xb8>
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	6062      	str	r2, [r4, #4]
 8005a90:	04d9      	lsls	r1, r3, #19
 8005a92:	6922      	ldr	r2, [r4, #16]
 8005a94:	6022      	str	r2, [r4, #0]
 8005a96:	d504      	bpl.n	8005aa2 <__sflush_r+0x7e>
 8005a98:	1c42      	adds	r2, r0, #1
 8005a9a:	d101      	bne.n	8005aa0 <__sflush_r+0x7c>
 8005a9c:	682b      	ldr	r3, [r5, #0]
 8005a9e:	b903      	cbnz	r3, 8005aa2 <__sflush_r+0x7e>
 8005aa0:	6560      	str	r0, [r4, #84]	; 0x54
 8005aa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aa4:	602f      	str	r7, [r5, #0]
 8005aa6:	2900      	cmp	r1, #0
 8005aa8:	d0c9      	beq.n	8005a3e <__sflush_r+0x1a>
 8005aaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005aae:	4299      	cmp	r1, r3
 8005ab0:	d002      	beq.n	8005ab8 <__sflush_r+0x94>
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f7ff feb6 	bl	8005824 <_free_r>
 8005ab8:	2000      	movs	r0, #0
 8005aba:	6360      	str	r0, [r4, #52]	; 0x34
 8005abc:	e7c0      	b.n	8005a40 <__sflush_r+0x1c>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	47b0      	blx	r6
 8005ac4:	1c41      	adds	r1, r0, #1
 8005ac6:	d1c8      	bne.n	8005a5a <__sflush_r+0x36>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0c5      	beq.n	8005a5a <__sflush_r+0x36>
 8005ace:	2b1d      	cmp	r3, #29
 8005ad0:	d001      	beq.n	8005ad6 <__sflush_r+0xb2>
 8005ad2:	2b16      	cmp	r3, #22
 8005ad4:	d101      	bne.n	8005ada <__sflush_r+0xb6>
 8005ad6:	602f      	str	r7, [r5, #0]
 8005ad8:	e7b1      	b.n	8005a3e <__sflush_r+0x1a>
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae0:	81a3      	strh	r3, [r4, #12]
 8005ae2:	e7ad      	b.n	8005a40 <__sflush_r+0x1c>
 8005ae4:	690f      	ldr	r7, [r1, #16]
 8005ae6:	2f00      	cmp	r7, #0
 8005ae8:	d0a9      	beq.n	8005a3e <__sflush_r+0x1a>
 8005aea:	0793      	lsls	r3, r2, #30
 8005aec:	680e      	ldr	r6, [r1, #0]
 8005aee:	bf08      	it	eq
 8005af0:	694b      	ldreq	r3, [r1, #20]
 8005af2:	600f      	str	r7, [r1, #0]
 8005af4:	bf18      	it	ne
 8005af6:	2300      	movne	r3, #0
 8005af8:	eba6 0807 	sub.w	r8, r6, r7
 8005afc:	608b      	str	r3, [r1, #8]
 8005afe:	f1b8 0f00 	cmp.w	r8, #0
 8005b02:	dd9c      	ble.n	8005a3e <__sflush_r+0x1a>
 8005b04:	6a21      	ldr	r1, [r4, #32]
 8005b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b08:	4643      	mov	r3, r8
 8005b0a:	463a      	mov	r2, r7
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	47b0      	blx	r6
 8005b10:	2800      	cmp	r0, #0
 8005b12:	dc06      	bgt.n	8005b22 <__sflush_r+0xfe>
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b1a:	81a3      	strh	r3, [r4, #12]
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b20:	e78e      	b.n	8005a40 <__sflush_r+0x1c>
 8005b22:	4407      	add	r7, r0
 8005b24:	eba8 0800 	sub.w	r8, r8, r0
 8005b28:	e7e9      	b.n	8005afe <__sflush_r+0xda>
 8005b2a:	bf00      	nop
 8005b2c:	dfbffffe 	.word	0xdfbffffe

08005b30 <_fflush_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	690b      	ldr	r3, [r1, #16]
 8005b34:	4605      	mov	r5, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	b913      	cbnz	r3, 8005b40 <_fflush_r+0x10>
 8005b3a:	2500      	movs	r5, #0
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	bd38      	pop	{r3, r4, r5, pc}
 8005b40:	b118      	cbz	r0, 8005b4a <_fflush_r+0x1a>
 8005b42:	6a03      	ldr	r3, [r0, #32]
 8005b44:	b90b      	cbnz	r3, 8005b4a <_fflush_r+0x1a>
 8005b46:	f7ff fd59 	bl	80055fc <__sinit>
 8005b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f3      	beq.n	8005b3a <_fflush_r+0xa>
 8005b52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b54:	07d0      	lsls	r0, r2, #31
 8005b56:	d404      	bmi.n	8005b62 <_fflush_r+0x32>
 8005b58:	0599      	lsls	r1, r3, #22
 8005b5a:	d402      	bmi.n	8005b62 <_fflush_r+0x32>
 8005b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b5e:	f7ff fe40 	bl	80057e2 <__retarget_lock_acquire_recursive>
 8005b62:	4628      	mov	r0, r5
 8005b64:	4621      	mov	r1, r4
 8005b66:	f7ff ff5d 	bl	8005a24 <__sflush_r>
 8005b6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b6c:	07da      	lsls	r2, r3, #31
 8005b6e:	4605      	mov	r5, r0
 8005b70:	d4e4      	bmi.n	8005b3c <_fflush_r+0xc>
 8005b72:	89a3      	ldrh	r3, [r4, #12]
 8005b74:	059b      	lsls	r3, r3, #22
 8005b76:	d4e1      	bmi.n	8005b3c <_fflush_r+0xc>
 8005b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b7a:	f7ff fe33 	bl	80057e4 <__retarget_lock_release_recursive>
 8005b7e:	e7dd      	b.n	8005b3c <_fflush_r+0xc>

08005b80 <fiprintf>:
 8005b80:	b40e      	push	{r1, r2, r3}
 8005b82:	b503      	push	{r0, r1, lr}
 8005b84:	4601      	mov	r1, r0
 8005b86:	ab03      	add	r3, sp, #12
 8005b88:	4805      	ldr	r0, [pc, #20]	; (8005ba0 <fiprintf+0x20>)
 8005b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b8e:	6800      	ldr	r0, [r0, #0]
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	f000 f847 	bl	8005c24 <_vfiprintf_r>
 8005b96:	b002      	add	sp, #8
 8005b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b9c:	b003      	add	sp, #12
 8005b9e:	4770      	bx	lr
 8005ba0:	20000064 	.word	0x20000064

08005ba4 <_sbrk_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4d06      	ldr	r5, [pc, #24]	; (8005bc0 <_sbrk_r+0x1c>)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	4604      	mov	r4, r0
 8005bac:	4608      	mov	r0, r1
 8005bae:	602b      	str	r3, [r5, #0]
 8005bb0:	f7fc fb54 	bl	800225c <_sbrk>
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d102      	bne.n	8005bbe <_sbrk_r+0x1a>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	b103      	cbz	r3, 8005bbe <_sbrk_r+0x1a>
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
 8005bc0:	2000130c 	.word	0x2000130c

08005bc4 <abort>:
 8005bc4:	b508      	push	{r3, lr}
 8005bc6:	2006      	movs	r0, #6
 8005bc8:	f000 fb94 	bl	80062f4 <raise>
 8005bcc:	2001      	movs	r0, #1
 8005bce:	f7fc facd 	bl	800216c <_exit>

08005bd2 <__sfputc_r>:
 8005bd2:	6893      	ldr	r3, [r2, #8]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	b410      	push	{r4}
 8005bda:	6093      	str	r3, [r2, #8]
 8005bdc:	da08      	bge.n	8005bf0 <__sfputc_r+0x1e>
 8005bde:	6994      	ldr	r4, [r2, #24]
 8005be0:	42a3      	cmp	r3, r4
 8005be2:	db01      	blt.n	8005be8 <__sfputc_r+0x16>
 8005be4:	290a      	cmp	r1, #10
 8005be6:	d103      	bne.n	8005bf0 <__sfputc_r+0x1e>
 8005be8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bec:	f000 bac4 	b.w	8006178 <__swbuf_r>
 8005bf0:	6813      	ldr	r3, [r2, #0]
 8005bf2:	1c58      	adds	r0, r3, #1
 8005bf4:	6010      	str	r0, [r2, #0]
 8005bf6:	7019      	strb	r1, [r3, #0]
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <__sfputs_r>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	4606      	mov	r6, r0
 8005c04:	460f      	mov	r7, r1
 8005c06:	4614      	mov	r4, r2
 8005c08:	18d5      	adds	r5, r2, r3
 8005c0a:	42ac      	cmp	r4, r5
 8005c0c:	d101      	bne.n	8005c12 <__sfputs_r+0x12>
 8005c0e:	2000      	movs	r0, #0
 8005c10:	e007      	b.n	8005c22 <__sfputs_r+0x22>
 8005c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c16:	463a      	mov	r2, r7
 8005c18:	4630      	mov	r0, r6
 8005c1a:	f7ff ffda 	bl	8005bd2 <__sfputc_r>
 8005c1e:	1c43      	adds	r3, r0, #1
 8005c20:	d1f3      	bne.n	8005c0a <__sfputs_r+0xa>
 8005c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005c24 <_vfiprintf_r>:
 8005c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c28:	460d      	mov	r5, r1
 8005c2a:	b09d      	sub	sp, #116	; 0x74
 8005c2c:	4614      	mov	r4, r2
 8005c2e:	4698      	mov	r8, r3
 8005c30:	4606      	mov	r6, r0
 8005c32:	b118      	cbz	r0, 8005c3c <_vfiprintf_r+0x18>
 8005c34:	6a03      	ldr	r3, [r0, #32]
 8005c36:	b90b      	cbnz	r3, 8005c3c <_vfiprintf_r+0x18>
 8005c38:	f7ff fce0 	bl	80055fc <__sinit>
 8005c3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c3e:	07d9      	lsls	r1, r3, #31
 8005c40:	d405      	bmi.n	8005c4e <_vfiprintf_r+0x2a>
 8005c42:	89ab      	ldrh	r3, [r5, #12]
 8005c44:	059a      	lsls	r2, r3, #22
 8005c46:	d402      	bmi.n	8005c4e <_vfiprintf_r+0x2a>
 8005c48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c4a:	f7ff fdca 	bl	80057e2 <__retarget_lock_acquire_recursive>
 8005c4e:	89ab      	ldrh	r3, [r5, #12]
 8005c50:	071b      	lsls	r3, r3, #28
 8005c52:	d501      	bpl.n	8005c58 <_vfiprintf_r+0x34>
 8005c54:	692b      	ldr	r3, [r5, #16]
 8005c56:	b99b      	cbnz	r3, 8005c80 <_vfiprintf_r+0x5c>
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	f000 faca 	bl	80061f4 <__swsetup_r>
 8005c60:	b170      	cbz	r0, 8005c80 <_vfiprintf_r+0x5c>
 8005c62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c64:	07dc      	lsls	r4, r3, #31
 8005c66:	d504      	bpl.n	8005c72 <_vfiprintf_r+0x4e>
 8005c68:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6c:	b01d      	add	sp, #116	; 0x74
 8005c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c72:	89ab      	ldrh	r3, [r5, #12]
 8005c74:	0598      	lsls	r0, r3, #22
 8005c76:	d4f7      	bmi.n	8005c68 <_vfiprintf_r+0x44>
 8005c78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c7a:	f7ff fdb3 	bl	80057e4 <__retarget_lock_release_recursive>
 8005c7e:	e7f3      	b.n	8005c68 <_vfiprintf_r+0x44>
 8005c80:	2300      	movs	r3, #0
 8005c82:	9309      	str	r3, [sp, #36]	; 0x24
 8005c84:	2320      	movs	r3, #32
 8005c86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c8e:	2330      	movs	r3, #48	; 0x30
 8005c90:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005e44 <_vfiprintf_r+0x220>
 8005c94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c98:	f04f 0901 	mov.w	r9, #1
 8005c9c:	4623      	mov	r3, r4
 8005c9e:	469a      	mov	sl, r3
 8005ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ca4:	b10a      	cbz	r2, 8005caa <_vfiprintf_r+0x86>
 8005ca6:	2a25      	cmp	r2, #37	; 0x25
 8005ca8:	d1f9      	bne.n	8005c9e <_vfiprintf_r+0x7a>
 8005caa:	ebba 0b04 	subs.w	fp, sl, r4
 8005cae:	d00b      	beq.n	8005cc8 <_vfiprintf_r+0xa4>
 8005cb0:	465b      	mov	r3, fp
 8005cb2:	4622      	mov	r2, r4
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f7ff ffa2 	bl	8005c00 <__sfputs_r>
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	f000 80a9 	beq.w	8005e14 <_vfiprintf_r+0x1f0>
 8005cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cc4:	445a      	add	r2, fp
 8005cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8005cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 80a1 	beq.w	8005e14 <_vfiprintf_r+0x1f0>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cdc:	f10a 0a01 	add.w	sl, sl, #1
 8005ce0:	9304      	str	r3, [sp, #16]
 8005ce2:	9307      	str	r3, [sp, #28]
 8005ce4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ce8:	931a      	str	r3, [sp, #104]	; 0x68
 8005cea:	4654      	mov	r4, sl
 8005cec:	2205      	movs	r2, #5
 8005cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cf2:	4854      	ldr	r0, [pc, #336]	; (8005e44 <_vfiprintf_r+0x220>)
 8005cf4:	f7fa fa6c 	bl	80001d0 <memchr>
 8005cf8:	9a04      	ldr	r2, [sp, #16]
 8005cfa:	b9d8      	cbnz	r0, 8005d34 <_vfiprintf_r+0x110>
 8005cfc:	06d1      	lsls	r1, r2, #27
 8005cfe:	bf44      	itt	mi
 8005d00:	2320      	movmi	r3, #32
 8005d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d06:	0713      	lsls	r3, r2, #28
 8005d08:	bf44      	itt	mi
 8005d0a:	232b      	movmi	r3, #43	; 0x2b
 8005d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d10:	f89a 3000 	ldrb.w	r3, [sl]
 8005d14:	2b2a      	cmp	r3, #42	; 0x2a
 8005d16:	d015      	beq.n	8005d44 <_vfiprintf_r+0x120>
 8005d18:	9a07      	ldr	r2, [sp, #28]
 8005d1a:	4654      	mov	r4, sl
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	f04f 0c0a 	mov.w	ip, #10
 8005d22:	4621      	mov	r1, r4
 8005d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d28:	3b30      	subs	r3, #48	; 0x30
 8005d2a:	2b09      	cmp	r3, #9
 8005d2c:	d94d      	bls.n	8005dca <_vfiprintf_r+0x1a6>
 8005d2e:	b1b0      	cbz	r0, 8005d5e <_vfiprintf_r+0x13a>
 8005d30:	9207      	str	r2, [sp, #28]
 8005d32:	e014      	b.n	8005d5e <_vfiprintf_r+0x13a>
 8005d34:	eba0 0308 	sub.w	r3, r0, r8
 8005d38:	fa09 f303 	lsl.w	r3, r9, r3
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	9304      	str	r3, [sp, #16]
 8005d40:	46a2      	mov	sl, r4
 8005d42:	e7d2      	b.n	8005cea <_vfiprintf_r+0xc6>
 8005d44:	9b03      	ldr	r3, [sp, #12]
 8005d46:	1d19      	adds	r1, r3, #4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	9103      	str	r1, [sp, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	bfbb      	ittet	lt
 8005d50:	425b      	neglt	r3, r3
 8005d52:	f042 0202 	orrlt.w	r2, r2, #2
 8005d56:	9307      	strge	r3, [sp, #28]
 8005d58:	9307      	strlt	r3, [sp, #28]
 8005d5a:	bfb8      	it	lt
 8005d5c:	9204      	strlt	r2, [sp, #16]
 8005d5e:	7823      	ldrb	r3, [r4, #0]
 8005d60:	2b2e      	cmp	r3, #46	; 0x2e
 8005d62:	d10c      	bne.n	8005d7e <_vfiprintf_r+0x15a>
 8005d64:	7863      	ldrb	r3, [r4, #1]
 8005d66:	2b2a      	cmp	r3, #42	; 0x2a
 8005d68:	d134      	bne.n	8005dd4 <_vfiprintf_r+0x1b0>
 8005d6a:	9b03      	ldr	r3, [sp, #12]
 8005d6c:	1d1a      	adds	r2, r3, #4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	9203      	str	r2, [sp, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	bfb8      	it	lt
 8005d76:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d7a:	3402      	adds	r4, #2
 8005d7c:	9305      	str	r3, [sp, #20]
 8005d7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005e54 <_vfiprintf_r+0x230>
 8005d82:	7821      	ldrb	r1, [r4, #0]
 8005d84:	2203      	movs	r2, #3
 8005d86:	4650      	mov	r0, sl
 8005d88:	f7fa fa22 	bl	80001d0 <memchr>
 8005d8c:	b138      	cbz	r0, 8005d9e <_vfiprintf_r+0x17a>
 8005d8e:	9b04      	ldr	r3, [sp, #16]
 8005d90:	eba0 000a 	sub.w	r0, r0, sl
 8005d94:	2240      	movs	r2, #64	; 0x40
 8005d96:	4082      	lsls	r2, r0
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	3401      	adds	r4, #1
 8005d9c:	9304      	str	r3, [sp, #16]
 8005d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da2:	4829      	ldr	r0, [pc, #164]	; (8005e48 <_vfiprintf_r+0x224>)
 8005da4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005da8:	2206      	movs	r2, #6
 8005daa:	f7fa fa11 	bl	80001d0 <memchr>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d03f      	beq.n	8005e32 <_vfiprintf_r+0x20e>
 8005db2:	4b26      	ldr	r3, [pc, #152]	; (8005e4c <_vfiprintf_r+0x228>)
 8005db4:	bb1b      	cbnz	r3, 8005dfe <_vfiprintf_r+0x1da>
 8005db6:	9b03      	ldr	r3, [sp, #12]
 8005db8:	3307      	adds	r3, #7
 8005dba:	f023 0307 	bic.w	r3, r3, #7
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	9303      	str	r3, [sp, #12]
 8005dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc4:	443b      	add	r3, r7
 8005dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc8:	e768      	b.n	8005c9c <_vfiprintf_r+0x78>
 8005dca:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dce:	460c      	mov	r4, r1
 8005dd0:	2001      	movs	r0, #1
 8005dd2:	e7a6      	b.n	8005d22 <_vfiprintf_r+0xfe>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	3401      	adds	r4, #1
 8005dd8:	9305      	str	r3, [sp, #20]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	f04f 0c0a 	mov.w	ip, #10
 8005de0:	4620      	mov	r0, r4
 8005de2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005de6:	3a30      	subs	r2, #48	; 0x30
 8005de8:	2a09      	cmp	r2, #9
 8005dea:	d903      	bls.n	8005df4 <_vfiprintf_r+0x1d0>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0c6      	beq.n	8005d7e <_vfiprintf_r+0x15a>
 8005df0:	9105      	str	r1, [sp, #20]
 8005df2:	e7c4      	b.n	8005d7e <_vfiprintf_r+0x15a>
 8005df4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005df8:	4604      	mov	r4, r0
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e7f0      	b.n	8005de0 <_vfiprintf_r+0x1bc>
 8005dfe:	ab03      	add	r3, sp, #12
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	462a      	mov	r2, r5
 8005e04:	4b12      	ldr	r3, [pc, #72]	; (8005e50 <_vfiprintf_r+0x22c>)
 8005e06:	a904      	add	r1, sp, #16
 8005e08:	4630      	mov	r0, r6
 8005e0a:	f3af 8000 	nop.w
 8005e0e:	4607      	mov	r7, r0
 8005e10:	1c78      	adds	r0, r7, #1
 8005e12:	d1d6      	bne.n	8005dc2 <_vfiprintf_r+0x19e>
 8005e14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e16:	07d9      	lsls	r1, r3, #31
 8005e18:	d405      	bmi.n	8005e26 <_vfiprintf_r+0x202>
 8005e1a:	89ab      	ldrh	r3, [r5, #12]
 8005e1c:	059a      	lsls	r2, r3, #22
 8005e1e:	d402      	bmi.n	8005e26 <_vfiprintf_r+0x202>
 8005e20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e22:	f7ff fcdf 	bl	80057e4 <__retarget_lock_release_recursive>
 8005e26:	89ab      	ldrh	r3, [r5, #12]
 8005e28:	065b      	lsls	r3, r3, #25
 8005e2a:	f53f af1d 	bmi.w	8005c68 <_vfiprintf_r+0x44>
 8005e2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e30:	e71c      	b.n	8005c6c <_vfiprintf_r+0x48>
 8005e32:	ab03      	add	r3, sp, #12
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	462a      	mov	r2, r5
 8005e38:	4b05      	ldr	r3, [pc, #20]	; (8005e50 <_vfiprintf_r+0x22c>)
 8005e3a:	a904      	add	r1, sp, #16
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f000 f879 	bl	8005f34 <_printf_i>
 8005e42:	e7e4      	b.n	8005e0e <_vfiprintf_r+0x1ea>
 8005e44:	080078af 	.word	0x080078af
 8005e48:	080078b9 	.word	0x080078b9
 8005e4c:	00000000 	.word	0x00000000
 8005e50:	08005c01 	.word	0x08005c01
 8005e54:	080078b5 	.word	0x080078b5

08005e58 <_printf_common>:
 8005e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e5c:	4616      	mov	r6, r2
 8005e5e:	4699      	mov	r9, r3
 8005e60:	688a      	ldr	r2, [r1, #8]
 8005e62:	690b      	ldr	r3, [r1, #16]
 8005e64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	bfb8      	it	lt
 8005e6c:	4613      	movlt	r3, r2
 8005e6e:	6033      	str	r3, [r6, #0]
 8005e70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e74:	4607      	mov	r7, r0
 8005e76:	460c      	mov	r4, r1
 8005e78:	b10a      	cbz	r2, 8005e7e <_printf_common+0x26>
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	6033      	str	r3, [r6, #0]
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	0699      	lsls	r1, r3, #26
 8005e82:	bf42      	ittt	mi
 8005e84:	6833      	ldrmi	r3, [r6, #0]
 8005e86:	3302      	addmi	r3, #2
 8005e88:	6033      	strmi	r3, [r6, #0]
 8005e8a:	6825      	ldr	r5, [r4, #0]
 8005e8c:	f015 0506 	ands.w	r5, r5, #6
 8005e90:	d106      	bne.n	8005ea0 <_printf_common+0x48>
 8005e92:	f104 0a19 	add.w	sl, r4, #25
 8005e96:	68e3      	ldr	r3, [r4, #12]
 8005e98:	6832      	ldr	r2, [r6, #0]
 8005e9a:	1a9b      	subs	r3, r3, r2
 8005e9c:	42ab      	cmp	r3, r5
 8005e9e:	dc26      	bgt.n	8005eee <_printf_common+0x96>
 8005ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ea4:	1e13      	subs	r3, r2, #0
 8005ea6:	6822      	ldr	r2, [r4, #0]
 8005ea8:	bf18      	it	ne
 8005eaa:	2301      	movne	r3, #1
 8005eac:	0692      	lsls	r2, r2, #26
 8005eae:	d42b      	bmi.n	8005f08 <_printf_common+0xb0>
 8005eb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	47c0      	blx	r8
 8005eba:	3001      	adds	r0, #1
 8005ebc:	d01e      	beq.n	8005efc <_printf_common+0xa4>
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	6922      	ldr	r2, [r4, #16]
 8005ec2:	f003 0306 	and.w	r3, r3, #6
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	bf02      	ittt	eq
 8005eca:	68e5      	ldreq	r5, [r4, #12]
 8005ecc:	6833      	ldreq	r3, [r6, #0]
 8005ece:	1aed      	subeq	r5, r5, r3
 8005ed0:	68a3      	ldr	r3, [r4, #8]
 8005ed2:	bf0c      	ite	eq
 8005ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ed8:	2500      	movne	r5, #0
 8005eda:	4293      	cmp	r3, r2
 8005edc:	bfc4      	itt	gt
 8005ede:	1a9b      	subgt	r3, r3, r2
 8005ee0:	18ed      	addgt	r5, r5, r3
 8005ee2:	2600      	movs	r6, #0
 8005ee4:	341a      	adds	r4, #26
 8005ee6:	42b5      	cmp	r5, r6
 8005ee8:	d11a      	bne.n	8005f20 <_printf_common+0xc8>
 8005eea:	2000      	movs	r0, #0
 8005eec:	e008      	b.n	8005f00 <_printf_common+0xa8>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	4652      	mov	r2, sl
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	4638      	mov	r0, r7
 8005ef6:	47c0      	blx	r8
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d103      	bne.n	8005f04 <_printf_common+0xac>
 8005efc:	f04f 30ff 	mov.w	r0, #4294967295
 8005f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f04:	3501      	adds	r5, #1
 8005f06:	e7c6      	b.n	8005e96 <_printf_common+0x3e>
 8005f08:	18e1      	adds	r1, r4, r3
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	2030      	movs	r0, #48	; 0x30
 8005f0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f12:	4422      	add	r2, r4
 8005f14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f1c:	3302      	adds	r3, #2
 8005f1e:	e7c7      	b.n	8005eb0 <_printf_common+0x58>
 8005f20:	2301      	movs	r3, #1
 8005f22:	4622      	mov	r2, r4
 8005f24:	4649      	mov	r1, r9
 8005f26:	4638      	mov	r0, r7
 8005f28:	47c0      	blx	r8
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	d0e6      	beq.n	8005efc <_printf_common+0xa4>
 8005f2e:	3601      	adds	r6, #1
 8005f30:	e7d9      	b.n	8005ee6 <_printf_common+0x8e>
	...

08005f34 <_printf_i>:
 8005f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f38:	7e0f      	ldrb	r7, [r1, #24]
 8005f3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f3c:	2f78      	cmp	r7, #120	; 0x78
 8005f3e:	4691      	mov	r9, r2
 8005f40:	4680      	mov	r8, r0
 8005f42:	460c      	mov	r4, r1
 8005f44:	469a      	mov	sl, r3
 8005f46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f4a:	d807      	bhi.n	8005f5c <_printf_i+0x28>
 8005f4c:	2f62      	cmp	r7, #98	; 0x62
 8005f4e:	d80a      	bhi.n	8005f66 <_printf_i+0x32>
 8005f50:	2f00      	cmp	r7, #0
 8005f52:	f000 80d4 	beq.w	80060fe <_printf_i+0x1ca>
 8005f56:	2f58      	cmp	r7, #88	; 0x58
 8005f58:	f000 80c0 	beq.w	80060dc <_printf_i+0x1a8>
 8005f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f64:	e03a      	b.n	8005fdc <_printf_i+0xa8>
 8005f66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f6a:	2b15      	cmp	r3, #21
 8005f6c:	d8f6      	bhi.n	8005f5c <_printf_i+0x28>
 8005f6e:	a101      	add	r1, pc, #4	; (adr r1, 8005f74 <_printf_i+0x40>)
 8005f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f74:	08005fcd 	.word	0x08005fcd
 8005f78:	08005fe1 	.word	0x08005fe1
 8005f7c:	08005f5d 	.word	0x08005f5d
 8005f80:	08005f5d 	.word	0x08005f5d
 8005f84:	08005f5d 	.word	0x08005f5d
 8005f88:	08005f5d 	.word	0x08005f5d
 8005f8c:	08005fe1 	.word	0x08005fe1
 8005f90:	08005f5d 	.word	0x08005f5d
 8005f94:	08005f5d 	.word	0x08005f5d
 8005f98:	08005f5d 	.word	0x08005f5d
 8005f9c:	08005f5d 	.word	0x08005f5d
 8005fa0:	080060e5 	.word	0x080060e5
 8005fa4:	0800600d 	.word	0x0800600d
 8005fa8:	0800609f 	.word	0x0800609f
 8005fac:	08005f5d 	.word	0x08005f5d
 8005fb0:	08005f5d 	.word	0x08005f5d
 8005fb4:	08006107 	.word	0x08006107
 8005fb8:	08005f5d 	.word	0x08005f5d
 8005fbc:	0800600d 	.word	0x0800600d
 8005fc0:	08005f5d 	.word	0x08005f5d
 8005fc4:	08005f5d 	.word	0x08005f5d
 8005fc8:	080060a7 	.word	0x080060a7
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	1d1a      	adds	r2, r3, #4
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	602a      	str	r2, [r5, #0]
 8005fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e09f      	b.n	8006120 <_printf_i+0x1ec>
 8005fe0:	6820      	ldr	r0, [r4, #0]
 8005fe2:	682b      	ldr	r3, [r5, #0]
 8005fe4:	0607      	lsls	r7, r0, #24
 8005fe6:	f103 0104 	add.w	r1, r3, #4
 8005fea:	6029      	str	r1, [r5, #0]
 8005fec:	d501      	bpl.n	8005ff2 <_printf_i+0xbe>
 8005fee:	681e      	ldr	r6, [r3, #0]
 8005ff0:	e003      	b.n	8005ffa <_printf_i+0xc6>
 8005ff2:	0646      	lsls	r6, r0, #25
 8005ff4:	d5fb      	bpl.n	8005fee <_printf_i+0xba>
 8005ff6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005ffa:	2e00      	cmp	r6, #0
 8005ffc:	da03      	bge.n	8006006 <_printf_i+0xd2>
 8005ffe:	232d      	movs	r3, #45	; 0x2d
 8006000:	4276      	negs	r6, r6
 8006002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006006:	485a      	ldr	r0, [pc, #360]	; (8006170 <_printf_i+0x23c>)
 8006008:	230a      	movs	r3, #10
 800600a:	e012      	b.n	8006032 <_printf_i+0xfe>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	6820      	ldr	r0, [r4, #0]
 8006010:	1d19      	adds	r1, r3, #4
 8006012:	6029      	str	r1, [r5, #0]
 8006014:	0605      	lsls	r5, r0, #24
 8006016:	d501      	bpl.n	800601c <_printf_i+0xe8>
 8006018:	681e      	ldr	r6, [r3, #0]
 800601a:	e002      	b.n	8006022 <_printf_i+0xee>
 800601c:	0641      	lsls	r1, r0, #25
 800601e:	d5fb      	bpl.n	8006018 <_printf_i+0xe4>
 8006020:	881e      	ldrh	r6, [r3, #0]
 8006022:	4853      	ldr	r0, [pc, #332]	; (8006170 <_printf_i+0x23c>)
 8006024:	2f6f      	cmp	r7, #111	; 0x6f
 8006026:	bf0c      	ite	eq
 8006028:	2308      	moveq	r3, #8
 800602a:	230a      	movne	r3, #10
 800602c:	2100      	movs	r1, #0
 800602e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006032:	6865      	ldr	r5, [r4, #4]
 8006034:	60a5      	str	r5, [r4, #8]
 8006036:	2d00      	cmp	r5, #0
 8006038:	bfa2      	ittt	ge
 800603a:	6821      	ldrge	r1, [r4, #0]
 800603c:	f021 0104 	bicge.w	r1, r1, #4
 8006040:	6021      	strge	r1, [r4, #0]
 8006042:	b90e      	cbnz	r6, 8006048 <_printf_i+0x114>
 8006044:	2d00      	cmp	r5, #0
 8006046:	d04b      	beq.n	80060e0 <_printf_i+0x1ac>
 8006048:	4615      	mov	r5, r2
 800604a:	fbb6 f1f3 	udiv	r1, r6, r3
 800604e:	fb03 6711 	mls	r7, r3, r1, r6
 8006052:	5dc7      	ldrb	r7, [r0, r7]
 8006054:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006058:	4637      	mov	r7, r6
 800605a:	42bb      	cmp	r3, r7
 800605c:	460e      	mov	r6, r1
 800605e:	d9f4      	bls.n	800604a <_printf_i+0x116>
 8006060:	2b08      	cmp	r3, #8
 8006062:	d10b      	bne.n	800607c <_printf_i+0x148>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	07de      	lsls	r6, r3, #31
 8006068:	d508      	bpl.n	800607c <_printf_i+0x148>
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	6861      	ldr	r1, [r4, #4]
 800606e:	4299      	cmp	r1, r3
 8006070:	bfde      	ittt	le
 8006072:	2330      	movle	r3, #48	; 0x30
 8006074:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006078:	f105 35ff 	addle.w	r5, r5, #4294967295
 800607c:	1b52      	subs	r2, r2, r5
 800607e:	6122      	str	r2, [r4, #16]
 8006080:	f8cd a000 	str.w	sl, [sp]
 8006084:	464b      	mov	r3, r9
 8006086:	aa03      	add	r2, sp, #12
 8006088:	4621      	mov	r1, r4
 800608a:	4640      	mov	r0, r8
 800608c:	f7ff fee4 	bl	8005e58 <_printf_common>
 8006090:	3001      	adds	r0, #1
 8006092:	d14a      	bne.n	800612a <_printf_i+0x1f6>
 8006094:	f04f 30ff 	mov.w	r0, #4294967295
 8006098:	b004      	add	sp, #16
 800609a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	f043 0320 	orr.w	r3, r3, #32
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	4833      	ldr	r0, [pc, #204]	; (8006174 <_printf_i+0x240>)
 80060a8:	2778      	movs	r7, #120	; 0x78
 80060aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	6829      	ldr	r1, [r5, #0]
 80060b2:	061f      	lsls	r7, r3, #24
 80060b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80060b8:	d402      	bmi.n	80060c0 <_printf_i+0x18c>
 80060ba:	065f      	lsls	r7, r3, #25
 80060bc:	bf48      	it	mi
 80060be:	b2b6      	uxthmi	r6, r6
 80060c0:	07df      	lsls	r7, r3, #31
 80060c2:	bf48      	it	mi
 80060c4:	f043 0320 	orrmi.w	r3, r3, #32
 80060c8:	6029      	str	r1, [r5, #0]
 80060ca:	bf48      	it	mi
 80060cc:	6023      	strmi	r3, [r4, #0]
 80060ce:	b91e      	cbnz	r6, 80060d8 <_printf_i+0x1a4>
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	f023 0320 	bic.w	r3, r3, #32
 80060d6:	6023      	str	r3, [r4, #0]
 80060d8:	2310      	movs	r3, #16
 80060da:	e7a7      	b.n	800602c <_printf_i+0xf8>
 80060dc:	4824      	ldr	r0, [pc, #144]	; (8006170 <_printf_i+0x23c>)
 80060de:	e7e4      	b.n	80060aa <_printf_i+0x176>
 80060e0:	4615      	mov	r5, r2
 80060e2:	e7bd      	b.n	8006060 <_printf_i+0x12c>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	6826      	ldr	r6, [r4, #0]
 80060e8:	6961      	ldr	r1, [r4, #20]
 80060ea:	1d18      	adds	r0, r3, #4
 80060ec:	6028      	str	r0, [r5, #0]
 80060ee:	0635      	lsls	r5, r6, #24
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	d501      	bpl.n	80060f8 <_printf_i+0x1c4>
 80060f4:	6019      	str	r1, [r3, #0]
 80060f6:	e002      	b.n	80060fe <_printf_i+0x1ca>
 80060f8:	0670      	lsls	r0, r6, #25
 80060fa:	d5fb      	bpl.n	80060f4 <_printf_i+0x1c0>
 80060fc:	8019      	strh	r1, [r3, #0]
 80060fe:	2300      	movs	r3, #0
 8006100:	6123      	str	r3, [r4, #16]
 8006102:	4615      	mov	r5, r2
 8006104:	e7bc      	b.n	8006080 <_printf_i+0x14c>
 8006106:	682b      	ldr	r3, [r5, #0]
 8006108:	1d1a      	adds	r2, r3, #4
 800610a:	602a      	str	r2, [r5, #0]
 800610c:	681d      	ldr	r5, [r3, #0]
 800610e:	6862      	ldr	r2, [r4, #4]
 8006110:	2100      	movs	r1, #0
 8006112:	4628      	mov	r0, r5
 8006114:	f7fa f85c 	bl	80001d0 <memchr>
 8006118:	b108      	cbz	r0, 800611e <_printf_i+0x1ea>
 800611a:	1b40      	subs	r0, r0, r5
 800611c:	6060      	str	r0, [r4, #4]
 800611e:	6863      	ldr	r3, [r4, #4]
 8006120:	6123      	str	r3, [r4, #16]
 8006122:	2300      	movs	r3, #0
 8006124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006128:	e7aa      	b.n	8006080 <_printf_i+0x14c>
 800612a:	6923      	ldr	r3, [r4, #16]
 800612c:	462a      	mov	r2, r5
 800612e:	4649      	mov	r1, r9
 8006130:	4640      	mov	r0, r8
 8006132:	47d0      	blx	sl
 8006134:	3001      	adds	r0, #1
 8006136:	d0ad      	beq.n	8006094 <_printf_i+0x160>
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	079b      	lsls	r3, r3, #30
 800613c:	d413      	bmi.n	8006166 <_printf_i+0x232>
 800613e:	68e0      	ldr	r0, [r4, #12]
 8006140:	9b03      	ldr	r3, [sp, #12]
 8006142:	4298      	cmp	r0, r3
 8006144:	bfb8      	it	lt
 8006146:	4618      	movlt	r0, r3
 8006148:	e7a6      	b.n	8006098 <_printf_i+0x164>
 800614a:	2301      	movs	r3, #1
 800614c:	4632      	mov	r2, r6
 800614e:	4649      	mov	r1, r9
 8006150:	4640      	mov	r0, r8
 8006152:	47d0      	blx	sl
 8006154:	3001      	adds	r0, #1
 8006156:	d09d      	beq.n	8006094 <_printf_i+0x160>
 8006158:	3501      	adds	r5, #1
 800615a:	68e3      	ldr	r3, [r4, #12]
 800615c:	9903      	ldr	r1, [sp, #12]
 800615e:	1a5b      	subs	r3, r3, r1
 8006160:	42ab      	cmp	r3, r5
 8006162:	dcf2      	bgt.n	800614a <_printf_i+0x216>
 8006164:	e7eb      	b.n	800613e <_printf_i+0x20a>
 8006166:	2500      	movs	r5, #0
 8006168:	f104 0619 	add.w	r6, r4, #25
 800616c:	e7f5      	b.n	800615a <_printf_i+0x226>
 800616e:	bf00      	nop
 8006170:	080078c0 	.word	0x080078c0
 8006174:	080078d1 	.word	0x080078d1

08006178 <__swbuf_r>:
 8006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617a:	460e      	mov	r6, r1
 800617c:	4614      	mov	r4, r2
 800617e:	4605      	mov	r5, r0
 8006180:	b118      	cbz	r0, 800618a <__swbuf_r+0x12>
 8006182:	6a03      	ldr	r3, [r0, #32]
 8006184:	b90b      	cbnz	r3, 800618a <__swbuf_r+0x12>
 8006186:	f7ff fa39 	bl	80055fc <__sinit>
 800618a:	69a3      	ldr	r3, [r4, #24]
 800618c:	60a3      	str	r3, [r4, #8]
 800618e:	89a3      	ldrh	r3, [r4, #12]
 8006190:	071a      	lsls	r2, r3, #28
 8006192:	d525      	bpl.n	80061e0 <__swbuf_r+0x68>
 8006194:	6923      	ldr	r3, [r4, #16]
 8006196:	b31b      	cbz	r3, 80061e0 <__swbuf_r+0x68>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	6922      	ldr	r2, [r4, #16]
 800619c:	1a98      	subs	r0, r3, r2
 800619e:	6963      	ldr	r3, [r4, #20]
 80061a0:	b2f6      	uxtb	r6, r6
 80061a2:	4283      	cmp	r3, r0
 80061a4:	4637      	mov	r7, r6
 80061a6:	dc04      	bgt.n	80061b2 <__swbuf_r+0x3a>
 80061a8:	4621      	mov	r1, r4
 80061aa:	4628      	mov	r0, r5
 80061ac:	f7ff fcc0 	bl	8005b30 <_fflush_r>
 80061b0:	b9e0      	cbnz	r0, 80061ec <__swbuf_r+0x74>
 80061b2:	68a3      	ldr	r3, [r4, #8]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	60a3      	str	r3, [r4, #8]
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	6022      	str	r2, [r4, #0]
 80061be:	701e      	strb	r6, [r3, #0]
 80061c0:	6962      	ldr	r2, [r4, #20]
 80061c2:	1c43      	adds	r3, r0, #1
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d004      	beq.n	80061d2 <__swbuf_r+0x5a>
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	07db      	lsls	r3, r3, #31
 80061cc:	d506      	bpl.n	80061dc <__swbuf_r+0x64>
 80061ce:	2e0a      	cmp	r6, #10
 80061d0:	d104      	bne.n	80061dc <__swbuf_r+0x64>
 80061d2:	4621      	mov	r1, r4
 80061d4:	4628      	mov	r0, r5
 80061d6:	f7ff fcab 	bl	8005b30 <_fflush_r>
 80061da:	b938      	cbnz	r0, 80061ec <__swbuf_r+0x74>
 80061dc:	4638      	mov	r0, r7
 80061de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061e0:	4621      	mov	r1, r4
 80061e2:	4628      	mov	r0, r5
 80061e4:	f000 f806 	bl	80061f4 <__swsetup_r>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d0d5      	beq.n	8006198 <__swbuf_r+0x20>
 80061ec:	f04f 37ff 	mov.w	r7, #4294967295
 80061f0:	e7f4      	b.n	80061dc <__swbuf_r+0x64>
	...

080061f4 <__swsetup_r>:
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	4b2a      	ldr	r3, [pc, #168]	; (80062a0 <__swsetup_r+0xac>)
 80061f8:	4605      	mov	r5, r0
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	460c      	mov	r4, r1
 80061fe:	b118      	cbz	r0, 8006208 <__swsetup_r+0x14>
 8006200:	6a03      	ldr	r3, [r0, #32]
 8006202:	b90b      	cbnz	r3, 8006208 <__swsetup_r+0x14>
 8006204:	f7ff f9fa 	bl	80055fc <__sinit>
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800620e:	0718      	lsls	r0, r3, #28
 8006210:	d422      	bmi.n	8006258 <__swsetup_r+0x64>
 8006212:	06d9      	lsls	r1, r3, #27
 8006214:	d407      	bmi.n	8006226 <__swsetup_r+0x32>
 8006216:	2309      	movs	r3, #9
 8006218:	602b      	str	r3, [r5, #0]
 800621a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800621e:	81a3      	strh	r3, [r4, #12]
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	e034      	b.n	8006290 <__swsetup_r+0x9c>
 8006226:	0758      	lsls	r0, r3, #29
 8006228:	d512      	bpl.n	8006250 <__swsetup_r+0x5c>
 800622a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800622c:	b141      	cbz	r1, 8006240 <__swsetup_r+0x4c>
 800622e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006232:	4299      	cmp	r1, r3
 8006234:	d002      	beq.n	800623c <__swsetup_r+0x48>
 8006236:	4628      	mov	r0, r5
 8006238:	f7ff faf4 	bl	8005824 <_free_r>
 800623c:	2300      	movs	r3, #0
 800623e:	6363      	str	r3, [r4, #52]	; 0x34
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006246:	81a3      	strh	r3, [r4, #12]
 8006248:	2300      	movs	r3, #0
 800624a:	6063      	str	r3, [r4, #4]
 800624c:	6923      	ldr	r3, [r4, #16]
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	f043 0308 	orr.w	r3, r3, #8
 8006256:	81a3      	strh	r3, [r4, #12]
 8006258:	6923      	ldr	r3, [r4, #16]
 800625a:	b94b      	cbnz	r3, 8006270 <__swsetup_r+0x7c>
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006266:	d003      	beq.n	8006270 <__swsetup_r+0x7c>
 8006268:	4621      	mov	r1, r4
 800626a:	4628      	mov	r0, r5
 800626c:	f000 f884 	bl	8006378 <__smakebuf_r>
 8006270:	89a0      	ldrh	r0, [r4, #12]
 8006272:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006276:	f010 0301 	ands.w	r3, r0, #1
 800627a:	d00a      	beq.n	8006292 <__swsetup_r+0x9e>
 800627c:	2300      	movs	r3, #0
 800627e:	60a3      	str	r3, [r4, #8]
 8006280:	6963      	ldr	r3, [r4, #20]
 8006282:	425b      	negs	r3, r3
 8006284:	61a3      	str	r3, [r4, #24]
 8006286:	6923      	ldr	r3, [r4, #16]
 8006288:	b943      	cbnz	r3, 800629c <__swsetup_r+0xa8>
 800628a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800628e:	d1c4      	bne.n	800621a <__swsetup_r+0x26>
 8006290:	bd38      	pop	{r3, r4, r5, pc}
 8006292:	0781      	lsls	r1, r0, #30
 8006294:	bf58      	it	pl
 8006296:	6963      	ldrpl	r3, [r4, #20]
 8006298:	60a3      	str	r3, [r4, #8]
 800629a:	e7f4      	b.n	8006286 <__swsetup_r+0x92>
 800629c:	2000      	movs	r0, #0
 800629e:	e7f7      	b.n	8006290 <__swsetup_r+0x9c>
 80062a0:	20000064 	.word	0x20000064

080062a4 <_raise_r>:
 80062a4:	291f      	cmp	r1, #31
 80062a6:	b538      	push	{r3, r4, r5, lr}
 80062a8:	4604      	mov	r4, r0
 80062aa:	460d      	mov	r5, r1
 80062ac:	d904      	bls.n	80062b8 <_raise_r+0x14>
 80062ae:	2316      	movs	r3, #22
 80062b0:	6003      	str	r3, [r0, #0]
 80062b2:	f04f 30ff 	mov.w	r0, #4294967295
 80062b6:	bd38      	pop	{r3, r4, r5, pc}
 80062b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80062ba:	b112      	cbz	r2, 80062c2 <_raise_r+0x1e>
 80062bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062c0:	b94b      	cbnz	r3, 80062d6 <_raise_r+0x32>
 80062c2:	4620      	mov	r0, r4
 80062c4:	f000 f830 	bl	8006328 <_getpid_r>
 80062c8:	462a      	mov	r2, r5
 80062ca:	4601      	mov	r1, r0
 80062cc:	4620      	mov	r0, r4
 80062ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062d2:	f000 b817 	b.w	8006304 <_kill_r>
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d00a      	beq.n	80062f0 <_raise_r+0x4c>
 80062da:	1c59      	adds	r1, r3, #1
 80062dc:	d103      	bne.n	80062e6 <_raise_r+0x42>
 80062de:	2316      	movs	r3, #22
 80062e0:	6003      	str	r3, [r0, #0]
 80062e2:	2001      	movs	r0, #1
 80062e4:	e7e7      	b.n	80062b6 <_raise_r+0x12>
 80062e6:	2400      	movs	r4, #0
 80062e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80062ec:	4628      	mov	r0, r5
 80062ee:	4798      	blx	r3
 80062f0:	2000      	movs	r0, #0
 80062f2:	e7e0      	b.n	80062b6 <_raise_r+0x12>

080062f4 <raise>:
 80062f4:	4b02      	ldr	r3, [pc, #8]	; (8006300 <raise+0xc>)
 80062f6:	4601      	mov	r1, r0
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	f7ff bfd3 	b.w	80062a4 <_raise_r>
 80062fe:	bf00      	nop
 8006300:	20000064 	.word	0x20000064

08006304 <_kill_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4d07      	ldr	r5, [pc, #28]	; (8006324 <_kill_r+0x20>)
 8006308:	2300      	movs	r3, #0
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	4611      	mov	r1, r2
 8006310:	602b      	str	r3, [r5, #0]
 8006312:	f7fb ff1b 	bl	800214c <_kill>
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	d102      	bne.n	8006320 <_kill_r+0x1c>
 800631a:	682b      	ldr	r3, [r5, #0]
 800631c:	b103      	cbz	r3, 8006320 <_kill_r+0x1c>
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	bd38      	pop	{r3, r4, r5, pc}
 8006322:	bf00      	nop
 8006324:	2000130c 	.word	0x2000130c

08006328 <_getpid_r>:
 8006328:	f7fb bf08 	b.w	800213c <_getpid>

0800632c <__swhatbuf_r>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	460c      	mov	r4, r1
 8006330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006334:	2900      	cmp	r1, #0
 8006336:	b096      	sub	sp, #88	; 0x58
 8006338:	4615      	mov	r5, r2
 800633a:	461e      	mov	r6, r3
 800633c:	da0d      	bge.n	800635a <__swhatbuf_r+0x2e>
 800633e:	89a3      	ldrh	r3, [r4, #12]
 8006340:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006344:	f04f 0100 	mov.w	r1, #0
 8006348:	bf0c      	ite	eq
 800634a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800634e:	2340      	movne	r3, #64	; 0x40
 8006350:	2000      	movs	r0, #0
 8006352:	6031      	str	r1, [r6, #0]
 8006354:	602b      	str	r3, [r5, #0]
 8006356:	b016      	add	sp, #88	; 0x58
 8006358:	bd70      	pop	{r4, r5, r6, pc}
 800635a:	466a      	mov	r2, sp
 800635c:	f000 f848 	bl	80063f0 <_fstat_r>
 8006360:	2800      	cmp	r0, #0
 8006362:	dbec      	blt.n	800633e <__swhatbuf_r+0x12>
 8006364:	9901      	ldr	r1, [sp, #4]
 8006366:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800636a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800636e:	4259      	negs	r1, r3
 8006370:	4159      	adcs	r1, r3
 8006372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006376:	e7eb      	b.n	8006350 <__swhatbuf_r+0x24>

08006378 <__smakebuf_r>:
 8006378:	898b      	ldrh	r3, [r1, #12]
 800637a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800637c:	079d      	lsls	r5, r3, #30
 800637e:	4606      	mov	r6, r0
 8006380:	460c      	mov	r4, r1
 8006382:	d507      	bpl.n	8006394 <__smakebuf_r+0x1c>
 8006384:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	6123      	str	r3, [r4, #16]
 800638c:	2301      	movs	r3, #1
 800638e:	6163      	str	r3, [r4, #20]
 8006390:	b002      	add	sp, #8
 8006392:	bd70      	pop	{r4, r5, r6, pc}
 8006394:	ab01      	add	r3, sp, #4
 8006396:	466a      	mov	r2, sp
 8006398:	f7ff ffc8 	bl	800632c <__swhatbuf_r>
 800639c:	9900      	ldr	r1, [sp, #0]
 800639e:	4605      	mov	r5, r0
 80063a0:	4630      	mov	r0, r6
 80063a2:	f7ff fab3 	bl	800590c <_malloc_r>
 80063a6:	b948      	cbnz	r0, 80063bc <__smakebuf_r+0x44>
 80063a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ac:	059a      	lsls	r2, r3, #22
 80063ae:	d4ef      	bmi.n	8006390 <__smakebuf_r+0x18>
 80063b0:	f023 0303 	bic.w	r3, r3, #3
 80063b4:	f043 0302 	orr.w	r3, r3, #2
 80063b8:	81a3      	strh	r3, [r4, #12]
 80063ba:	e7e3      	b.n	8006384 <__smakebuf_r+0xc>
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	6020      	str	r0, [r4, #0]
 80063c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c4:	81a3      	strh	r3, [r4, #12]
 80063c6:	9b00      	ldr	r3, [sp, #0]
 80063c8:	6163      	str	r3, [r4, #20]
 80063ca:	9b01      	ldr	r3, [sp, #4]
 80063cc:	6120      	str	r0, [r4, #16]
 80063ce:	b15b      	cbz	r3, 80063e8 <__smakebuf_r+0x70>
 80063d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063d4:	4630      	mov	r0, r6
 80063d6:	f000 f81d 	bl	8006414 <_isatty_r>
 80063da:	b128      	cbz	r0, 80063e8 <__smakebuf_r+0x70>
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	f023 0303 	bic.w	r3, r3, #3
 80063e2:	f043 0301 	orr.w	r3, r3, #1
 80063e6:	81a3      	strh	r3, [r4, #12]
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	431d      	orrs	r5, r3
 80063ec:	81a5      	strh	r5, [r4, #12]
 80063ee:	e7cf      	b.n	8006390 <__smakebuf_r+0x18>

080063f0 <_fstat_r>:
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	4d07      	ldr	r5, [pc, #28]	; (8006410 <_fstat_r+0x20>)
 80063f4:	2300      	movs	r3, #0
 80063f6:	4604      	mov	r4, r0
 80063f8:	4608      	mov	r0, r1
 80063fa:	4611      	mov	r1, r2
 80063fc:	602b      	str	r3, [r5, #0]
 80063fe:	f7fb ff04 	bl	800220a <_fstat>
 8006402:	1c43      	adds	r3, r0, #1
 8006404:	d102      	bne.n	800640c <_fstat_r+0x1c>
 8006406:	682b      	ldr	r3, [r5, #0]
 8006408:	b103      	cbz	r3, 800640c <_fstat_r+0x1c>
 800640a:	6023      	str	r3, [r4, #0]
 800640c:	bd38      	pop	{r3, r4, r5, pc}
 800640e:	bf00      	nop
 8006410:	2000130c 	.word	0x2000130c

08006414 <_isatty_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	4d06      	ldr	r5, [pc, #24]	; (8006430 <_isatty_r+0x1c>)
 8006418:	2300      	movs	r3, #0
 800641a:	4604      	mov	r4, r0
 800641c:	4608      	mov	r0, r1
 800641e:	602b      	str	r3, [r5, #0]
 8006420:	f7fb ff03 	bl	800222a <_isatty>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d102      	bne.n	800642e <_isatty_r+0x1a>
 8006428:	682b      	ldr	r3, [r5, #0]
 800642a:	b103      	cbz	r3, 800642e <_isatty_r+0x1a>
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	bd38      	pop	{r3, r4, r5, pc}
 8006430:	2000130c 	.word	0x2000130c

08006434 <sqrt>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	ed2d 8b02 	vpush	{d8}
 800643a:	ec55 4b10 	vmov	r4, r5, d0
 800643e:	f000 f8d3 	bl	80065e8 <__ieee754_sqrt>
 8006442:	4622      	mov	r2, r4
 8006444:	462b      	mov	r3, r5
 8006446:	4620      	mov	r0, r4
 8006448:	4629      	mov	r1, r5
 800644a:	eeb0 8a40 	vmov.f32	s16, s0
 800644e:	eef0 8a60 	vmov.f32	s17, s1
 8006452:	f7fa fb63 	bl	8000b1c <__aeabi_dcmpun>
 8006456:	b990      	cbnz	r0, 800647e <sqrt+0x4a>
 8006458:	2200      	movs	r2, #0
 800645a:	2300      	movs	r3, #0
 800645c:	4620      	mov	r0, r4
 800645e:	4629      	mov	r1, r5
 8006460:	f7fa fb34 	bl	8000acc <__aeabi_dcmplt>
 8006464:	b158      	cbz	r0, 800647e <sqrt+0x4a>
 8006466:	f7ff f991 	bl	800578c <__errno>
 800646a:	2321      	movs	r3, #33	; 0x21
 800646c:	6003      	str	r3, [r0, #0]
 800646e:	2200      	movs	r2, #0
 8006470:	2300      	movs	r3, #0
 8006472:	4610      	mov	r0, r2
 8006474:	4619      	mov	r1, r3
 8006476:	f7fa f9e1 	bl	800083c <__aeabi_ddiv>
 800647a:	ec41 0b18 	vmov	d8, r0, r1
 800647e:	eeb0 0a48 	vmov.f32	s0, s16
 8006482:	eef0 0a68 	vmov.f32	s1, s17
 8006486:	ecbd 8b02 	vpop	{d8}
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	0000      	movs	r0, r0
	...

08006490 <cos>:
 8006490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006492:	ec53 2b10 	vmov	r2, r3, d0
 8006496:	4826      	ldr	r0, [pc, #152]	; (8006530 <cos+0xa0>)
 8006498:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800649c:	4281      	cmp	r1, r0
 800649e:	dc06      	bgt.n	80064ae <cos+0x1e>
 80064a0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006528 <cos+0x98>
 80064a4:	b005      	add	sp, #20
 80064a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80064aa:	f000 b979 	b.w	80067a0 <__kernel_cos>
 80064ae:	4821      	ldr	r0, [pc, #132]	; (8006534 <cos+0xa4>)
 80064b0:	4281      	cmp	r1, r0
 80064b2:	dd09      	ble.n	80064c8 <cos+0x38>
 80064b4:	ee10 0a10 	vmov	r0, s0
 80064b8:	4619      	mov	r1, r3
 80064ba:	f7f9 fedd 	bl	8000278 <__aeabi_dsub>
 80064be:	ec41 0b10 	vmov	d0, r0, r1
 80064c2:	b005      	add	sp, #20
 80064c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80064c8:	4668      	mov	r0, sp
 80064ca:	f000 faf1 	bl	8006ab0 <__ieee754_rem_pio2>
 80064ce:	f000 0003 	and.w	r0, r0, #3
 80064d2:	2801      	cmp	r0, #1
 80064d4:	d00b      	beq.n	80064ee <cos+0x5e>
 80064d6:	2802      	cmp	r0, #2
 80064d8:	d016      	beq.n	8006508 <cos+0x78>
 80064da:	b9e0      	cbnz	r0, 8006516 <cos+0x86>
 80064dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064e0:	ed9d 0b00 	vldr	d0, [sp]
 80064e4:	f000 f95c 	bl	80067a0 <__kernel_cos>
 80064e8:	ec51 0b10 	vmov	r0, r1, d0
 80064ec:	e7e7      	b.n	80064be <cos+0x2e>
 80064ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064f2:	ed9d 0b00 	vldr	d0, [sp]
 80064f6:	f000 fa1b 	bl	8006930 <__kernel_sin>
 80064fa:	ec53 2b10 	vmov	r2, r3, d0
 80064fe:	ee10 0a10 	vmov	r0, s0
 8006502:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006506:	e7da      	b.n	80064be <cos+0x2e>
 8006508:	ed9d 1b02 	vldr	d1, [sp, #8]
 800650c:	ed9d 0b00 	vldr	d0, [sp]
 8006510:	f000 f946 	bl	80067a0 <__kernel_cos>
 8006514:	e7f1      	b.n	80064fa <cos+0x6a>
 8006516:	ed9d 1b02 	vldr	d1, [sp, #8]
 800651a:	ed9d 0b00 	vldr	d0, [sp]
 800651e:	2001      	movs	r0, #1
 8006520:	f000 fa06 	bl	8006930 <__kernel_sin>
 8006524:	e7e0      	b.n	80064e8 <cos+0x58>
 8006526:	bf00      	nop
	...
 8006530:	3fe921fb 	.word	0x3fe921fb
 8006534:	7fefffff 	.word	0x7fefffff

08006538 <sin>:
 8006538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800653a:	ec53 2b10 	vmov	r2, r3, d0
 800653e:	4828      	ldr	r0, [pc, #160]	; (80065e0 <sin+0xa8>)
 8006540:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006544:	4281      	cmp	r1, r0
 8006546:	dc07      	bgt.n	8006558 <sin+0x20>
 8006548:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80065d8 <sin+0xa0>
 800654c:	2000      	movs	r0, #0
 800654e:	b005      	add	sp, #20
 8006550:	f85d eb04 	ldr.w	lr, [sp], #4
 8006554:	f000 b9ec 	b.w	8006930 <__kernel_sin>
 8006558:	4822      	ldr	r0, [pc, #136]	; (80065e4 <sin+0xac>)
 800655a:	4281      	cmp	r1, r0
 800655c:	dd09      	ble.n	8006572 <sin+0x3a>
 800655e:	ee10 0a10 	vmov	r0, s0
 8006562:	4619      	mov	r1, r3
 8006564:	f7f9 fe88 	bl	8000278 <__aeabi_dsub>
 8006568:	ec41 0b10 	vmov	d0, r0, r1
 800656c:	b005      	add	sp, #20
 800656e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006572:	4668      	mov	r0, sp
 8006574:	f000 fa9c 	bl	8006ab0 <__ieee754_rem_pio2>
 8006578:	f000 0003 	and.w	r0, r0, #3
 800657c:	2801      	cmp	r0, #1
 800657e:	d00c      	beq.n	800659a <sin+0x62>
 8006580:	2802      	cmp	r0, #2
 8006582:	d011      	beq.n	80065a8 <sin+0x70>
 8006584:	b9f0      	cbnz	r0, 80065c4 <sin+0x8c>
 8006586:	ed9d 1b02 	vldr	d1, [sp, #8]
 800658a:	ed9d 0b00 	vldr	d0, [sp]
 800658e:	2001      	movs	r0, #1
 8006590:	f000 f9ce 	bl	8006930 <__kernel_sin>
 8006594:	ec51 0b10 	vmov	r0, r1, d0
 8006598:	e7e6      	b.n	8006568 <sin+0x30>
 800659a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800659e:	ed9d 0b00 	vldr	d0, [sp]
 80065a2:	f000 f8fd 	bl	80067a0 <__kernel_cos>
 80065a6:	e7f5      	b.n	8006594 <sin+0x5c>
 80065a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065ac:	ed9d 0b00 	vldr	d0, [sp]
 80065b0:	2001      	movs	r0, #1
 80065b2:	f000 f9bd 	bl	8006930 <__kernel_sin>
 80065b6:	ec53 2b10 	vmov	r2, r3, d0
 80065ba:	ee10 0a10 	vmov	r0, s0
 80065be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80065c2:	e7d1      	b.n	8006568 <sin+0x30>
 80065c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065c8:	ed9d 0b00 	vldr	d0, [sp]
 80065cc:	f000 f8e8 	bl	80067a0 <__kernel_cos>
 80065d0:	e7f1      	b.n	80065b6 <sin+0x7e>
 80065d2:	bf00      	nop
 80065d4:	f3af 8000 	nop.w
	...
 80065e0:	3fe921fb 	.word	0x3fe921fb
 80065e4:	7fefffff 	.word	0x7fefffff

080065e8 <__ieee754_sqrt>:
 80065e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ec:	ec55 4b10 	vmov	r4, r5, d0
 80065f0:	4e67      	ldr	r6, [pc, #412]	; (8006790 <__ieee754_sqrt+0x1a8>)
 80065f2:	43ae      	bics	r6, r5
 80065f4:	ee10 0a10 	vmov	r0, s0
 80065f8:	ee10 2a10 	vmov	r2, s0
 80065fc:	4629      	mov	r1, r5
 80065fe:	462b      	mov	r3, r5
 8006600:	d10d      	bne.n	800661e <__ieee754_sqrt+0x36>
 8006602:	f7f9 fff1 	bl	80005e8 <__aeabi_dmul>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	4620      	mov	r0, r4
 800660c:	4629      	mov	r1, r5
 800660e:	f7f9 fe35 	bl	800027c <__adddf3>
 8006612:	4604      	mov	r4, r0
 8006614:	460d      	mov	r5, r1
 8006616:	ec45 4b10 	vmov	d0, r4, r5
 800661a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661e:	2d00      	cmp	r5, #0
 8006620:	dc0b      	bgt.n	800663a <__ieee754_sqrt+0x52>
 8006622:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006626:	4326      	orrs	r6, r4
 8006628:	d0f5      	beq.n	8006616 <__ieee754_sqrt+0x2e>
 800662a:	b135      	cbz	r5, 800663a <__ieee754_sqrt+0x52>
 800662c:	f7f9 fe24 	bl	8000278 <__aeabi_dsub>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	f7fa f902 	bl	800083c <__aeabi_ddiv>
 8006638:	e7eb      	b.n	8006612 <__ieee754_sqrt+0x2a>
 800663a:	1509      	asrs	r1, r1, #20
 800663c:	f000 808d 	beq.w	800675a <__ieee754_sqrt+0x172>
 8006640:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006644:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8006648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800664c:	07c9      	lsls	r1, r1, #31
 800664e:	bf5c      	itt	pl
 8006650:	005b      	lslpl	r3, r3, #1
 8006652:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8006656:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800665a:	bf58      	it	pl
 800665c:	0052      	lslpl	r2, r2, #1
 800665e:	2500      	movs	r5, #0
 8006660:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006664:	1076      	asrs	r6, r6, #1
 8006666:	0052      	lsls	r2, r2, #1
 8006668:	f04f 0e16 	mov.w	lr, #22
 800666c:	46ac      	mov	ip, r5
 800666e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006672:	eb0c 0001 	add.w	r0, ip, r1
 8006676:	4298      	cmp	r0, r3
 8006678:	bfde      	ittt	le
 800667a:	1a1b      	suble	r3, r3, r0
 800667c:	eb00 0c01 	addle.w	ip, r0, r1
 8006680:	186d      	addle	r5, r5, r1
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	f1be 0e01 	subs.w	lr, lr, #1
 8006688:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800668c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006690:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006694:	d1ed      	bne.n	8006672 <__ieee754_sqrt+0x8a>
 8006696:	4674      	mov	r4, lr
 8006698:	2720      	movs	r7, #32
 800669a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800669e:	4563      	cmp	r3, ip
 80066a0:	eb01 000e 	add.w	r0, r1, lr
 80066a4:	dc02      	bgt.n	80066ac <__ieee754_sqrt+0xc4>
 80066a6:	d113      	bne.n	80066d0 <__ieee754_sqrt+0xe8>
 80066a8:	4290      	cmp	r0, r2
 80066aa:	d811      	bhi.n	80066d0 <__ieee754_sqrt+0xe8>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	eb00 0e01 	add.w	lr, r0, r1
 80066b2:	da57      	bge.n	8006764 <__ieee754_sqrt+0x17c>
 80066b4:	f1be 0f00 	cmp.w	lr, #0
 80066b8:	db54      	blt.n	8006764 <__ieee754_sqrt+0x17c>
 80066ba:	f10c 0801 	add.w	r8, ip, #1
 80066be:	eba3 030c 	sub.w	r3, r3, ip
 80066c2:	4290      	cmp	r0, r2
 80066c4:	bf88      	it	hi
 80066c6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80066ca:	1a12      	subs	r2, r2, r0
 80066cc:	440c      	add	r4, r1
 80066ce:	46c4      	mov	ip, r8
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	3f01      	subs	r7, #1
 80066d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80066d8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80066dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80066e0:	d1dd      	bne.n	800669e <__ieee754_sqrt+0xb6>
 80066e2:	4313      	orrs	r3, r2
 80066e4:	d01b      	beq.n	800671e <__ieee754_sqrt+0x136>
 80066e6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006794 <__ieee754_sqrt+0x1ac>
 80066ea:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8006798 <__ieee754_sqrt+0x1b0>
 80066ee:	e9da 0100 	ldrd	r0, r1, [sl]
 80066f2:	e9db 2300 	ldrd	r2, r3, [fp]
 80066f6:	f7f9 fdbf 	bl	8000278 <__aeabi_dsub>
 80066fa:	e9da 8900 	ldrd	r8, r9, [sl]
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4640      	mov	r0, r8
 8006704:	4649      	mov	r1, r9
 8006706:	f7fa f9eb 	bl	8000ae0 <__aeabi_dcmple>
 800670a:	b140      	cbz	r0, 800671e <__ieee754_sqrt+0x136>
 800670c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006710:	e9da 0100 	ldrd	r0, r1, [sl]
 8006714:	e9db 2300 	ldrd	r2, r3, [fp]
 8006718:	d126      	bne.n	8006768 <__ieee754_sqrt+0x180>
 800671a:	3501      	adds	r5, #1
 800671c:	463c      	mov	r4, r7
 800671e:	106a      	asrs	r2, r5, #1
 8006720:	0863      	lsrs	r3, r4, #1
 8006722:	07e9      	lsls	r1, r5, #31
 8006724:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006728:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800672c:	bf48      	it	mi
 800672e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006732:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8006736:	461c      	mov	r4, r3
 8006738:	e76d      	b.n	8006616 <__ieee754_sqrt+0x2e>
 800673a:	0ad3      	lsrs	r3, r2, #11
 800673c:	3815      	subs	r0, #21
 800673e:	0552      	lsls	r2, r2, #21
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0fa      	beq.n	800673a <__ieee754_sqrt+0x152>
 8006744:	02dc      	lsls	r4, r3, #11
 8006746:	d50a      	bpl.n	800675e <__ieee754_sqrt+0x176>
 8006748:	f1c1 0420 	rsb	r4, r1, #32
 800674c:	fa22 f404 	lsr.w	r4, r2, r4
 8006750:	1e4d      	subs	r5, r1, #1
 8006752:	408a      	lsls	r2, r1
 8006754:	4323      	orrs	r3, r4
 8006756:	1b41      	subs	r1, r0, r5
 8006758:	e772      	b.n	8006640 <__ieee754_sqrt+0x58>
 800675a:	4608      	mov	r0, r1
 800675c:	e7f0      	b.n	8006740 <__ieee754_sqrt+0x158>
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	3101      	adds	r1, #1
 8006762:	e7ef      	b.n	8006744 <__ieee754_sqrt+0x15c>
 8006764:	46e0      	mov	r8, ip
 8006766:	e7aa      	b.n	80066be <__ieee754_sqrt+0xd6>
 8006768:	f7f9 fd88 	bl	800027c <__adddf3>
 800676c:	e9da 8900 	ldrd	r8, r9, [sl]
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4640      	mov	r0, r8
 8006776:	4649      	mov	r1, r9
 8006778:	f7fa f9a8 	bl	8000acc <__aeabi_dcmplt>
 800677c:	b120      	cbz	r0, 8006788 <__ieee754_sqrt+0x1a0>
 800677e:	1ca0      	adds	r0, r4, #2
 8006780:	bf08      	it	eq
 8006782:	3501      	addeq	r5, #1
 8006784:	3402      	adds	r4, #2
 8006786:	e7ca      	b.n	800671e <__ieee754_sqrt+0x136>
 8006788:	3401      	adds	r4, #1
 800678a:	f024 0401 	bic.w	r4, r4, #1
 800678e:	e7c6      	b.n	800671e <__ieee754_sqrt+0x136>
 8006790:	7ff00000 	.word	0x7ff00000
 8006794:	20000068 	.word	0x20000068
 8006798:	20000070 	.word	0x20000070
 800679c:	00000000 	.word	0x00000000

080067a0 <__kernel_cos>:
 80067a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a4:	ec57 6b10 	vmov	r6, r7, d0
 80067a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80067ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80067b0:	ed8d 1b00 	vstr	d1, [sp]
 80067b4:	da07      	bge.n	80067c6 <__kernel_cos+0x26>
 80067b6:	ee10 0a10 	vmov	r0, s0
 80067ba:	4639      	mov	r1, r7
 80067bc:	f7fa f9c4 	bl	8000b48 <__aeabi_d2iz>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	f000 8088 	beq.w	80068d6 <__kernel_cos+0x136>
 80067c6:	4632      	mov	r2, r6
 80067c8:	463b      	mov	r3, r7
 80067ca:	4630      	mov	r0, r6
 80067cc:	4639      	mov	r1, r7
 80067ce:	f7f9 ff0b 	bl	80005e8 <__aeabi_dmul>
 80067d2:	4b51      	ldr	r3, [pc, #324]	; (8006918 <__kernel_cos+0x178>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	4604      	mov	r4, r0
 80067d8:	460d      	mov	r5, r1
 80067da:	f7f9 ff05 	bl	80005e8 <__aeabi_dmul>
 80067de:	a340      	add	r3, pc, #256	; (adr r3, 80068e0 <__kernel_cos+0x140>)
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	4682      	mov	sl, r0
 80067e6:	468b      	mov	fp, r1
 80067e8:	4620      	mov	r0, r4
 80067ea:	4629      	mov	r1, r5
 80067ec:	f7f9 fefc 	bl	80005e8 <__aeabi_dmul>
 80067f0:	a33d      	add	r3, pc, #244	; (adr r3, 80068e8 <__kernel_cos+0x148>)
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	f7f9 fd41 	bl	800027c <__adddf3>
 80067fa:	4622      	mov	r2, r4
 80067fc:	462b      	mov	r3, r5
 80067fe:	f7f9 fef3 	bl	80005e8 <__aeabi_dmul>
 8006802:	a33b      	add	r3, pc, #236	; (adr r3, 80068f0 <__kernel_cos+0x150>)
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	f7f9 fd36 	bl	8000278 <__aeabi_dsub>
 800680c:	4622      	mov	r2, r4
 800680e:	462b      	mov	r3, r5
 8006810:	f7f9 feea 	bl	80005e8 <__aeabi_dmul>
 8006814:	a338      	add	r3, pc, #224	; (adr r3, 80068f8 <__kernel_cos+0x158>)
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	f7f9 fd2f 	bl	800027c <__adddf3>
 800681e:	4622      	mov	r2, r4
 8006820:	462b      	mov	r3, r5
 8006822:	f7f9 fee1 	bl	80005e8 <__aeabi_dmul>
 8006826:	a336      	add	r3, pc, #216	; (adr r3, 8006900 <__kernel_cos+0x160>)
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f7f9 fd24 	bl	8000278 <__aeabi_dsub>
 8006830:	4622      	mov	r2, r4
 8006832:	462b      	mov	r3, r5
 8006834:	f7f9 fed8 	bl	80005e8 <__aeabi_dmul>
 8006838:	a333      	add	r3, pc, #204	; (adr r3, 8006908 <__kernel_cos+0x168>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f7f9 fd1d 	bl	800027c <__adddf3>
 8006842:	4622      	mov	r2, r4
 8006844:	462b      	mov	r3, r5
 8006846:	f7f9 fecf 	bl	80005e8 <__aeabi_dmul>
 800684a:	4622      	mov	r2, r4
 800684c:	462b      	mov	r3, r5
 800684e:	f7f9 fecb 	bl	80005e8 <__aeabi_dmul>
 8006852:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006856:	4604      	mov	r4, r0
 8006858:	460d      	mov	r5, r1
 800685a:	4630      	mov	r0, r6
 800685c:	4639      	mov	r1, r7
 800685e:	f7f9 fec3 	bl	80005e8 <__aeabi_dmul>
 8006862:	460b      	mov	r3, r1
 8006864:	4602      	mov	r2, r0
 8006866:	4629      	mov	r1, r5
 8006868:	4620      	mov	r0, r4
 800686a:	f7f9 fd05 	bl	8000278 <__aeabi_dsub>
 800686e:	4b2b      	ldr	r3, [pc, #172]	; (800691c <__kernel_cos+0x17c>)
 8006870:	4598      	cmp	r8, r3
 8006872:	4606      	mov	r6, r0
 8006874:	460f      	mov	r7, r1
 8006876:	dc10      	bgt.n	800689a <__kernel_cos+0xfa>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4650      	mov	r0, sl
 800687e:	4659      	mov	r1, fp
 8006880:	f7f9 fcfa 	bl	8000278 <__aeabi_dsub>
 8006884:	460b      	mov	r3, r1
 8006886:	4926      	ldr	r1, [pc, #152]	; (8006920 <__kernel_cos+0x180>)
 8006888:	4602      	mov	r2, r0
 800688a:	2000      	movs	r0, #0
 800688c:	f7f9 fcf4 	bl	8000278 <__aeabi_dsub>
 8006890:	ec41 0b10 	vmov	d0, r0, r1
 8006894:	b003      	add	sp, #12
 8006896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689a:	4b22      	ldr	r3, [pc, #136]	; (8006924 <__kernel_cos+0x184>)
 800689c:	4920      	ldr	r1, [pc, #128]	; (8006920 <__kernel_cos+0x180>)
 800689e:	4598      	cmp	r8, r3
 80068a0:	bfcc      	ite	gt
 80068a2:	4d21      	ldrgt	r5, [pc, #132]	; (8006928 <__kernel_cos+0x188>)
 80068a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80068a8:	2400      	movs	r4, #0
 80068aa:	4622      	mov	r2, r4
 80068ac:	462b      	mov	r3, r5
 80068ae:	2000      	movs	r0, #0
 80068b0:	f7f9 fce2 	bl	8000278 <__aeabi_dsub>
 80068b4:	4622      	mov	r2, r4
 80068b6:	4680      	mov	r8, r0
 80068b8:	4689      	mov	r9, r1
 80068ba:	462b      	mov	r3, r5
 80068bc:	4650      	mov	r0, sl
 80068be:	4659      	mov	r1, fp
 80068c0:	f7f9 fcda 	bl	8000278 <__aeabi_dsub>
 80068c4:	4632      	mov	r2, r6
 80068c6:	463b      	mov	r3, r7
 80068c8:	f7f9 fcd6 	bl	8000278 <__aeabi_dsub>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4640      	mov	r0, r8
 80068d2:	4649      	mov	r1, r9
 80068d4:	e7da      	b.n	800688c <__kernel_cos+0xec>
 80068d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006910 <__kernel_cos+0x170>
 80068da:	e7db      	b.n	8006894 <__kernel_cos+0xf4>
 80068dc:	f3af 8000 	nop.w
 80068e0:	be8838d4 	.word	0xbe8838d4
 80068e4:	bda8fae9 	.word	0xbda8fae9
 80068e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80068ec:	3e21ee9e 	.word	0x3e21ee9e
 80068f0:	809c52ad 	.word	0x809c52ad
 80068f4:	3e927e4f 	.word	0x3e927e4f
 80068f8:	19cb1590 	.word	0x19cb1590
 80068fc:	3efa01a0 	.word	0x3efa01a0
 8006900:	16c15177 	.word	0x16c15177
 8006904:	3f56c16c 	.word	0x3f56c16c
 8006908:	5555554c 	.word	0x5555554c
 800690c:	3fa55555 	.word	0x3fa55555
 8006910:	00000000 	.word	0x00000000
 8006914:	3ff00000 	.word	0x3ff00000
 8006918:	3fe00000 	.word	0x3fe00000
 800691c:	3fd33332 	.word	0x3fd33332
 8006920:	3ff00000 	.word	0x3ff00000
 8006924:	3fe90000 	.word	0x3fe90000
 8006928:	3fd20000 	.word	0x3fd20000
 800692c:	00000000 	.word	0x00000000

08006930 <__kernel_sin>:
 8006930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006934:	ed2d 8b04 	vpush	{d8-d9}
 8006938:	eeb0 8a41 	vmov.f32	s16, s2
 800693c:	eef0 8a61 	vmov.f32	s17, s3
 8006940:	ec55 4b10 	vmov	r4, r5, d0
 8006944:	b083      	sub	sp, #12
 8006946:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800694a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800694e:	9001      	str	r0, [sp, #4]
 8006950:	da06      	bge.n	8006960 <__kernel_sin+0x30>
 8006952:	ee10 0a10 	vmov	r0, s0
 8006956:	4629      	mov	r1, r5
 8006958:	f7fa f8f6 	bl	8000b48 <__aeabi_d2iz>
 800695c:	2800      	cmp	r0, #0
 800695e:	d051      	beq.n	8006a04 <__kernel_sin+0xd4>
 8006960:	4622      	mov	r2, r4
 8006962:	462b      	mov	r3, r5
 8006964:	4620      	mov	r0, r4
 8006966:	4629      	mov	r1, r5
 8006968:	f7f9 fe3e 	bl	80005e8 <__aeabi_dmul>
 800696c:	4682      	mov	sl, r0
 800696e:	468b      	mov	fp, r1
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4620      	mov	r0, r4
 8006976:	4629      	mov	r1, r5
 8006978:	f7f9 fe36 	bl	80005e8 <__aeabi_dmul>
 800697c:	a341      	add	r3, pc, #260	; (adr r3, 8006a84 <__kernel_sin+0x154>)
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	4680      	mov	r8, r0
 8006984:	4689      	mov	r9, r1
 8006986:	4650      	mov	r0, sl
 8006988:	4659      	mov	r1, fp
 800698a:	f7f9 fe2d 	bl	80005e8 <__aeabi_dmul>
 800698e:	a33f      	add	r3, pc, #252	; (adr r3, 8006a8c <__kernel_sin+0x15c>)
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	f7f9 fc70 	bl	8000278 <__aeabi_dsub>
 8006998:	4652      	mov	r2, sl
 800699a:	465b      	mov	r3, fp
 800699c:	f7f9 fe24 	bl	80005e8 <__aeabi_dmul>
 80069a0:	a33c      	add	r3, pc, #240	; (adr r3, 8006a94 <__kernel_sin+0x164>)
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	f7f9 fc69 	bl	800027c <__adddf3>
 80069aa:	4652      	mov	r2, sl
 80069ac:	465b      	mov	r3, fp
 80069ae:	f7f9 fe1b 	bl	80005e8 <__aeabi_dmul>
 80069b2:	a33a      	add	r3, pc, #232	; (adr r3, 8006a9c <__kernel_sin+0x16c>)
 80069b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b8:	f7f9 fc5e 	bl	8000278 <__aeabi_dsub>
 80069bc:	4652      	mov	r2, sl
 80069be:	465b      	mov	r3, fp
 80069c0:	f7f9 fe12 	bl	80005e8 <__aeabi_dmul>
 80069c4:	a337      	add	r3, pc, #220	; (adr r3, 8006aa4 <__kernel_sin+0x174>)
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	f7f9 fc57 	bl	800027c <__adddf3>
 80069ce:	9b01      	ldr	r3, [sp, #4]
 80069d0:	4606      	mov	r6, r0
 80069d2:	460f      	mov	r7, r1
 80069d4:	b9eb      	cbnz	r3, 8006a12 <__kernel_sin+0xe2>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4650      	mov	r0, sl
 80069dc:	4659      	mov	r1, fp
 80069de:	f7f9 fe03 	bl	80005e8 <__aeabi_dmul>
 80069e2:	a325      	add	r3, pc, #148	; (adr r3, 8006a78 <__kernel_sin+0x148>)
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	f7f9 fc46 	bl	8000278 <__aeabi_dsub>
 80069ec:	4642      	mov	r2, r8
 80069ee:	464b      	mov	r3, r9
 80069f0:	f7f9 fdfa 	bl	80005e8 <__aeabi_dmul>
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	4620      	mov	r0, r4
 80069fa:	4629      	mov	r1, r5
 80069fc:	f7f9 fc3e 	bl	800027c <__adddf3>
 8006a00:	4604      	mov	r4, r0
 8006a02:	460d      	mov	r5, r1
 8006a04:	ec45 4b10 	vmov	d0, r4, r5
 8006a08:	b003      	add	sp, #12
 8006a0a:	ecbd 8b04 	vpop	{d8-d9}
 8006a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a12:	4b1b      	ldr	r3, [pc, #108]	; (8006a80 <__kernel_sin+0x150>)
 8006a14:	ec51 0b18 	vmov	r0, r1, d8
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f7f9 fde5 	bl	80005e8 <__aeabi_dmul>
 8006a1e:	4632      	mov	r2, r6
 8006a20:	ec41 0b19 	vmov	d9, r0, r1
 8006a24:	463b      	mov	r3, r7
 8006a26:	4640      	mov	r0, r8
 8006a28:	4649      	mov	r1, r9
 8006a2a:	f7f9 fddd 	bl	80005e8 <__aeabi_dmul>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	ec51 0b19 	vmov	r0, r1, d9
 8006a36:	f7f9 fc1f 	bl	8000278 <__aeabi_dsub>
 8006a3a:	4652      	mov	r2, sl
 8006a3c:	465b      	mov	r3, fp
 8006a3e:	f7f9 fdd3 	bl	80005e8 <__aeabi_dmul>
 8006a42:	ec53 2b18 	vmov	r2, r3, d8
 8006a46:	f7f9 fc17 	bl	8000278 <__aeabi_dsub>
 8006a4a:	a30b      	add	r3, pc, #44	; (adr r3, 8006a78 <__kernel_sin+0x148>)
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	4606      	mov	r6, r0
 8006a52:	460f      	mov	r7, r1
 8006a54:	4640      	mov	r0, r8
 8006a56:	4649      	mov	r1, r9
 8006a58:	f7f9 fdc6 	bl	80005e8 <__aeabi_dmul>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4630      	mov	r0, r6
 8006a62:	4639      	mov	r1, r7
 8006a64:	f7f9 fc0a 	bl	800027c <__adddf3>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	4629      	mov	r1, r5
 8006a70:	f7f9 fc02 	bl	8000278 <__aeabi_dsub>
 8006a74:	e7c4      	b.n	8006a00 <__kernel_sin+0xd0>
 8006a76:	bf00      	nop
 8006a78:	55555549 	.word	0x55555549
 8006a7c:	3fc55555 	.word	0x3fc55555
 8006a80:	3fe00000 	.word	0x3fe00000
 8006a84:	5acfd57c 	.word	0x5acfd57c
 8006a88:	3de5d93a 	.word	0x3de5d93a
 8006a8c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006a90:	3e5ae5e6 	.word	0x3e5ae5e6
 8006a94:	57b1fe7d 	.word	0x57b1fe7d
 8006a98:	3ec71de3 	.word	0x3ec71de3
 8006a9c:	19c161d5 	.word	0x19c161d5
 8006aa0:	3f2a01a0 	.word	0x3f2a01a0
 8006aa4:	1110f8a6 	.word	0x1110f8a6
 8006aa8:	3f811111 	.word	0x3f811111
 8006aac:	00000000 	.word	0x00000000

08006ab0 <__ieee754_rem_pio2>:
 8006ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	ed2d 8b02 	vpush	{d8}
 8006ab8:	ec55 4b10 	vmov	r4, r5, d0
 8006abc:	4bca      	ldr	r3, [pc, #808]	; (8006de8 <__ieee754_rem_pio2+0x338>)
 8006abe:	b08b      	sub	sp, #44	; 0x2c
 8006ac0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006ac4:	4598      	cmp	r8, r3
 8006ac6:	4682      	mov	sl, r0
 8006ac8:	9502      	str	r5, [sp, #8]
 8006aca:	dc08      	bgt.n	8006ade <__ieee754_rem_pio2+0x2e>
 8006acc:	2200      	movs	r2, #0
 8006ace:	2300      	movs	r3, #0
 8006ad0:	ed80 0b00 	vstr	d0, [r0]
 8006ad4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006ad8:	f04f 0b00 	mov.w	fp, #0
 8006adc:	e028      	b.n	8006b30 <__ieee754_rem_pio2+0x80>
 8006ade:	4bc3      	ldr	r3, [pc, #780]	; (8006dec <__ieee754_rem_pio2+0x33c>)
 8006ae0:	4598      	cmp	r8, r3
 8006ae2:	dc78      	bgt.n	8006bd6 <__ieee754_rem_pio2+0x126>
 8006ae4:	9b02      	ldr	r3, [sp, #8]
 8006ae6:	4ec2      	ldr	r6, [pc, #776]	; (8006df0 <__ieee754_rem_pio2+0x340>)
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	ee10 0a10 	vmov	r0, s0
 8006aee:	a3b0      	add	r3, pc, #704	; (adr r3, 8006db0 <__ieee754_rem_pio2+0x300>)
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	4629      	mov	r1, r5
 8006af6:	dd39      	ble.n	8006b6c <__ieee754_rem_pio2+0xbc>
 8006af8:	f7f9 fbbe 	bl	8000278 <__aeabi_dsub>
 8006afc:	45b0      	cmp	r8, r6
 8006afe:	4604      	mov	r4, r0
 8006b00:	460d      	mov	r5, r1
 8006b02:	d01b      	beq.n	8006b3c <__ieee754_rem_pio2+0x8c>
 8006b04:	a3ac      	add	r3, pc, #688	; (adr r3, 8006db8 <__ieee754_rem_pio2+0x308>)
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	f7f9 fbb5 	bl	8000278 <__aeabi_dsub>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	e9ca 2300 	strd	r2, r3, [sl]
 8006b16:	4620      	mov	r0, r4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f7f9 fbad 	bl	8000278 <__aeabi_dsub>
 8006b1e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006db8 <__ieee754_rem_pio2+0x308>)
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f7f9 fba8 	bl	8000278 <__aeabi_dsub>
 8006b28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006b2c:	f04f 0b01 	mov.w	fp, #1
 8006b30:	4658      	mov	r0, fp
 8006b32:	b00b      	add	sp, #44	; 0x2c
 8006b34:	ecbd 8b02 	vpop	{d8}
 8006b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3c:	a3a0      	add	r3, pc, #640	; (adr r3, 8006dc0 <__ieee754_rem_pio2+0x310>)
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	f7f9 fb99 	bl	8000278 <__aeabi_dsub>
 8006b46:	a3a0      	add	r3, pc, #640	; (adr r3, 8006dc8 <__ieee754_rem_pio2+0x318>)
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	460d      	mov	r5, r1
 8006b50:	f7f9 fb92 	bl	8000278 <__aeabi_dsub>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	e9ca 2300 	strd	r2, r3, [sl]
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	4629      	mov	r1, r5
 8006b60:	f7f9 fb8a 	bl	8000278 <__aeabi_dsub>
 8006b64:	a398      	add	r3, pc, #608	; (adr r3, 8006dc8 <__ieee754_rem_pio2+0x318>)
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	e7db      	b.n	8006b24 <__ieee754_rem_pio2+0x74>
 8006b6c:	f7f9 fb86 	bl	800027c <__adddf3>
 8006b70:	45b0      	cmp	r8, r6
 8006b72:	4604      	mov	r4, r0
 8006b74:	460d      	mov	r5, r1
 8006b76:	d016      	beq.n	8006ba6 <__ieee754_rem_pio2+0xf6>
 8006b78:	a38f      	add	r3, pc, #572	; (adr r3, 8006db8 <__ieee754_rem_pio2+0x308>)
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	f7f9 fb7d 	bl	800027c <__adddf3>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	e9ca 2300 	strd	r2, r3, [sl]
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	f7f9 fb73 	bl	8000278 <__aeabi_dsub>
 8006b92:	a389      	add	r3, pc, #548	; (adr r3, 8006db8 <__ieee754_rem_pio2+0x308>)
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	f7f9 fb70 	bl	800027c <__adddf3>
 8006b9c:	f04f 3bff 	mov.w	fp, #4294967295
 8006ba0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ba4:	e7c4      	b.n	8006b30 <__ieee754_rem_pio2+0x80>
 8006ba6:	a386      	add	r3, pc, #536	; (adr r3, 8006dc0 <__ieee754_rem_pio2+0x310>)
 8006ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bac:	f7f9 fb66 	bl	800027c <__adddf3>
 8006bb0:	a385      	add	r3, pc, #532	; (adr r3, 8006dc8 <__ieee754_rem_pio2+0x318>)
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	460d      	mov	r5, r1
 8006bba:	f7f9 fb5f 	bl	800027c <__adddf3>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	e9ca 2300 	strd	r2, r3, [sl]
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	4629      	mov	r1, r5
 8006bca:	f7f9 fb55 	bl	8000278 <__aeabi_dsub>
 8006bce:	a37e      	add	r3, pc, #504	; (adr r3, 8006dc8 <__ieee754_rem_pio2+0x318>)
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	e7e0      	b.n	8006b98 <__ieee754_rem_pio2+0xe8>
 8006bd6:	4b87      	ldr	r3, [pc, #540]	; (8006df4 <__ieee754_rem_pio2+0x344>)
 8006bd8:	4598      	cmp	r8, r3
 8006bda:	f300 80d8 	bgt.w	8006d8e <__ieee754_rem_pio2+0x2de>
 8006bde:	f000 f96d 	bl	8006ebc <fabs>
 8006be2:	ec55 4b10 	vmov	r4, r5, d0
 8006be6:	ee10 0a10 	vmov	r0, s0
 8006bea:	a379      	add	r3, pc, #484	; (adr r3, 8006dd0 <__ieee754_rem_pio2+0x320>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	f7f9 fcf9 	bl	80005e8 <__aeabi_dmul>
 8006bf6:	4b80      	ldr	r3, [pc, #512]	; (8006df8 <__ieee754_rem_pio2+0x348>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f7f9 fb3f 	bl	800027c <__adddf3>
 8006bfe:	f7f9 ffa3 	bl	8000b48 <__aeabi_d2iz>
 8006c02:	4683      	mov	fp, r0
 8006c04:	f7f9 fc86 	bl	8000514 <__aeabi_i2d>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	ec43 2b18 	vmov	d8, r2, r3
 8006c10:	a367      	add	r3, pc, #412	; (adr r3, 8006db0 <__ieee754_rem_pio2+0x300>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f7f9 fce7 	bl	80005e8 <__aeabi_dmul>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4620      	mov	r0, r4
 8006c20:	4629      	mov	r1, r5
 8006c22:	f7f9 fb29 	bl	8000278 <__aeabi_dsub>
 8006c26:	a364      	add	r3, pc, #400	; (adr r3, 8006db8 <__ieee754_rem_pio2+0x308>)
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	4606      	mov	r6, r0
 8006c2e:	460f      	mov	r7, r1
 8006c30:	ec51 0b18 	vmov	r0, r1, d8
 8006c34:	f7f9 fcd8 	bl	80005e8 <__aeabi_dmul>
 8006c38:	f1bb 0f1f 	cmp.w	fp, #31
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	460d      	mov	r5, r1
 8006c40:	dc0d      	bgt.n	8006c5e <__ieee754_rem_pio2+0x1ae>
 8006c42:	4b6e      	ldr	r3, [pc, #440]	; (8006dfc <__ieee754_rem_pio2+0x34c>)
 8006c44:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4c:	4543      	cmp	r3, r8
 8006c4e:	d006      	beq.n	8006c5e <__ieee754_rem_pio2+0x1ae>
 8006c50:	4622      	mov	r2, r4
 8006c52:	462b      	mov	r3, r5
 8006c54:	4630      	mov	r0, r6
 8006c56:	4639      	mov	r1, r7
 8006c58:	f7f9 fb0e 	bl	8000278 <__aeabi_dsub>
 8006c5c:	e00e      	b.n	8006c7c <__ieee754_rem_pio2+0x1cc>
 8006c5e:	462b      	mov	r3, r5
 8006c60:	4622      	mov	r2, r4
 8006c62:	4630      	mov	r0, r6
 8006c64:	4639      	mov	r1, r7
 8006c66:	f7f9 fb07 	bl	8000278 <__aeabi_dsub>
 8006c6a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006c6e:	9303      	str	r3, [sp, #12]
 8006c70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c74:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006c78:	2b10      	cmp	r3, #16
 8006c7a:	dc02      	bgt.n	8006c82 <__ieee754_rem_pio2+0x1d2>
 8006c7c:	e9ca 0100 	strd	r0, r1, [sl]
 8006c80:	e039      	b.n	8006cf6 <__ieee754_rem_pio2+0x246>
 8006c82:	a34f      	add	r3, pc, #316	; (adr r3, 8006dc0 <__ieee754_rem_pio2+0x310>)
 8006c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c88:	ec51 0b18 	vmov	r0, r1, d8
 8006c8c:	f7f9 fcac 	bl	80005e8 <__aeabi_dmul>
 8006c90:	4604      	mov	r4, r0
 8006c92:	460d      	mov	r5, r1
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4630      	mov	r0, r6
 8006c9a:	4639      	mov	r1, r7
 8006c9c:	f7f9 faec 	bl	8000278 <__aeabi_dsub>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4680      	mov	r8, r0
 8006ca6:	4689      	mov	r9, r1
 8006ca8:	4630      	mov	r0, r6
 8006caa:	4639      	mov	r1, r7
 8006cac:	f7f9 fae4 	bl	8000278 <__aeabi_dsub>
 8006cb0:	4622      	mov	r2, r4
 8006cb2:	462b      	mov	r3, r5
 8006cb4:	f7f9 fae0 	bl	8000278 <__aeabi_dsub>
 8006cb8:	a343      	add	r3, pc, #268	; (adr r3, 8006dc8 <__ieee754_rem_pio2+0x318>)
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	460d      	mov	r5, r1
 8006cc2:	ec51 0b18 	vmov	r0, r1, d8
 8006cc6:	f7f9 fc8f 	bl	80005e8 <__aeabi_dmul>
 8006cca:	4622      	mov	r2, r4
 8006ccc:	462b      	mov	r3, r5
 8006cce:	f7f9 fad3 	bl	8000278 <__aeabi_dsub>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	460d      	mov	r5, r1
 8006cda:	4640      	mov	r0, r8
 8006cdc:	4649      	mov	r1, r9
 8006cde:	f7f9 facb 	bl	8000278 <__aeabi_dsub>
 8006ce2:	9a03      	ldr	r2, [sp, #12]
 8006ce4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b31      	cmp	r3, #49	; 0x31
 8006cec:	dc24      	bgt.n	8006d38 <__ieee754_rem_pio2+0x288>
 8006cee:	e9ca 0100 	strd	r0, r1, [sl]
 8006cf2:	4646      	mov	r6, r8
 8006cf4:	464f      	mov	r7, r9
 8006cf6:	e9da 8900 	ldrd	r8, r9, [sl]
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	4642      	mov	r2, r8
 8006cfe:	464b      	mov	r3, r9
 8006d00:	4639      	mov	r1, r7
 8006d02:	f7f9 fab9 	bl	8000278 <__aeabi_dsub>
 8006d06:	462b      	mov	r3, r5
 8006d08:	4622      	mov	r2, r4
 8006d0a:	f7f9 fab5 	bl	8000278 <__aeabi_dsub>
 8006d0e:	9b02      	ldr	r3, [sp, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d16:	f6bf af0b 	bge.w	8006b30 <__ieee754_rem_pio2+0x80>
 8006d1a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006d1e:	f8ca 3004 	str.w	r3, [sl, #4]
 8006d22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d26:	f8ca 8000 	str.w	r8, [sl]
 8006d2a:	f8ca 0008 	str.w	r0, [sl, #8]
 8006d2e:	f8ca 300c 	str.w	r3, [sl, #12]
 8006d32:	f1cb 0b00 	rsb	fp, fp, #0
 8006d36:	e6fb      	b.n	8006b30 <__ieee754_rem_pio2+0x80>
 8006d38:	a327      	add	r3, pc, #156	; (adr r3, 8006dd8 <__ieee754_rem_pio2+0x328>)
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	ec51 0b18 	vmov	r0, r1, d8
 8006d42:	f7f9 fc51 	bl	80005e8 <__aeabi_dmul>
 8006d46:	4604      	mov	r4, r0
 8006d48:	460d      	mov	r5, r1
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4640      	mov	r0, r8
 8006d50:	4649      	mov	r1, r9
 8006d52:	f7f9 fa91 	bl	8000278 <__aeabi_dsub>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4606      	mov	r6, r0
 8006d5c:	460f      	mov	r7, r1
 8006d5e:	4640      	mov	r0, r8
 8006d60:	4649      	mov	r1, r9
 8006d62:	f7f9 fa89 	bl	8000278 <__aeabi_dsub>
 8006d66:	4622      	mov	r2, r4
 8006d68:	462b      	mov	r3, r5
 8006d6a:	f7f9 fa85 	bl	8000278 <__aeabi_dsub>
 8006d6e:	a31c      	add	r3, pc, #112	; (adr r3, 8006de0 <__ieee754_rem_pio2+0x330>)
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	4604      	mov	r4, r0
 8006d76:	460d      	mov	r5, r1
 8006d78:	ec51 0b18 	vmov	r0, r1, d8
 8006d7c:	f7f9 fc34 	bl	80005e8 <__aeabi_dmul>
 8006d80:	4622      	mov	r2, r4
 8006d82:	462b      	mov	r3, r5
 8006d84:	f7f9 fa78 	bl	8000278 <__aeabi_dsub>
 8006d88:	4604      	mov	r4, r0
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	e760      	b.n	8006c50 <__ieee754_rem_pio2+0x1a0>
 8006d8e:	4b1c      	ldr	r3, [pc, #112]	; (8006e00 <__ieee754_rem_pio2+0x350>)
 8006d90:	4598      	cmp	r8, r3
 8006d92:	dd37      	ble.n	8006e04 <__ieee754_rem_pio2+0x354>
 8006d94:	ee10 2a10 	vmov	r2, s0
 8006d98:	462b      	mov	r3, r5
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	f7f9 fa6b 	bl	8000278 <__aeabi_dsub>
 8006da2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006da6:	e9ca 0100 	strd	r0, r1, [sl]
 8006daa:	e695      	b.n	8006ad8 <__ieee754_rem_pio2+0x28>
 8006dac:	f3af 8000 	nop.w
 8006db0:	54400000 	.word	0x54400000
 8006db4:	3ff921fb 	.word	0x3ff921fb
 8006db8:	1a626331 	.word	0x1a626331
 8006dbc:	3dd0b461 	.word	0x3dd0b461
 8006dc0:	1a600000 	.word	0x1a600000
 8006dc4:	3dd0b461 	.word	0x3dd0b461
 8006dc8:	2e037073 	.word	0x2e037073
 8006dcc:	3ba3198a 	.word	0x3ba3198a
 8006dd0:	6dc9c883 	.word	0x6dc9c883
 8006dd4:	3fe45f30 	.word	0x3fe45f30
 8006dd8:	2e000000 	.word	0x2e000000
 8006ddc:	3ba3198a 	.word	0x3ba3198a
 8006de0:	252049c1 	.word	0x252049c1
 8006de4:	397b839a 	.word	0x397b839a
 8006de8:	3fe921fb 	.word	0x3fe921fb
 8006dec:	4002d97b 	.word	0x4002d97b
 8006df0:	3ff921fb 	.word	0x3ff921fb
 8006df4:	413921fb 	.word	0x413921fb
 8006df8:	3fe00000 	.word	0x3fe00000
 8006dfc:	080078e4 	.word	0x080078e4
 8006e00:	7fefffff 	.word	0x7fefffff
 8006e04:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006e08:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8006e0c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006e10:	4620      	mov	r0, r4
 8006e12:	460d      	mov	r5, r1
 8006e14:	f7f9 fe98 	bl	8000b48 <__aeabi_d2iz>
 8006e18:	f7f9 fb7c 	bl	8000514 <__aeabi_i2d>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4620      	mov	r0, r4
 8006e22:	4629      	mov	r1, r5
 8006e24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e28:	f7f9 fa26 	bl	8000278 <__aeabi_dsub>
 8006e2c:	4b21      	ldr	r3, [pc, #132]	; (8006eb4 <__ieee754_rem_pio2+0x404>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f7f9 fbda 	bl	80005e8 <__aeabi_dmul>
 8006e34:	460d      	mov	r5, r1
 8006e36:	4604      	mov	r4, r0
 8006e38:	f7f9 fe86 	bl	8000b48 <__aeabi_d2iz>
 8006e3c:	f7f9 fb6a 	bl	8000514 <__aeabi_i2d>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4620      	mov	r0, r4
 8006e46:	4629      	mov	r1, r5
 8006e48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e4c:	f7f9 fa14 	bl	8000278 <__aeabi_dsub>
 8006e50:	4b18      	ldr	r3, [pc, #96]	; (8006eb4 <__ieee754_rem_pio2+0x404>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	f7f9 fbc8 	bl	80005e8 <__aeabi_dmul>
 8006e58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006e5c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006e60:	2703      	movs	r7, #3
 8006e62:	2400      	movs	r4, #0
 8006e64:	2500      	movs	r5, #0
 8006e66:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	462b      	mov	r3, r5
 8006e6e:	46b9      	mov	r9, r7
 8006e70:	3f01      	subs	r7, #1
 8006e72:	f7f9 fe21 	bl	8000ab8 <__aeabi_dcmpeq>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d1f5      	bne.n	8006e66 <__ieee754_rem_pio2+0x3b6>
 8006e7a:	4b0f      	ldr	r3, [pc, #60]	; (8006eb8 <__ieee754_rem_pio2+0x408>)
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	2302      	movs	r3, #2
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	4632      	mov	r2, r6
 8006e84:	464b      	mov	r3, r9
 8006e86:	4651      	mov	r1, sl
 8006e88:	a804      	add	r0, sp, #16
 8006e8a:	f000 f821 	bl	8006ed0 <__kernel_rem_pio2>
 8006e8e:	9b02      	ldr	r3, [sp, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	4683      	mov	fp, r0
 8006e94:	f6bf ae4c 	bge.w	8006b30 <__ieee754_rem_pio2+0x80>
 8006e98:	e9da 2100 	ldrd	r2, r1, [sl]
 8006e9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ea0:	e9ca 2300 	strd	r2, r3, [sl]
 8006ea4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006ea8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006eac:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006eb0:	e73f      	b.n	8006d32 <__ieee754_rem_pio2+0x282>
 8006eb2:	bf00      	nop
 8006eb4:	41700000 	.word	0x41700000
 8006eb8:	08007964 	.word	0x08007964

08006ebc <fabs>:
 8006ebc:	ec51 0b10 	vmov	r0, r1, d0
 8006ec0:	ee10 2a10 	vmov	r2, s0
 8006ec4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ec8:	ec43 2b10 	vmov	d0, r2, r3
 8006ecc:	4770      	bx	lr
	...

08006ed0 <__kernel_rem_pio2>:
 8006ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed4:	ed2d 8b02 	vpush	{d8}
 8006ed8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006edc:	f112 0f14 	cmn.w	r2, #20
 8006ee0:	9306      	str	r3, [sp, #24]
 8006ee2:	9104      	str	r1, [sp, #16]
 8006ee4:	4bc2      	ldr	r3, [pc, #776]	; (80071f0 <__kernel_rem_pio2+0x320>)
 8006ee6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006ee8:	9009      	str	r0, [sp, #36]	; 0x24
 8006eea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	9b06      	ldr	r3, [sp, #24]
 8006ef2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ef6:	bfa8      	it	ge
 8006ef8:	1ed4      	subge	r4, r2, #3
 8006efa:	9305      	str	r3, [sp, #20]
 8006efc:	bfb2      	itee	lt
 8006efe:	2400      	movlt	r4, #0
 8006f00:	2318      	movge	r3, #24
 8006f02:	fb94 f4f3 	sdivge	r4, r4, r3
 8006f06:	f06f 0317 	mvn.w	r3, #23
 8006f0a:	fb04 3303 	mla	r3, r4, r3, r3
 8006f0e:	eb03 0a02 	add.w	sl, r3, r2
 8006f12:	9b00      	ldr	r3, [sp, #0]
 8006f14:	9a05      	ldr	r2, [sp, #20]
 8006f16:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80071e0 <__kernel_rem_pio2+0x310>
 8006f1a:	eb03 0802 	add.w	r8, r3, r2
 8006f1e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006f20:	1aa7      	subs	r7, r4, r2
 8006f22:	ae20      	add	r6, sp, #128	; 0x80
 8006f24:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006f28:	2500      	movs	r5, #0
 8006f2a:	4545      	cmp	r5, r8
 8006f2c:	dd13      	ble.n	8006f56 <__kernel_rem_pio2+0x86>
 8006f2e:	9b06      	ldr	r3, [sp, #24]
 8006f30:	aa20      	add	r2, sp, #128	; 0x80
 8006f32:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006f36:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006f3a:	f04f 0800 	mov.w	r8, #0
 8006f3e:	9b00      	ldr	r3, [sp, #0]
 8006f40:	4598      	cmp	r8, r3
 8006f42:	dc31      	bgt.n	8006fa8 <__kernel_rem_pio2+0xd8>
 8006f44:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80071e0 <__kernel_rem_pio2+0x310>
 8006f48:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006f4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006f50:	462f      	mov	r7, r5
 8006f52:	2600      	movs	r6, #0
 8006f54:	e01b      	b.n	8006f8e <__kernel_rem_pio2+0xbe>
 8006f56:	42ef      	cmn	r7, r5
 8006f58:	d407      	bmi.n	8006f6a <__kernel_rem_pio2+0x9a>
 8006f5a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006f5e:	f7f9 fad9 	bl	8000514 <__aeabi_i2d>
 8006f62:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006f66:	3501      	adds	r5, #1
 8006f68:	e7df      	b.n	8006f2a <__kernel_rem_pio2+0x5a>
 8006f6a:	ec51 0b18 	vmov	r0, r1, d8
 8006f6e:	e7f8      	b.n	8006f62 <__kernel_rem_pio2+0x92>
 8006f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f74:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006f78:	f7f9 fb36 	bl	80005e8 <__aeabi_dmul>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f84:	f7f9 f97a 	bl	800027c <__adddf3>
 8006f88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f8c:	3601      	adds	r6, #1
 8006f8e:	9b05      	ldr	r3, [sp, #20]
 8006f90:	429e      	cmp	r6, r3
 8006f92:	f1a7 0708 	sub.w	r7, r7, #8
 8006f96:	ddeb      	ble.n	8006f70 <__kernel_rem_pio2+0xa0>
 8006f98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f9c:	f108 0801 	add.w	r8, r8, #1
 8006fa0:	ecab 7b02 	vstmia	fp!, {d7}
 8006fa4:	3508      	adds	r5, #8
 8006fa6:	e7ca      	b.n	8006f3e <__kernel_rem_pio2+0x6e>
 8006fa8:	9b00      	ldr	r3, [sp, #0]
 8006faa:	aa0c      	add	r2, sp, #48	; 0x30
 8006fac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006fb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fb2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006fb4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006fb8:	9c00      	ldr	r4, [sp, #0]
 8006fba:	930a      	str	r3, [sp, #40]	; 0x28
 8006fbc:	00e3      	lsls	r3, r4, #3
 8006fbe:	9308      	str	r3, [sp, #32]
 8006fc0:	ab98      	add	r3, sp, #608	; 0x260
 8006fc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006fc6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006fca:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8006fce:	ab70      	add	r3, sp, #448	; 0x1c0
 8006fd0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006fd4:	46c3      	mov	fp, r8
 8006fd6:	46a1      	mov	r9, r4
 8006fd8:	f1b9 0f00 	cmp.w	r9, #0
 8006fdc:	f1a5 0508 	sub.w	r5, r5, #8
 8006fe0:	dc77      	bgt.n	80070d2 <__kernel_rem_pio2+0x202>
 8006fe2:	ec47 6b10 	vmov	d0, r6, r7
 8006fe6:	4650      	mov	r0, sl
 8006fe8:	f000 fac2 	bl	8007570 <scalbn>
 8006fec:	ec57 6b10 	vmov	r6, r7, d0
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006ff6:	ee10 0a10 	vmov	r0, s0
 8006ffa:	4639      	mov	r1, r7
 8006ffc:	f7f9 faf4 	bl	80005e8 <__aeabi_dmul>
 8007000:	ec41 0b10 	vmov	d0, r0, r1
 8007004:	f000 fb34 	bl	8007670 <floor>
 8007008:	4b7a      	ldr	r3, [pc, #488]	; (80071f4 <__kernel_rem_pio2+0x324>)
 800700a:	ec51 0b10 	vmov	r0, r1, d0
 800700e:	2200      	movs	r2, #0
 8007010:	f7f9 faea 	bl	80005e8 <__aeabi_dmul>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4630      	mov	r0, r6
 800701a:	4639      	mov	r1, r7
 800701c:	f7f9 f92c 	bl	8000278 <__aeabi_dsub>
 8007020:	460f      	mov	r7, r1
 8007022:	4606      	mov	r6, r0
 8007024:	f7f9 fd90 	bl	8000b48 <__aeabi_d2iz>
 8007028:	9002      	str	r0, [sp, #8]
 800702a:	f7f9 fa73 	bl	8000514 <__aeabi_i2d>
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	4630      	mov	r0, r6
 8007034:	4639      	mov	r1, r7
 8007036:	f7f9 f91f 	bl	8000278 <__aeabi_dsub>
 800703a:	f1ba 0f00 	cmp.w	sl, #0
 800703e:	4606      	mov	r6, r0
 8007040:	460f      	mov	r7, r1
 8007042:	dd6d      	ble.n	8007120 <__kernel_rem_pio2+0x250>
 8007044:	1e61      	subs	r1, r4, #1
 8007046:	ab0c      	add	r3, sp, #48	; 0x30
 8007048:	9d02      	ldr	r5, [sp, #8]
 800704a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800704e:	f1ca 0018 	rsb	r0, sl, #24
 8007052:	fa43 f200 	asr.w	r2, r3, r0
 8007056:	4415      	add	r5, r2
 8007058:	4082      	lsls	r2, r0
 800705a:	1a9b      	subs	r3, r3, r2
 800705c:	aa0c      	add	r2, sp, #48	; 0x30
 800705e:	9502      	str	r5, [sp, #8]
 8007060:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007064:	f1ca 0217 	rsb	r2, sl, #23
 8007068:	fa43 fb02 	asr.w	fp, r3, r2
 800706c:	f1bb 0f00 	cmp.w	fp, #0
 8007070:	dd65      	ble.n	800713e <__kernel_rem_pio2+0x26e>
 8007072:	9b02      	ldr	r3, [sp, #8]
 8007074:	2200      	movs	r2, #0
 8007076:	3301      	adds	r3, #1
 8007078:	9302      	str	r3, [sp, #8]
 800707a:	4615      	mov	r5, r2
 800707c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007080:	4294      	cmp	r4, r2
 8007082:	f300 809f 	bgt.w	80071c4 <__kernel_rem_pio2+0x2f4>
 8007086:	f1ba 0f00 	cmp.w	sl, #0
 800708a:	dd07      	ble.n	800709c <__kernel_rem_pio2+0x1cc>
 800708c:	f1ba 0f01 	cmp.w	sl, #1
 8007090:	f000 80c1 	beq.w	8007216 <__kernel_rem_pio2+0x346>
 8007094:	f1ba 0f02 	cmp.w	sl, #2
 8007098:	f000 80c7 	beq.w	800722a <__kernel_rem_pio2+0x35a>
 800709c:	f1bb 0f02 	cmp.w	fp, #2
 80070a0:	d14d      	bne.n	800713e <__kernel_rem_pio2+0x26e>
 80070a2:	4632      	mov	r2, r6
 80070a4:	463b      	mov	r3, r7
 80070a6:	4954      	ldr	r1, [pc, #336]	; (80071f8 <__kernel_rem_pio2+0x328>)
 80070a8:	2000      	movs	r0, #0
 80070aa:	f7f9 f8e5 	bl	8000278 <__aeabi_dsub>
 80070ae:	4606      	mov	r6, r0
 80070b0:	460f      	mov	r7, r1
 80070b2:	2d00      	cmp	r5, #0
 80070b4:	d043      	beq.n	800713e <__kernel_rem_pio2+0x26e>
 80070b6:	4650      	mov	r0, sl
 80070b8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80071e8 <__kernel_rem_pio2+0x318>
 80070bc:	f000 fa58 	bl	8007570 <scalbn>
 80070c0:	4630      	mov	r0, r6
 80070c2:	4639      	mov	r1, r7
 80070c4:	ec53 2b10 	vmov	r2, r3, d0
 80070c8:	f7f9 f8d6 	bl	8000278 <__aeabi_dsub>
 80070cc:	4606      	mov	r6, r0
 80070ce:	460f      	mov	r7, r1
 80070d0:	e035      	b.n	800713e <__kernel_rem_pio2+0x26e>
 80070d2:	4b4a      	ldr	r3, [pc, #296]	; (80071fc <__kernel_rem_pio2+0x32c>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	4630      	mov	r0, r6
 80070d8:	4639      	mov	r1, r7
 80070da:	f7f9 fa85 	bl	80005e8 <__aeabi_dmul>
 80070de:	f7f9 fd33 	bl	8000b48 <__aeabi_d2iz>
 80070e2:	f7f9 fa17 	bl	8000514 <__aeabi_i2d>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	ec43 2b18 	vmov	d8, r2, r3
 80070ee:	4b44      	ldr	r3, [pc, #272]	; (8007200 <__kernel_rem_pio2+0x330>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	f7f9 fa79 	bl	80005e8 <__aeabi_dmul>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4630      	mov	r0, r6
 80070fc:	4639      	mov	r1, r7
 80070fe:	f7f9 f8bb 	bl	8000278 <__aeabi_dsub>
 8007102:	f7f9 fd21 	bl	8000b48 <__aeabi_d2iz>
 8007106:	e9d5 2300 	ldrd	r2, r3, [r5]
 800710a:	f84b 0b04 	str.w	r0, [fp], #4
 800710e:	ec51 0b18 	vmov	r0, r1, d8
 8007112:	f7f9 f8b3 	bl	800027c <__adddf3>
 8007116:	f109 39ff 	add.w	r9, r9, #4294967295
 800711a:	4606      	mov	r6, r0
 800711c:	460f      	mov	r7, r1
 800711e:	e75b      	b.n	8006fd8 <__kernel_rem_pio2+0x108>
 8007120:	d106      	bne.n	8007130 <__kernel_rem_pio2+0x260>
 8007122:	1e63      	subs	r3, r4, #1
 8007124:	aa0c      	add	r2, sp, #48	; 0x30
 8007126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800712a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800712e:	e79d      	b.n	800706c <__kernel_rem_pio2+0x19c>
 8007130:	4b34      	ldr	r3, [pc, #208]	; (8007204 <__kernel_rem_pio2+0x334>)
 8007132:	2200      	movs	r2, #0
 8007134:	f7f9 fcde 	bl	8000af4 <__aeabi_dcmpge>
 8007138:	2800      	cmp	r0, #0
 800713a:	d140      	bne.n	80071be <__kernel_rem_pio2+0x2ee>
 800713c:	4683      	mov	fp, r0
 800713e:	2200      	movs	r2, #0
 8007140:	2300      	movs	r3, #0
 8007142:	4630      	mov	r0, r6
 8007144:	4639      	mov	r1, r7
 8007146:	f7f9 fcb7 	bl	8000ab8 <__aeabi_dcmpeq>
 800714a:	2800      	cmp	r0, #0
 800714c:	f000 80c1 	beq.w	80072d2 <__kernel_rem_pio2+0x402>
 8007150:	1e65      	subs	r5, r4, #1
 8007152:	462b      	mov	r3, r5
 8007154:	2200      	movs	r2, #0
 8007156:	9900      	ldr	r1, [sp, #0]
 8007158:	428b      	cmp	r3, r1
 800715a:	da6d      	bge.n	8007238 <__kernel_rem_pio2+0x368>
 800715c:	2a00      	cmp	r2, #0
 800715e:	f000 808a 	beq.w	8007276 <__kernel_rem_pio2+0x3a6>
 8007162:	ab0c      	add	r3, sp, #48	; 0x30
 8007164:	f1aa 0a18 	sub.w	sl, sl, #24
 8007168:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 80ae 	beq.w	80072ce <__kernel_rem_pio2+0x3fe>
 8007172:	4650      	mov	r0, sl
 8007174:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80071e8 <__kernel_rem_pio2+0x318>
 8007178:	f000 f9fa 	bl	8007570 <scalbn>
 800717c:	1c6b      	adds	r3, r5, #1
 800717e:	00da      	lsls	r2, r3, #3
 8007180:	9205      	str	r2, [sp, #20]
 8007182:	ec57 6b10 	vmov	r6, r7, d0
 8007186:	aa70      	add	r2, sp, #448	; 0x1c0
 8007188:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80071fc <__kernel_rem_pio2+0x32c>
 800718c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8007190:	462c      	mov	r4, r5
 8007192:	f04f 0800 	mov.w	r8, #0
 8007196:	2c00      	cmp	r4, #0
 8007198:	f280 80d4 	bge.w	8007344 <__kernel_rem_pio2+0x474>
 800719c:	462c      	mov	r4, r5
 800719e:	2c00      	cmp	r4, #0
 80071a0:	f2c0 8102 	blt.w	80073a8 <__kernel_rem_pio2+0x4d8>
 80071a4:	4b18      	ldr	r3, [pc, #96]	; (8007208 <__kernel_rem_pio2+0x338>)
 80071a6:	461e      	mov	r6, r3
 80071a8:	ab70      	add	r3, sp, #448	; 0x1c0
 80071aa:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80071ae:	1b2b      	subs	r3, r5, r4
 80071b0:	f04f 0900 	mov.w	r9, #0
 80071b4:	f04f 0a00 	mov.w	sl, #0
 80071b8:	2700      	movs	r7, #0
 80071ba:	9306      	str	r3, [sp, #24]
 80071bc:	e0e6      	b.n	800738c <__kernel_rem_pio2+0x4bc>
 80071be:	f04f 0b02 	mov.w	fp, #2
 80071c2:	e756      	b.n	8007072 <__kernel_rem_pio2+0x1a2>
 80071c4:	f8d8 3000 	ldr.w	r3, [r8]
 80071c8:	bb05      	cbnz	r5, 800720c <__kernel_rem_pio2+0x33c>
 80071ca:	b123      	cbz	r3, 80071d6 <__kernel_rem_pio2+0x306>
 80071cc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80071d0:	f8c8 3000 	str.w	r3, [r8]
 80071d4:	2301      	movs	r3, #1
 80071d6:	3201      	adds	r2, #1
 80071d8:	f108 0804 	add.w	r8, r8, #4
 80071dc:	461d      	mov	r5, r3
 80071de:	e74f      	b.n	8007080 <__kernel_rem_pio2+0x1b0>
	...
 80071ec:	3ff00000 	.word	0x3ff00000
 80071f0:	08007ab0 	.word	0x08007ab0
 80071f4:	40200000 	.word	0x40200000
 80071f8:	3ff00000 	.word	0x3ff00000
 80071fc:	3e700000 	.word	0x3e700000
 8007200:	41700000 	.word	0x41700000
 8007204:	3fe00000 	.word	0x3fe00000
 8007208:	08007a70 	.word	0x08007a70
 800720c:	1acb      	subs	r3, r1, r3
 800720e:	f8c8 3000 	str.w	r3, [r8]
 8007212:	462b      	mov	r3, r5
 8007214:	e7df      	b.n	80071d6 <__kernel_rem_pio2+0x306>
 8007216:	1e62      	subs	r2, r4, #1
 8007218:	ab0c      	add	r3, sp, #48	; 0x30
 800721a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007222:	a90c      	add	r1, sp, #48	; 0x30
 8007224:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007228:	e738      	b.n	800709c <__kernel_rem_pio2+0x1cc>
 800722a:	1e62      	subs	r2, r4, #1
 800722c:	ab0c      	add	r3, sp, #48	; 0x30
 800722e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007232:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007236:	e7f4      	b.n	8007222 <__kernel_rem_pio2+0x352>
 8007238:	a90c      	add	r1, sp, #48	; 0x30
 800723a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800723e:	3b01      	subs	r3, #1
 8007240:	430a      	orrs	r2, r1
 8007242:	e788      	b.n	8007156 <__kernel_rem_pio2+0x286>
 8007244:	3301      	adds	r3, #1
 8007246:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800724a:	2900      	cmp	r1, #0
 800724c:	d0fa      	beq.n	8007244 <__kernel_rem_pio2+0x374>
 800724e:	9a08      	ldr	r2, [sp, #32]
 8007250:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8007254:	446a      	add	r2, sp
 8007256:	3a98      	subs	r2, #152	; 0x98
 8007258:	9208      	str	r2, [sp, #32]
 800725a:	9a06      	ldr	r2, [sp, #24]
 800725c:	a920      	add	r1, sp, #128	; 0x80
 800725e:	18a2      	adds	r2, r4, r2
 8007260:	18e3      	adds	r3, r4, r3
 8007262:	f104 0801 	add.w	r8, r4, #1
 8007266:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800726a:	9302      	str	r3, [sp, #8]
 800726c:	9b02      	ldr	r3, [sp, #8]
 800726e:	4543      	cmp	r3, r8
 8007270:	da04      	bge.n	800727c <__kernel_rem_pio2+0x3ac>
 8007272:	461c      	mov	r4, r3
 8007274:	e6a2      	b.n	8006fbc <__kernel_rem_pio2+0xec>
 8007276:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007278:	2301      	movs	r3, #1
 800727a:	e7e4      	b.n	8007246 <__kernel_rem_pio2+0x376>
 800727c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800727e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007282:	f7f9 f947 	bl	8000514 <__aeabi_i2d>
 8007286:	e8e5 0102 	strd	r0, r1, [r5], #8
 800728a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800728c:	46ab      	mov	fp, r5
 800728e:	461c      	mov	r4, r3
 8007290:	f04f 0900 	mov.w	r9, #0
 8007294:	2600      	movs	r6, #0
 8007296:	2700      	movs	r7, #0
 8007298:	9b05      	ldr	r3, [sp, #20]
 800729a:	4599      	cmp	r9, r3
 800729c:	dd06      	ble.n	80072ac <__kernel_rem_pio2+0x3dc>
 800729e:	9b08      	ldr	r3, [sp, #32]
 80072a0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80072a4:	f108 0801 	add.w	r8, r8, #1
 80072a8:	9308      	str	r3, [sp, #32]
 80072aa:	e7df      	b.n	800726c <__kernel_rem_pio2+0x39c>
 80072ac:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80072b0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80072b4:	f7f9 f998 	bl	80005e8 <__aeabi_dmul>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4630      	mov	r0, r6
 80072be:	4639      	mov	r1, r7
 80072c0:	f7f8 ffdc 	bl	800027c <__adddf3>
 80072c4:	f109 0901 	add.w	r9, r9, #1
 80072c8:	4606      	mov	r6, r0
 80072ca:	460f      	mov	r7, r1
 80072cc:	e7e4      	b.n	8007298 <__kernel_rem_pio2+0x3c8>
 80072ce:	3d01      	subs	r5, #1
 80072d0:	e747      	b.n	8007162 <__kernel_rem_pio2+0x292>
 80072d2:	ec47 6b10 	vmov	d0, r6, r7
 80072d6:	f1ca 0000 	rsb	r0, sl, #0
 80072da:	f000 f949 	bl	8007570 <scalbn>
 80072de:	ec57 6b10 	vmov	r6, r7, d0
 80072e2:	4ba0      	ldr	r3, [pc, #640]	; (8007564 <__kernel_rem_pio2+0x694>)
 80072e4:	ee10 0a10 	vmov	r0, s0
 80072e8:	2200      	movs	r2, #0
 80072ea:	4639      	mov	r1, r7
 80072ec:	f7f9 fc02 	bl	8000af4 <__aeabi_dcmpge>
 80072f0:	b1f8      	cbz	r0, 8007332 <__kernel_rem_pio2+0x462>
 80072f2:	4b9d      	ldr	r3, [pc, #628]	; (8007568 <__kernel_rem_pio2+0x698>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	4630      	mov	r0, r6
 80072f8:	4639      	mov	r1, r7
 80072fa:	f7f9 f975 	bl	80005e8 <__aeabi_dmul>
 80072fe:	f7f9 fc23 	bl	8000b48 <__aeabi_d2iz>
 8007302:	4680      	mov	r8, r0
 8007304:	f7f9 f906 	bl	8000514 <__aeabi_i2d>
 8007308:	4b96      	ldr	r3, [pc, #600]	; (8007564 <__kernel_rem_pio2+0x694>)
 800730a:	2200      	movs	r2, #0
 800730c:	f7f9 f96c 	bl	80005e8 <__aeabi_dmul>
 8007310:	460b      	mov	r3, r1
 8007312:	4602      	mov	r2, r0
 8007314:	4639      	mov	r1, r7
 8007316:	4630      	mov	r0, r6
 8007318:	f7f8 ffae 	bl	8000278 <__aeabi_dsub>
 800731c:	f7f9 fc14 	bl	8000b48 <__aeabi_d2iz>
 8007320:	1c65      	adds	r5, r4, #1
 8007322:	ab0c      	add	r3, sp, #48	; 0x30
 8007324:	f10a 0a18 	add.w	sl, sl, #24
 8007328:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800732c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007330:	e71f      	b.n	8007172 <__kernel_rem_pio2+0x2a2>
 8007332:	4630      	mov	r0, r6
 8007334:	4639      	mov	r1, r7
 8007336:	f7f9 fc07 	bl	8000b48 <__aeabi_d2iz>
 800733a:	ab0c      	add	r3, sp, #48	; 0x30
 800733c:	4625      	mov	r5, r4
 800733e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007342:	e716      	b.n	8007172 <__kernel_rem_pio2+0x2a2>
 8007344:	ab0c      	add	r3, sp, #48	; 0x30
 8007346:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800734a:	f7f9 f8e3 	bl	8000514 <__aeabi_i2d>
 800734e:	4632      	mov	r2, r6
 8007350:	463b      	mov	r3, r7
 8007352:	f7f9 f949 	bl	80005e8 <__aeabi_dmul>
 8007356:	4642      	mov	r2, r8
 8007358:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800735c:	464b      	mov	r3, r9
 800735e:	4630      	mov	r0, r6
 8007360:	4639      	mov	r1, r7
 8007362:	f7f9 f941 	bl	80005e8 <__aeabi_dmul>
 8007366:	3c01      	subs	r4, #1
 8007368:	4606      	mov	r6, r0
 800736a:	460f      	mov	r7, r1
 800736c:	e713      	b.n	8007196 <__kernel_rem_pio2+0x2c6>
 800736e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8007372:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8007376:	f7f9 f937 	bl	80005e8 <__aeabi_dmul>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	4648      	mov	r0, r9
 8007380:	4651      	mov	r1, sl
 8007382:	f7f8 ff7b 	bl	800027c <__adddf3>
 8007386:	3701      	adds	r7, #1
 8007388:	4681      	mov	r9, r0
 800738a:	468a      	mov	sl, r1
 800738c:	9b00      	ldr	r3, [sp, #0]
 800738e:	429f      	cmp	r7, r3
 8007390:	dc02      	bgt.n	8007398 <__kernel_rem_pio2+0x4c8>
 8007392:	9b06      	ldr	r3, [sp, #24]
 8007394:	429f      	cmp	r7, r3
 8007396:	ddea      	ble.n	800736e <__kernel_rem_pio2+0x49e>
 8007398:	9a06      	ldr	r2, [sp, #24]
 800739a:	ab48      	add	r3, sp, #288	; 0x120
 800739c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80073a0:	e9c6 9a00 	strd	r9, sl, [r6]
 80073a4:	3c01      	subs	r4, #1
 80073a6:	e6fa      	b.n	800719e <__kernel_rem_pio2+0x2ce>
 80073a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	dc0b      	bgt.n	80073c6 <__kernel_rem_pio2+0x4f6>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	dc39      	bgt.n	8007426 <__kernel_rem_pio2+0x556>
 80073b2:	d05d      	beq.n	8007470 <__kernel_rem_pio2+0x5a0>
 80073b4:	9b02      	ldr	r3, [sp, #8]
 80073b6:	f003 0007 	and.w	r0, r3, #7
 80073ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80073be:	ecbd 8b02 	vpop	{d8}
 80073c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d1f3      	bne.n	80073b4 <__kernel_rem_pio2+0x4e4>
 80073cc:	9b05      	ldr	r3, [sp, #20]
 80073ce:	9500      	str	r5, [sp, #0]
 80073d0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80073d4:	eb0d 0403 	add.w	r4, sp, r3
 80073d8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80073dc:	46a2      	mov	sl, r4
 80073de:	9b00      	ldr	r3, [sp, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f1aa 0a08 	sub.w	sl, sl, #8
 80073e6:	dc69      	bgt.n	80074bc <__kernel_rem_pio2+0x5ec>
 80073e8:	46aa      	mov	sl, r5
 80073ea:	f1ba 0f01 	cmp.w	sl, #1
 80073ee:	f1a4 0408 	sub.w	r4, r4, #8
 80073f2:	f300 8083 	bgt.w	80074fc <__kernel_rem_pio2+0x62c>
 80073f6:	9c05      	ldr	r4, [sp, #20]
 80073f8:	ab48      	add	r3, sp, #288	; 0x120
 80073fa:	441c      	add	r4, r3
 80073fc:	2000      	movs	r0, #0
 80073fe:	2100      	movs	r1, #0
 8007400:	2d01      	cmp	r5, #1
 8007402:	f300 809a 	bgt.w	800753a <__kernel_rem_pio2+0x66a>
 8007406:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800740a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800740e:	f1bb 0f00 	cmp.w	fp, #0
 8007412:	f040 8098 	bne.w	8007546 <__kernel_rem_pio2+0x676>
 8007416:	9b04      	ldr	r3, [sp, #16]
 8007418:	e9c3 7800 	strd	r7, r8, [r3]
 800741c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007420:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007424:	e7c6      	b.n	80073b4 <__kernel_rem_pio2+0x4e4>
 8007426:	9e05      	ldr	r6, [sp, #20]
 8007428:	ab48      	add	r3, sp, #288	; 0x120
 800742a:	441e      	add	r6, r3
 800742c:	462c      	mov	r4, r5
 800742e:	2000      	movs	r0, #0
 8007430:	2100      	movs	r1, #0
 8007432:	2c00      	cmp	r4, #0
 8007434:	da33      	bge.n	800749e <__kernel_rem_pio2+0x5ce>
 8007436:	f1bb 0f00 	cmp.w	fp, #0
 800743a:	d036      	beq.n	80074aa <__kernel_rem_pio2+0x5da>
 800743c:	4602      	mov	r2, r0
 800743e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007442:	9c04      	ldr	r4, [sp, #16]
 8007444:	e9c4 2300 	strd	r2, r3, [r4]
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007450:	f7f8 ff12 	bl	8000278 <__aeabi_dsub>
 8007454:	ae4a      	add	r6, sp, #296	; 0x128
 8007456:	2401      	movs	r4, #1
 8007458:	42a5      	cmp	r5, r4
 800745a:	da29      	bge.n	80074b0 <__kernel_rem_pio2+0x5e0>
 800745c:	f1bb 0f00 	cmp.w	fp, #0
 8007460:	d002      	beq.n	8007468 <__kernel_rem_pio2+0x598>
 8007462:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007466:	4619      	mov	r1, r3
 8007468:	9b04      	ldr	r3, [sp, #16]
 800746a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800746e:	e7a1      	b.n	80073b4 <__kernel_rem_pio2+0x4e4>
 8007470:	9c05      	ldr	r4, [sp, #20]
 8007472:	ab48      	add	r3, sp, #288	; 0x120
 8007474:	441c      	add	r4, r3
 8007476:	2000      	movs	r0, #0
 8007478:	2100      	movs	r1, #0
 800747a:	2d00      	cmp	r5, #0
 800747c:	da09      	bge.n	8007492 <__kernel_rem_pio2+0x5c2>
 800747e:	f1bb 0f00 	cmp.w	fp, #0
 8007482:	d002      	beq.n	800748a <__kernel_rem_pio2+0x5ba>
 8007484:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007488:	4619      	mov	r1, r3
 800748a:	9b04      	ldr	r3, [sp, #16]
 800748c:	e9c3 0100 	strd	r0, r1, [r3]
 8007490:	e790      	b.n	80073b4 <__kernel_rem_pio2+0x4e4>
 8007492:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007496:	f7f8 fef1 	bl	800027c <__adddf3>
 800749a:	3d01      	subs	r5, #1
 800749c:	e7ed      	b.n	800747a <__kernel_rem_pio2+0x5aa>
 800749e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80074a2:	f7f8 feeb 	bl	800027c <__adddf3>
 80074a6:	3c01      	subs	r4, #1
 80074a8:	e7c3      	b.n	8007432 <__kernel_rem_pio2+0x562>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	e7c8      	b.n	8007442 <__kernel_rem_pio2+0x572>
 80074b0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80074b4:	f7f8 fee2 	bl	800027c <__adddf3>
 80074b8:	3401      	adds	r4, #1
 80074ba:	e7cd      	b.n	8007458 <__kernel_rem_pio2+0x588>
 80074bc:	e9da 8900 	ldrd	r8, r9, [sl]
 80074c0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80074c4:	9b00      	ldr	r3, [sp, #0]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	4632      	mov	r2, r6
 80074cc:	463b      	mov	r3, r7
 80074ce:	4640      	mov	r0, r8
 80074d0:	4649      	mov	r1, r9
 80074d2:	f7f8 fed3 	bl	800027c <__adddf3>
 80074d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	4640      	mov	r0, r8
 80074e0:	4649      	mov	r1, r9
 80074e2:	f7f8 fec9 	bl	8000278 <__aeabi_dsub>
 80074e6:	4632      	mov	r2, r6
 80074e8:	463b      	mov	r3, r7
 80074ea:	f7f8 fec7 	bl	800027c <__adddf3>
 80074ee:	ed9d 7b06 	vldr	d7, [sp, #24]
 80074f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80074f6:	ed8a 7b00 	vstr	d7, [sl]
 80074fa:	e770      	b.n	80073de <__kernel_rem_pio2+0x50e>
 80074fc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007500:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007504:	4640      	mov	r0, r8
 8007506:	4632      	mov	r2, r6
 8007508:	463b      	mov	r3, r7
 800750a:	4649      	mov	r1, r9
 800750c:	f7f8 feb6 	bl	800027c <__adddf3>
 8007510:	e9cd 0100 	strd	r0, r1, [sp]
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4640      	mov	r0, r8
 800751a:	4649      	mov	r1, r9
 800751c:	f7f8 feac 	bl	8000278 <__aeabi_dsub>
 8007520:	4632      	mov	r2, r6
 8007522:	463b      	mov	r3, r7
 8007524:	f7f8 feaa 	bl	800027c <__adddf3>
 8007528:	ed9d 7b00 	vldr	d7, [sp]
 800752c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007530:	ed84 7b00 	vstr	d7, [r4]
 8007534:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007538:	e757      	b.n	80073ea <__kernel_rem_pio2+0x51a>
 800753a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800753e:	f7f8 fe9d 	bl	800027c <__adddf3>
 8007542:	3d01      	subs	r5, #1
 8007544:	e75c      	b.n	8007400 <__kernel_rem_pio2+0x530>
 8007546:	9b04      	ldr	r3, [sp, #16]
 8007548:	9a04      	ldr	r2, [sp, #16]
 800754a:	601f      	str	r7, [r3, #0]
 800754c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007550:	605c      	str	r4, [r3, #4]
 8007552:	609d      	str	r5, [r3, #8]
 8007554:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007558:	60d3      	str	r3, [r2, #12]
 800755a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800755e:	6110      	str	r0, [r2, #16]
 8007560:	6153      	str	r3, [r2, #20]
 8007562:	e727      	b.n	80073b4 <__kernel_rem_pio2+0x4e4>
 8007564:	41700000 	.word	0x41700000
 8007568:	3e700000 	.word	0x3e700000
 800756c:	00000000 	.word	0x00000000

08007570 <scalbn>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	ec55 4b10 	vmov	r4, r5, d0
 8007576:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800757a:	4606      	mov	r6, r0
 800757c:	462b      	mov	r3, r5
 800757e:	b999      	cbnz	r1, 80075a8 <scalbn+0x38>
 8007580:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007584:	4323      	orrs	r3, r4
 8007586:	d03f      	beq.n	8007608 <scalbn+0x98>
 8007588:	4b35      	ldr	r3, [pc, #212]	; (8007660 <scalbn+0xf0>)
 800758a:	4629      	mov	r1, r5
 800758c:	ee10 0a10 	vmov	r0, s0
 8007590:	2200      	movs	r2, #0
 8007592:	f7f9 f829 	bl	80005e8 <__aeabi_dmul>
 8007596:	4b33      	ldr	r3, [pc, #204]	; (8007664 <scalbn+0xf4>)
 8007598:	429e      	cmp	r6, r3
 800759a:	4604      	mov	r4, r0
 800759c:	460d      	mov	r5, r1
 800759e:	da10      	bge.n	80075c2 <scalbn+0x52>
 80075a0:	a327      	add	r3, pc, #156	; (adr r3, 8007640 <scalbn+0xd0>)
 80075a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a6:	e01f      	b.n	80075e8 <scalbn+0x78>
 80075a8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80075ac:	4291      	cmp	r1, r2
 80075ae:	d10c      	bne.n	80075ca <scalbn+0x5a>
 80075b0:	ee10 2a10 	vmov	r2, s0
 80075b4:	4620      	mov	r0, r4
 80075b6:	4629      	mov	r1, r5
 80075b8:	f7f8 fe60 	bl	800027c <__adddf3>
 80075bc:	4604      	mov	r4, r0
 80075be:	460d      	mov	r5, r1
 80075c0:	e022      	b.n	8007608 <scalbn+0x98>
 80075c2:	460b      	mov	r3, r1
 80075c4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80075c8:	3936      	subs	r1, #54	; 0x36
 80075ca:	f24c 3250 	movw	r2, #50000	; 0xc350
 80075ce:	4296      	cmp	r6, r2
 80075d0:	dd0d      	ble.n	80075ee <scalbn+0x7e>
 80075d2:	2d00      	cmp	r5, #0
 80075d4:	a11c      	add	r1, pc, #112	; (adr r1, 8007648 <scalbn+0xd8>)
 80075d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075da:	da02      	bge.n	80075e2 <scalbn+0x72>
 80075dc:	a11c      	add	r1, pc, #112	; (adr r1, 8007650 <scalbn+0xe0>)
 80075de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075e2:	a319      	add	r3, pc, #100	; (adr r3, 8007648 <scalbn+0xd8>)
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	f7f8 fffe 	bl	80005e8 <__aeabi_dmul>
 80075ec:	e7e6      	b.n	80075bc <scalbn+0x4c>
 80075ee:	1872      	adds	r2, r6, r1
 80075f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80075f4:	428a      	cmp	r2, r1
 80075f6:	dcec      	bgt.n	80075d2 <scalbn+0x62>
 80075f8:	2a00      	cmp	r2, #0
 80075fa:	dd08      	ble.n	800760e <scalbn+0x9e>
 80075fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007600:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007604:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007608:	ec45 4b10 	vmov	d0, r4, r5
 800760c:	bd70      	pop	{r4, r5, r6, pc}
 800760e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007612:	da08      	bge.n	8007626 <scalbn+0xb6>
 8007614:	2d00      	cmp	r5, #0
 8007616:	a10a      	add	r1, pc, #40	; (adr r1, 8007640 <scalbn+0xd0>)
 8007618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800761c:	dac0      	bge.n	80075a0 <scalbn+0x30>
 800761e:	a10e      	add	r1, pc, #56	; (adr r1, 8007658 <scalbn+0xe8>)
 8007620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007624:	e7bc      	b.n	80075a0 <scalbn+0x30>
 8007626:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800762a:	3236      	adds	r2, #54	; 0x36
 800762c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007630:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007634:	4620      	mov	r0, r4
 8007636:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <scalbn+0xf8>)
 8007638:	2200      	movs	r2, #0
 800763a:	e7d5      	b.n	80075e8 <scalbn+0x78>
 800763c:	f3af 8000 	nop.w
 8007640:	c2f8f359 	.word	0xc2f8f359
 8007644:	01a56e1f 	.word	0x01a56e1f
 8007648:	8800759c 	.word	0x8800759c
 800764c:	7e37e43c 	.word	0x7e37e43c
 8007650:	8800759c 	.word	0x8800759c
 8007654:	fe37e43c 	.word	0xfe37e43c
 8007658:	c2f8f359 	.word	0xc2f8f359
 800765c:	81a56e1f 	.word	0x81a56e1f
 8007660:	43500000 	.word	0x43500000
 8007664:	ffff3cb0 	.word	0xffff3cb0
 8007668:	3c900000 	.word	0x3c900000
 800766c:	00000000 	.word	0x00000000

08007670 <floor>:
 8007670:	ec51 0b10 	vmov	r0, r1, d0
 8007674:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007680:	2e13      	cmp	r6, #19
 8007682:	ee10 5a10 	vmov	r5, s0
 8007686:	ee10 8a10 	vmov	r8, s0
 800768a:	460c      	mov	r4, r1
 800768c:	dc31      	bgt.n	80076f2 <floor+0x82>
 800768e:	2e00      	cmp	r6, #0
 8007690:	da14      	bge.n	80076bc <floor+0x4c>
 8007692:	a333      	add	r3, pc, #204	; (adr r3, 8007760 <floor+0xf0>)
 8007694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007698:	f7f8 fdf0 	bl	800027c <__adddf3>
 800769c:	2200      	movs	r2, #0
 800769e:	2300      	movs	r3, #0
 80076a0:	f7f9 fa32 	bl	8000b08 <__aeabi_dcmpgt>
 80076a4:	b138      	cbz	r0, 80076b6 <floor+0x46>
 80076a6:	2c00      	cmp	r4, #0
 80076a8:	da53      	bge.n	8007752 <floor+0xe2>
 80076aa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80076ae:	4325      	orrs	r5, r4
 80076b0:	d052      	beq.n	8007758 <floor+0xe8>
 80076b2:	4c2d      	ldr	r4, [pc, #180]	; (8007768 <floor+0xf8>)
 80076b4:	2500      	movs	r5, #0
 80076b6:	4621      	mov	r1, r4
 80076b8:	4628      	mov	r0, r5
 80076ba:	e024      	b.n	8007706 <floor+0x96>
 80076bc:	4f2b      	ldr	r7, [pc, #172]	; (800776c <floor+0xfc>)
 80076be:	4137      	asrs	r7, r6
 80076c0:	ea01 0307 	and.w	r3, r1, r7
 80076c4:	4303      	orrs	r3, r0
 80076c6:	d01e      	beq.n	8007706 <floor+0x96>
 80076c8:	a325      	add	r3, pc, #148	; (adr r3, 8007760 <floor+0xf0>)
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	f7f8 fdd5 	bl	800027c <__adddf3>
 80076d2:	2200      	movs	r2, #0
 80076d4:	2300      	movs	r3, #0
 80076d6:	f7f9 fa17 	bl	8000b08 <__aeabi_dcmpgt>
 80076da:	2800      	cmp	r0, #0
 80076dc:	d0eb      	beq.n	80076b6 <floor+0x46>
 80076de:	2c00      	cmp	r4, #0
 80076e0:	bfbe      	ittt	lt
 80076e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80076e6:	4133      	asrlt	r3, r6
 80076e8:	18e4      	addlt	r4, r4, r3
 80076ea:	ea24 0407 	bic.w	r4, r4, r7
 80076ee:	2500      	movs	r5, #0
 80076f0:	e7e1      	b.n	80076b6 <floor+0x46>
 80076f2:	2e33      	cmp	r6, #51	; 0x33
 80076f4:	dd0b      	ble.n	800770e <floor+0x9e>
 80076f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80076fa:	d104      	bne.n	8007706 <floor+0x96>
 80076fc:	ee10 2a10 	vmov	r2, s0
 8007700:	460b      	mov	r3, r1
 8007702:	f7f8 fdbb 	bl	800027c <__adddf3>
 8007706:	ec41 0b10 	vmov	d0, r0, r1
 800770a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800770e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8007712:	f04f 37ff 	mov.w	r7, #4294967295
 8007716:	40df      	lsrs	r7, r3
 8007718:	4238      	tst	r0, r7
 800771a:	d0f4      	beq.n	8007706 <floor+0x96>
 800771c:	a310      	add	r3, pc, #64	; (adr r3, 8007760 <floor+0xf0>)
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	f7f8 fdab 	bl	800027c <__adddf3>
 8007726:	2200      	movs	r2, #0
 8007728:	2300      	movs	r3, #0
 800772a:	f7f9 f9ed 	bl	8000b08 <__aeabi_dcmpgt>
 800772e:	2800      	cmp	r0, #0
 8007730:	d0c1      	beq.n	80076b6 <floor+0x46>
 8007732:	2c00      	cmp	r4, #0
 8007734:	da0a      	bge.n	800774c <floor+0xdc>
 8007736:	2e14      	cmp	r6, #20
 8007738:	d101      	bne.n	800773e <floor+0xce>
 800773a:	3401      	adds	r4, #1
 800773c:	e006      	b.n	800774c <floor+0xdc>
 800773e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007742:	2301      	movs	r3, #1
 8007744:	40b3      	lsls	r3, r6
 8007746:	441d      	add	r5, r3
 8007748:	45a8      	cmp	r8, r5
 800774a:	d8f6      	bhi.n	800773a <floor+0xca>
 800774c:	ea25 0507 	bic.w	r5, r5, r7
 8007750:	e7b1      	b.n	80076b6 <floor+0x46>
 8007752:	2500      	movs	r5, #0
 8007754:	462c      	mov	r4, r5
 8007756:	e7ae      	b.n	80076b6 <floor+0x46>
 8007758:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800775c:	e7ab      	b.n	80076b6 <floor+0x46>
 800775e:	bf00      	nop
 8007760:	8800759c 	.word	0x8800759c
 8007764:	7e37e43c 	.word	0x7e37e43c
 8007768:	bff00000 	.word	0xbff00000
 800776c:	000fffff 	.word	0x000fffff

08007770 <_init>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	bf00      	nop
 8007774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007776:	bc08      	pop	{r3}
 8007778:	469e      	mov	lr, r3
 800777a:	4770      	bx	lr

0800777c <_fini>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	bf00      	nop
 8007780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007782:	bc08      	pop	{r3}
 8007784:	469e      	mov	lr, r3
 8007786:	4770      	bx	lr
